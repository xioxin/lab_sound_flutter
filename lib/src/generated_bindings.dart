// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to LabSound
class LabSoundBind {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LabSoundBind(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LabSoundBind.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror =
      _strerror_ptr.asFunction<_dart_strerror>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_r>>('strtok_r');
  late final _dart_strtok_r _strtok_r =
      _strtok_r_ptr.asFunction<_dart_strtok_r>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_r_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_r>>('strerror_r');
  late final _dart_strerror_r _strerror_r =
      _strerror_r_ptr.asFunction<_dart_strerror_r>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup = _strdup_ptr.asFunction<_dart_strdup>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy = _memccpy_ptr.asFunction<_dart_memccpy>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpy_ptr = _lookup<ffi.NativeFunction<_c_stpcpy>>('stpcpy');
  late final _dart_stpcpy _stpcpy = _stpcpy_ptr.asFunction<_dart_stpcpy>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpy_ptr = _lookup<ffi.NativeFunction<_c_stpncpy>>('stpncpy');
  late final _dart_stpncpy _stpncpy = _stpncpy_ptr.asFunction<_dart_stpncpy>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndup_ptr = _lookup<ffi.NativeFunction<_c_strndup>>('strndup');
  late final _dart_strndup _strndup = _strndup_ptr.asFunction<_dart_strndup>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignal_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal>>('strsignal');
  late final _dart_strsignal _strsignal =
      _strsignal_ptr.asFunction<_dart_strsignal>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_s_ptr =
      _lookup<ffi.NativeFunction<_c_memset_s>>('memset_s');
  late final _dart_memset_s _memset_s =
      _memset_s_ptr.asFunction<_dart_memset_s>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmem_ptr = _lookup<ffi.NativeFunction<_c_memmem>>('memmem');
  late final _dart_memmem _memmem = _memmem_ptr.asFunction<_dart_memmem>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern4>>('memset_pattern4');
  late final _dart_memset_pattern4 _memset_pattern4 =
      _memset_pattern4_ptr.asFunction<_dart_memset_pattern4>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern8>>('memset_pattern8');
  late final _dart_memset_pattern8 _memset_pattern8 =
      _memset_pattern8_ptr.asFunction<_dart_memset_pattern8>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern16>>('memset_pattern16');
  late final _dart_memset_pattern16 _memset_pattern16 =
      _memset_pattern16_ptr.asFunction<_dart_memset_pattern16>();

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestr_ptr =
      _lookup<ffi.NativeFunction<_c_strcasestr>>('strcasestr');
  late final _dart_strcasestr _strcasestr =
      _strcasestr_ptr.asFunction<_dart_strcasestr>();

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstr_ptr = _lookup<ffi.NativeFunction<_c_strnstr>>('strnstr');
  late final _dart_strnstr _strnstr = _strnstr_ptr.asFunction<_dart_strnstr>();

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcat_ptr = _lookup<ffi.NativeFunction<_c_strlcat>>('strlcat');
  late final _dart_strlcat _strlcat = _strlcat_ptr.asFunction<_dart_strlcat>();

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpy_ptr = _lookup<ffi.NativeFunction<_c_strlcpy>>('strlcpy');
  late final _dart_strlcpy _strlcpy = _strlcpy_ptr.asFunction<_dart_strlcpy>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmode_ptr = _lookup<ffi.NativeFunction<_c_strmode>>('strmode');
  late final _dart_strmode _strmode = _strmode_ptr.asFunction<_dart_strmode>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsep_ptr = _lookup<ffi.NativeFunction<_c_strsep>>('strsep');
  late final _dart_strsep _strsep = _strsep_ptr.asFunction<_dart_strsep>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swab_ptr = _lookup<ffi.NativeFunction<_c_swab>>('swab');
  late final _dart_swab _swab = _swab_ptr.asFunction<_dart_swab>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmp_ptr =
      _lookup<ffi.NativeFunction<_c_timingsafe_bcmp>>('timingsafe_bcmp');
  late final _dart_timingsafe_bcmp _timingsafe_bcmp =
      _timingsafe_bcmp_ptr.asFunction<_dart_timingsafe_bcmp>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Int8> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_r_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal_r>>('strsignal_r');
  late final _dart_strsignal_r _strsignal_r =
      _strsignal_r_ptr.asFunction<_dart_strsignal_r>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmp_ptr = _lookup<ffi.NativeFunction<_c_bcmp>>('bcmp');
  late final _dart_bcmp _bcmp = _bcmp_ptr.asFunction<_dart_bcmp>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopy_ptr = _lookup<ffi.NativeFunction<_c_bcopy>>('bcopy');
  late final _dart_bcopy _bcopy = _bcopy_ptr.asFunction<_dart_bcopy>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzero_ptr = _lookup<ffi.NativeFunction<_c_bzero>>('bzero');
  late final _dart_bzero _bzero = _bzero_ptr.asFunction<_dart_bzero>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _index_ptr = _lookup<ffi.NativeFunction<_c_index>>('index');
  late final _dart_index _index = _index_ptr.asFunction<_dart_index>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindex_ptr = _lookup<ffi.NativeFunction<_c_rindex>>('rindex');
  late final _dart_rindex _rindex = _rindex_ptr.asFunction<_dart_rindex>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffs_ptr = _lookup<ffi.NativeFunction<_c_ffs>>('ffs');
  late final _dart_ffs _ffs = _ffs_ptr.asFunction<_dart_ffs>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp>>('strcasecmp');
  late final _dart_strcasecmp _strcasecmp =
      _strcasecmp_ptr.asFunction<_dart_strcasecmp>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp>>('strncasecmp');
  late final _dart_strncasecmp _strncasecmp =
      _strncasecmp_ptr.asFunction<_dart_strncasecmp>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffsl_ptr = _lookup<ffi.NativeFunction<_c_ffsl>>('ffsl');
  late final _dart_ffsl _ffsl = _ffsl_ptr.asFunction<_dart_ffsl>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsll_ptr = _lookup<ffi.NativeFunction<_c_ffsll>>('ffsll');
  late final _dart_ffsll _ffsll = _ffsll_ptr.asFunction<_dart_ffsll>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _fls_ptr = _lookup<ffi.NativeFunction<_c_fls>>('fls');
  late final _dart_fls _fls = _fls_ptr.asFunction<_dart_fls>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flsl_ptr = _lookup<ffi.NativeFunction<_c_flsl>>('flsl');
  late final _dart_flsl _flsl = _flsl_ptr.asFunction<_dart_flsl>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsll_ptr = _lookup<ffi.NativeFunction<_c_flsll>>('flsll');
  late final _dart_flsll _flsll = _flsll_ptr.asFunction<_dart_flsll>();

  AudioDeviceInfoList labSoundMakeAudioDeviceList() {
    return _labSoundMakeAudioDeviceList();
  }

  late final _labSoundMakeAudioDeviceList_ptr =
      _lookup<ffi.NativeFunction<_c_labSoundMakeAudioDeviceList>>(
          'labSoundMakeAudioDeviceList');
  late final _dart_labSoundMakeAudioDeviceList _labSoundMakeAudioDeviceList =
      _labSoundMakeAudioDeviceList_ptr
          .asFunction<_dart_labSoundMakeAudioDeviceList>();

  /// /////////
  /// PORT ///
  /// /////////
  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void registerDecodeAudioSendPort(
    int sendPort,
  ) {
    return _registerDecodeAudioSendPort(
      sendPort,
    );
  }

  late final _registerDecodeAudioSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerDecodeAudioSendPort>>(
          'registerDecodeAudioSendPort');
  late final _dart_registerDecodeAudioSendPort _registerDecodeAudioSendPort =
      _registerDecodeAudioSendPort_ptr
          .asFunction<_dart_registerDecodeAudioSendPort>();

  void registerAudioSampleOnEndedSendPort(
    int sendPort,
  ) {
    return _registerAudioSampleOnEndedSendPort(
      sendPort,
    );
  }

  late final _registerAudioSampleOnEndedSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerAudioSampleOnEndedSendPort>>(
          'registerAudioSampleOnEndedSendPort');
  late final _dart_registerAudioSampleOnEndedSendPort
      _registerAudioSampleOnEndedSendPort =
      _registerAudioSampleOnEndedSendPort_ptr
          .asFunction<_dart_registerAudioSampleOnEndedSendPort>();

  void registerOfflineRenderCompleteSendPort(
    int sendPort,
  ) {
    return _registerOfflineRenderCompleteSendPort(
      sendPort,
    );
  }

  late final _registerOfflineRenderCompleteSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerOfflineRenderCompleteSendPort>>(
          'registerOfflineRenderCompleteSendPort');
  late final _dart_registerOfflineRenderCompleteSendPort
      _registerOfflineRenderCompleteSendPort =
      _registerOfflineRenderCompleteSendPort_ptr
          .asFunction<_dart_registerOfflineRenderCompleteSendPort>();

  /// /////////////////
  /// AudioContext ///
  /// /////////////////
  ffi.Pointer<ffi.Void> createRealtimeAudioContext(
    AudioStreamConfig outputConfig,
    AudioStreamConfig inputConfig,
  ) {
    return _createRealtimeAudioContext(
      outputConfig,
      inputConfig,
    );
  }

  late final _createRealtimeAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createRealtimeAudioContext>>(
          'createRealtimeAudioContext');
  late final _dart_createRealtimeAudioContext _createRealtimeAudioContext =
      _createRealtimeAudioContext_ptr
          .asFunction<_dart_createRealtimeAudioContext>();

  ffi.Pointer<ffi.Void> createOfflineAudioContext(
    AudioStreamConfig outputConfig,
    double recordTimeMilliseconds,
  ) {
    return _createOfflineAudioContext(
      outputConfig,
      recordTimeMilliseconds,
    );
  }

  late final _createOfflineAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createOfflineAudioContext>>(
          'createOfflineAudioContext');
  late final _dart_createOfflineAudioContext _createOfflineAudioContext =
      _createOfflineAudioContext_ptr
          .asFunction<_dart_createOfflineAudioContext>();

  int AudioContext_startOfflineRendering(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_startOfflineRendering(
      context,
    );
  }

  late final _AudioContext_startOfflineRendering_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_startOfflineRendering>>(
          'AudioContext_startOfflineRendering');
  late final _dart_AudioContext_startOfflineRendering
      _AudioContext_startOfflineRendering =
      _AudioContext_startOfflineRendering_ptr.asFunction<
          _dart_AudioContext_startOfflineRendering>();

  void AudioContext_addAutomaticPullNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_addAutomaticPullNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_addAutomaticPullNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_addAutomaticPullNode>>(
          'AudioContext_addAutomaticPullNode');
  late final _dart_AudioContext_addAutomaticPullNode
      _AudioContext_addAutomaticPullNode =
      _AudioContext_addAutomaticPullNode_ptr.asFunction<
          _dart_AudioContext_addAutomaticPullNode>();

  void AudioContext_removeAutomaticPullNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_removeAutomaticPullNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_removeAutomaticPullNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_removeAutomaticPullNode>>(
          'AudioContext_removeAutomaticPullNode');
  late final _dart_AudioContext_removeAutomaticPullNode
      _AudioContext_removeAutomaticPullNode =
      _AudioContext_removeAutomaticPullNode_ptr.asFunction<
          _dart_AudioContext_removeAutomaticPullNode>();

  void AudioContext_processAutomaticPullNodes(
    ffi.Pointer<ffi.Void> context,
    int framesToProcess,
  ) {
    return _AudioContext_processAutomaticPullNodes(
      context,
      framesToProcess,
    );
  }

  late final _AudioContext_processAutomaticPullNodes_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_processAutomaticPullNodes>>(
          'AudioContext_processAutomaticPullNodes');
  late final _dart_AudioContext_processAutomaticPullNodes
      _AudioContext_processAutomaticPullNodes =
      _AudioContext_processAutomaticPullNodes_ptr.asFunction<
          _dart_AudioContext_processAutomaticPullNodes>();

  void AudioContext_handlePreRenderTasks(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_handlePreRenderTasks(
      context,
    );
  }

  late final _AudioContext_handlePreRenderTasks_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_handlePreRenderTasks>>(
          'AudioContext_handlePreRenderTasks');
  late final _dart_AudioContext_handlePreRenderTasks
      _AudioContext_handlePreRenderTasks =
      _AudioContext_handlePreRenderTasks_ptr.asFunction<
          _dart_AudioContext_handlePreRenderTasks>();

  void AudioContext_handlePostRenderTasks(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_handlePostRenderTasks(
      context,
    );
  }

  late final _AudioContext_handlePostRenderTasks_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_handlePostRenderTasks>>(
          'AudioContext_handlePostRenderTasks');
  late final _dart_AudioContext_handlePostRenderTasks
      _AudioContext_handlePostRenderTasks =
      _AudioContext_handlePostRenderTasks_ptr.asFunction<
          _dart_AudioContext_handlePostRenderTasks>();

  void AudioContext_synchronizeConnections(
    ffi.Pointer<ffi.Void> context,
    int timeOut_ms,
  ) {
    return _AudioContext_synchronizeConnections(
      context,
      timeOut_ms,
    );
  }

  late final _AudioContext_synchronizeConnections_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_synchronizeConnections>>(
          'AudioContext_synchronizeConnections');
  late final _dart_AudioContext_synchronizeConnections
      _AudioContext_synchronizeConnections =
      _AudioContext_synchronizeConnections_ptr.asFunction<
          _dart_AudioContext_synchronizeConnections>();

  void AudioContext_suspend(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_suspend(
      context,
    );
  }

  late final _AudioContext_suspend_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_suspend>>(
          'AudioContext_suspend');
  late final _dart_AudioContext_suspend _AudioContext_suspend =
      _AudioContext_suspend_ptr.asFunction<_dart_AudioContext_suspend>();

  void AudioContext_resume(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_resume(
      context,
    );
  }

  late final _AudioContext_resume_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_resume>>(
          'AudioContext_resume');
  late final _dart_AudioContext_resume _AudioContext_resume =
      _AudioContext_resume_ptr.asFunction<_dart_AudioContext_resume>();

  double AudioContext_currentTime(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_currentTime(
      context,
    );
  }

  late final _AudioContext_currentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentTime>>(
          'AudioContext_currentTime');
  late final _dart_AudioContext_currentTime _AudioContext_currentTime =
      _AudioContext_currentTime_ptr.asFunction<
          _dart_AudioContext_currentTime>();

  double AudioContext_predictedCurrentTime(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_predictedCurrentTime(
      context,
    );
  }

  late final _AudioContext_predictedCurrentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_predictedCurrentTime>>(
          'AudioContext_predictedCurrentTime');
  late final _dart_AudioContext_predictedCurrentTime
      _AudioContext_predictedCurrentTime =
      _AudioContext_predictedCurrentTime_ptr.asFunction<
          _dart_AudioContext_predictedCurrentTime>();

  double AudioContext_sampleRate(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_sampleRate(
      context,
    );
  }

  late final _AudioContext_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_sampleRate>>(
          'AudioContext_sampleRate');
  late final _dart_AudioContext_sampleRate _AudioContext_sampleRate =
      _AudioContext_sampleRate_ptr.asFunction<_dart_AudioContext_sampleRate>();

  int AudioContext_isInitialized(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_isInitialized(
      context,
    );
  }

  late final _AudioContext_isInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isInitialized>>(
          'AudioContext_isInitialized');
  late final _dart_AudioContext_isInitialized _AudioContext_isInitialized =
      _AudioContext_isInitialized_ptr.asFunction<
          _dart_AudioContext_isInitialized>();

  int AudioContext_isConnected(
    ffi.Pointer<ffi.Void> context,
    int destinationIndex,
    int sourceIndex,
  ) {
    return _AudioContext_isConnected(
      context,
      destinationIndex,
      sourceIndex,
    );
  }

  late final _AudioContext_isConnected_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isConnected>>(
          'AudioContext_isConnected');
  late final _dart_AudioContext_isConnected _AudioContext_isConnected =
      _AudioContext_isConnected_ptr.asFunction<
          _dart_AudioContext_isConnected>();

  void AudioContext_setDeviceNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_setDeviceNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_setDeviceNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_setDeviceNode>>(
          'AudioContext_setDeviceNode');
  late final _dart_AudioContext_setDeviceNode _AudioContext_setDeviceNode =
      _AudioContext_setDeviceNode_ptr.asFunction<
          _dart_AudioContext_setDeviceNode>();

  int AudioContext_device(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_device(
      context,
    );
  }

  late final _AudioContext_device_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_device>>(
          'AudioContext_device');
  late final _dart_AudioContext_device _AudioContext_device =
      _AudioContext_device_ptr.asFunction<_dart_AudioContext_device>();

  int AudioContext_isOfflineContext(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_isOfflineContext(
      context,
    );
  }

  late final _AudioContext_isOfflineContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isOfflineContext>>(
          'AudioContext_isOfflineContext');
  late final _dart_AudioContext_isOfflineContext
      _AudioContext_isOfflineContext = _AudioContext_isOfflineContext_ptr
          .asFunction<_dart_AudioContext_isOfflineContext>();

  int AudioContext_currentSampleFrame(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_currentSampleFrame(
      context,
    );
  }

  late final _AudioContext_currentSampleFrame_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentSampleFrame>>(
          'AudioContext_currentSampleFrame');
  late final _dart_AudioContext_currentSampleFrame
      _AudioContext_currentSampleFrame = _AudioContext_currentSampleFrame_ptr
          .asFunction<_dart_AudioContext_currentSampleFrame>();

  void AudioContext_connect(
    ffi.Pointer<ffi.Void> context,
    int destination,
    int source,
    int destIdx,
    int srcIdx,
  ) {
    return _AudioContext_connect(
      context,
      destination,
      source,
      destIdx,
      srcIdx,
    );
  }

  late final _AudioContext_connect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_connect>>(
          'AudioContext_connect');
  late final _dart_AudioContext_connect _AudioContext_connect =
      _AudioContext_connect_ptr.asFunction<_dart_AudioContext_connect>();

  void AudioContext_disconnect(
    ffi.Pointer<ffi.Void> context,
    int destination,
    int source,
    int destIdx,
    int srcIdx,
  ) {
    return _AudioContext_disconnect(
      context,
      destination,
      source,
      destIdx,
      srcIdx,
    );
  }

  late final _AudioContext_disconnect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnect>>(
          'AudioContext_disconnect');
  late final _dart_AudioContext_disconnect _AudioContext_disconnect =
      _AudioContext_disconnect_ptr.asFunction<_dart_AudioContext_disconnect>();

  void AudioContext_disconnect2(
    ffi.Pointer<ffi.Void> context,
    int node,
    int destIdx,
  ) {
    return _AudioContext_disconnect2(
      context,
      node,
      destIdx,
    );
  }

  late final _AudioContext_disconnect2_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnect2>>(
          'AudioContext_disconnect2');
  late final _dart_AudioContext_disconnect2 _AudioContext_disconnect2 =
      _AudioContext_disconnect2_ptr.asFunction<
          _dart_AudioContext_disconnect2>();

  void AudioContext_releaseContext(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _AudioContext_releaseContext(
      ctx,
    );
  }

  late final _AudioContext_releaseContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_releaseContext>>(
          'AudioContext_releaseContext');
  late final _dart_AudioContext_releaseContext _AudioContext_releaseContext =
      _AudioContext_releaseContext_ptr.asFunction<
          _dart_AudioContext_releaseContext>();

  /// ///////////////
  /// AudioParam ///
  /// ///////////////
  double AudioParam_value(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_value(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_value_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_value>>('AudioParam_value');
  late final _dart_AudioParam_value _AudioParam_value =
      _AudioParam_value_ptr.asFunction<_dart_AudioParam_value>();

  void AudioParam_setValue(
    int nodeId,
    int paramIndex,
    double value,
  ) {
    return _AudioParam_setValue(
      nodeId,
      paramIndex,
      value,
    );
  }

  late final _AudioParam_setValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValue>>(
          'AudioParam_setValue');
  late final _dart_AudioParam_setValue _AudioParam_setValue =
      _AudioParam_setValue_ptr.asFunction<_dart_AudioParam_setValue>();

  double AudioParam_finalValue(
    int nodeId,
    int paramIndex,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioParam_finalValue(
      nodeId,
      paramIndex,
      context,
    );
  }

  late final _AudioParam_finalValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_finalValue>>(
          'AudioParam_finalValue');
  late final _dart_AudioParam_finalValue _AudioParam_finalValue =
      _AudioParam_finalValue_ptr.asFunction<_dart_AudioParam_finalValue>();

  void AudioParam_setValueCurveAtTime(
    int nodeId,
    int paramIndex,
    ffi.Pointer<ffi.Float> curve,
    double time,
    double duration,
  ) {
    return _AudioParam_setValueCurveAtTime(
      nodeId,
      paramIndex,
      curve,
      time,
      duration,
    );
  }

  late final _AudioParam_setValueCurveAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueCurveAtTime>>(
          'AudioParam_setValueCurveAtTime');
  late final _dart_AudioParam_setValueCurveAtTime
      _AudioParam_setValueCurveAtTime = _AudioParam_setValueCurveAtTime_ptr
          .asFunction<_dart_AudioParam_setValueCurveAtTime>();

  void AudioParam_cancelScheduledValues(
    int nodeId,
    int paramIndex,
    double startTime,
  ) {
    return _AudioParam_cancelScheduledValues(
      nodeId,
      paramIndex,
      startTime,
    );
  }

  late final _AudioParam_cancelScheduledValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_cancelScheduledValues>>(
          'AudioParam_cancelScheduledValues');
  late final _dart_AudioParam_cancelScheduledValues
      _AudioParam_cancelScheduledValues = _AudioParam_cancelScheduledValues_ptr
          .asFunction<_dart_AudioParam_cancelScheduledValues>();

  void AudioParam_setValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_setValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_setValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueAtTime>>(
          'AudioParam_setValueAtTime');
  late final _dart_AudioParam_setValueAtTime _AudioParam_setValueAtTime =
      _AudioParam_setValueAtTime_ptr.asFunction<
          _dart_AudioParam_setValueAtTime>();

  void AudioParam_exponentialRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_exponentialRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_exponentialRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_exponentialRampToValueAtTime>>(
          'AudioParam_exponentialRampToValueAtTime');
  late final _dart_AudioParam_exponentialRampToValueAtTime
      _AudioParam_exponentialRampToValueAtTime =
      _AudioParam_exponentialRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_exponentialRampToValueAtTime>();

  void AudioParam_linearRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_linearRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_linearRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_linearRampToValueAtTime>>(
          'AudioParam_linearRampToValueAtTime');
  late final _dart_AudioParam_linearRampToValueAtTime
      _AudioParam_linearRampToValueAtTime =
      _AudioParam_linearRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_linearRampToValueAtTime>();

  void AudioParam_setTargetAtTime(
    int nodeId,
    int paramIndex,
    double target,
    double time,
    double timeConstant,
  ) {
    return _AudioParam_setTargetAtTime(
      nodeId,
      paramIndex,
      target,
      time,
      timeConstant,
    );
  }

  late final _AudioParam_setTargetAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setTargetAtTime>>(
          'AudioParam_setTargetAtTime');
  late final _dart_AudioParam_setTargetAtTime _AudioParam_setTargetAtTime =
      _AudioParam_setTargetAtTime_ptr.asFunction<
          _dart_AudioParam_setTargetAtTime>();

  double AudioParam_minValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_minValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_minValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_minValue>>(
          'AudioParam_minValue');
  late final _dart_AudioParam_minValue _AudioParam_minValue =
      _AudioParam_minValue_ptr.asFunction<_dart_AudioParam_minValue>();

  double AudioParam_maxValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_maxValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_maxValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_maxValue>>(
          'AudioParam_maxValue');
  late final _dart_AudioParam_maxValue _AudioParam_maxValue =
      _AudioParam_maxValue_ptr.asFunction<_dart_AudioParam_maxValue>();

  double AudioParam_defaultValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_defaultValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_defaultValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_defaultValue>>(
          'AudioParam_defaultValue');
  late final _dart_AudioParam_defaultValue _AudioParam_defaultValue =
      _AudioParam_defaultValue_ptr.asFunction<_dart_AudioParam_defaultValue>();

  void AudioParam_resetSmoothedValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_resetSmoothedValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_resetSmoothedValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_resetSmoothedValue>>(
          'AudioParam_resetSmoothedValue');
  late final _dart_AudioParam_resetSmoothedValue
      _AudioParam_resetSmoothedValue = _AudioParam_resetSmoothedValue_ptr
          .asFunction<_dart_AudioParam_resetSmoothedValue>();

  void AudioParam_setSmoothingConstant(
    int nodeId,
    int paramIndex,
    double k,
  ) {
    return _AudioParam_setSmoothingConstant(
      nodeId,
      paramIndex,
      k,
    );
  }

  late final _AudioParam_setSmoothingConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setSmoothingConstant>>(
          'AudioParam_setSmoothingConstant');
  late final _dart_AudioParam_setSmoothingConstant
      _AudioParam_setSmoothingConstant = _AudioParam_setSmoothingConstant_ptr
          .asFunction<_dart_AudioParam_setSmoothingConstant>();

  int AudioParam_hasSampleAccurateValues(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_hasSampleAccurateValues(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_hasSampleAccurateValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_hasSampleAccurateValues>>(
          'AudioParam_hasSampleAccurateValues');
  late final _dart_AudioParam_hasSampleAccurateValues
      _AudioParam_hasSampleAccurateValues =
      _AudioParam_hasSampleAccurateValues_ptr.asFunction<
          _dart_AudioParam_hasSampleAccurateValues>();

  /// //////////////
  /// AudioNode ///
  /// //////////////
  void AudioNode_initialize(
    int nodeId,
  ) {
    return _AudioNode_initialize(
      nodeId,
    );
  }

  late final _AudioNode_initialize_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_initialize>>(
          'AudioNode_initialize');
  late final _dart_AudioNode_initialize _AudioNode_initialize =
      _AudioNode_initialize_ptr.asFunction<_dart_AudioNode_initialize>();

  void AudioNode_uninitialize(
    int nodeId,
  ) {
    return _AudioNode_uninitialize(
      nodeId,
    );
  }

  late final _AudioNode_uninitialize_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_uninitialize>>(
          'AudioNode_uninitialize');
  late final _dart_AudioNode_uninitialize _AudioNode_uninitialize =
      _AudioNode_uninitialize_ptr.asFunction<_dart_AudioNode_uninitialize>();

  int AudioNode_isScheduledNode(
    int nodeId,
  ) {
    return _AudioNode_isScheduledNode(
      nodeId,
    );
  }

  late final _AudioNode_isScheduledNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_isScheduledNode>>(
          'AudioNode_isScheduledNode');
  late final _dart_AudioNode_isScheduledNode _AudioNode_isScheduledNode =
      _AudioNode_isScheduledNode_ptr.asFunction<
          _dart_AudioNode_isScheduledNode>();

  int AudioNode_numberOfInputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfInputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfInputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfInputs>>(
          'AudioNode_numberOfInputs');
  late final _dart_AudioNode_numberOfInputs _AudioNode_numberOfInputs =
      _AudioNode_numberOfInputs_ptr.asFunction<
          _dart_AudioNode_numberOfInputs>();

  int AudioNode_numberOfOutputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfOutputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfOutputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfOutputs>>(
          'AudioNode_numberOfOutputs');
  late final _dart_AudioNode_numberOfOutputs _AudioNode_numberOfOutputs =
      _AudioNode_numberOfOutputs_ptr.asFunction<
          _dart_AudioNode_numberOfOutputs>();

  int AudioNode_channelCount(
    int nodeId,
  ) {
    return _AudioNode_channelCount(
      nodeId,
    );
  }

  late final _AudioNode_channelCount_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_channelCount>>(
          'AudioNode_channelCount');
  late final _dart_AudioNode_channelCount _AudioNode_channelCount =
      _AudioNode_channelCount_ptr.asFunction<_dart_AudioNode_channelCount>();

  void AudioNode_reset(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioNode_reset(
      nodeId,
      context,
    );
  }

  late final _AudioNode_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_reset>>('AudioNode_reset');
  late final _dart_AudioNode_reset _AudioNode_reset =
      _AudioNode_reset_ptr.asFunction<_dart_AudioNode_reset>();

  ffi.Pointer<ffi.Int8> AudioNode_name(
    int nodeId,
  ) {
    return _AudioNode_name(
      nodeId,
    );
  }

  late final _AudioNode_name_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_name>>('AudioNode_name');
  late final _dart_AudioNode_name _AudioNode_name =
      _AudioNode_name_ptr.asFunction<_dart_AudioNode_name>();

  void releaseNode(
    int nodeId,
  ) {
    return _releaseNode(
      nodeId,
    );
  }

  late final _releaseNode_ptr =
      _lookup<ffi.NativeFunction<_c_releaseNode>>('releaseNode');
  late final _dart_releaseNode _releaseNode =
      _releaseNode_ptr.asFunction<_dart_releaseNode>();

  int hasNode(
    int nodeId,
  ) {
    return _hasNode(
      nodeId,
    );
  }

  late final _hasNode_ptr = _lookup<ffi.NativeFunction<_c_hasNode>>('hasNode');
  late final _dart_hasNode _hasNode = _hasNode_ptr.asFunction<_dart_hasNode>();

  /// AudioScheduledSourceNode
  int AudioScheduledSourceNode_isPlayingOrScheduled(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_isPlayingOrScheduled(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_isPlayingOrScheduled_ptr = _lookup<
          ffi.NativeFunction<_c_AudioScheduledSourceNode_isPlayingOrScheduled>>(
      'AudioScheduledSourceNode_isPlayingOrScheduled');
  late final _dart_AudioScheduledSourceNode_isPlayingOrScheduled
      _AudioScheduledSourceNode_isPlayingOrScheduled =
      _AudioScheduledSourceNode_isPlayingOrScheduled_ptr.asFunction<
          _dart_AudioScheduledSourceNode_isPlayingOrScheduled>();

  void AudioScheduledSourceNode_stop(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_stop(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_stop_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_stop>>(
          'AudioScheduledSourceNode_stop');
  late final _dart_AudioScheduledSourceNode_stop
      _AudioScheduledSourceNode_stop = _AudioScheduledSourceNode_stop_ptr
          .asFunction<_dart_AudioScheduledSourceNode_stop>();

  int AudioScheduledSourceNode_hasFinished(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_hasFinished(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_hasFinished_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_hasFinished>>(
          'AudioScheduledSourceNode_hasFinished');
  late final _dart_AudioScheduledSourceNode_hasFinished
      _AudioScheduledSourceNode_hasFinished =
      _AudioScheduledSourceNode_hasFinished_ptr.asFunction<
          _dart_AudioScheduledSourceNode_hasFinished>();

  int AudioScheduledSourceNode_startWhen(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_startWhen(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_startWhen_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_startWhen>>(
          'AudioScheduledSourceNode_startWhen');
  late final _dart_AudioScheduledSourceNode_startWhen
      _AudioScheduledSourceNode_startWhen =
      _AudioScheduledSourceNode_startWhen_ptr.asFunction<
          _dart_AudioScheduledSourceNode_startWhen>();

  void AudioScheduledSourceNode_start(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_start(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_start>>(
          'AudioScheduledSourceNode_start');
  late final _dart_AudioScheduledSourceNode_start
      _AudioScheduledSourceNode_start = _AudioScheduledSourceNode_start_ptr
          .asFunction<_dart_AudioScheduledSourceNode_start>();

  int AudioScheduledSourceNode_playbackState(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_playbackState(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_playbackState_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_playbackState>>(
          'AudioScheduledSourceNode_playbackState');
  late final _dart_AudioScheduledSourceNode_playbackState
      _AudioScheduledSourceNode_playbackState =
      _AudioScheduledSourceNode_playbackState_ptr.asFunction<
          _dart_AudioScheduledSourceNode_playbackState>();

  /// /////////////////////
  /// SampledAudioNode ///
  /// /////////////////////
  int createAudioSampleNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createAudioSampleNode(
      context,
    );
  }

  late final _createAudioSampleNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioSampleNode>>(
          'createAudioSampleNode');
  late final _dart_createAudioSampleNode _createAudioSampleNode =
      _createAudioSampleNode_ptr.asFunction<_dart_createAudioSampleNode>();

  void SampledAudioNode_setBus(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    int busIndex,
  ) {
    return _SampledAudioNode_setBus(
      nodeId,
      context,
      busIndex,
    );
  }

  late final _SampledAudioNode_setBus_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_setBus>>(
          'SampledAudioNode_setBus');
  late final _dart_SampledAudioNode_setBus _SampledAudioNode_setBus =
      _SampledAudioNode_setBus_ptr.asFunction<_dart_SampledAudioNode_setBus>();

  void SampledAudioNode_schedule(
    int nodeId,
    double when,
  ) {
    return _SampledAudioNode_schedule(
      nodeId,
      when,
    );
  }

  late final _SampledAudioNode_schedule_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule>>(
          'SampledAudioNode_schedule');
  late final _dart_SampledAudioNode_schedule _SampledAudioNode_schedule =
      _SampledAudioNode_schedule_ptr.asFunction<
          _dart_SampledAudioNode_schedule>();

  void SampledAudioNode_schedule2(
    int nodeId,
    double when,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule2(
      nodeId,
      when,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule2_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule2>>(
          'SampledAudioNode_schedule2');
  late final _dart_SampledAudioNode_schedule2 _SampledAudioNode_schedule2 =
      _SampledAudioNode_schedule2_ptr.asFunction<
          _dart_SampledAudioNode_schedule2>();

  void SampledAudioNode_schedule3(
    int nodeId,
    double when,
    double grainOffset,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule3(
      nodeId,
      when,
      grainOffset,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule3_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule3>>(
          'SampledAudioNode_schedule3');
  late final _dart_SampledAudioNode_schedule3 _SampledAudioNode_schedule3 =
      _SampledAudioNode_schedule3_ptr.asFunction<
          _dart_SampledAudioNode_schedule3>();

  void SampledAudioNode_schedule4(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule4(
      nodeId,
      when,
      grainOffset,
      grainDuration,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule4_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule4>>(
          'SampledAudioNode_schedule4');
  late final _dart_SampledAudioNode_schedule4 _SampledAudioNode_schedule4 =
      _SampledAudioNode_schedule4_ptr.asFunction<
          _dart_SampledAudioNode_schedule4>();

  void SampledAudioNode_clearSchedules(
    int nodeId,
  ) {
    return _SampledAudioNode_clearSchedules(
      nodeId,
    );
  }

  late final _SampledAudioNode_clearSchedules_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_clearSchedules>>(
          'SampledAudioNode_clearSchedules');
  late final _dart_SampledAudioNode_clearSchedules
      _SampledAudioNode_clearSchedules = _SampledAudioNode_clearSchedules_ptr
          .asFunction<_dart_SampledAudioNode_clearSchedules>();

  void SampledAudioNode_start(
    int nodeId,
    double when,
  ) {
    return _SampledAudioNode_start(
      nodeId,
      when,
    );
  }

  late final _SampledAudioNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start>>(
          'SampledAudioNode_start');
  late final _dart_SampledAudioNode_start _SampledAudioNode_start =
      _SampledAudioNode_start_ptr.asFunction<_dart_SampledAudioNode_start>();

  void SampledAudioNode_start2(
    int nodeId,
    double when,
    int loopCount,
  ) {
    return _SampledAudioNode_start2(
      nodeId,
      when,
      loopCount,
    );
  }

  late final _SampledAudioNode_start2_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start2>>(
          'SampledAudioNode_start2');
  late final _dart_SampledAudioNode_start2 _SampledAudioNode_start2 =
      _SampledAudioNode_start2_ptr.asFunction<_dart_SampledAudioNode_start2>();

  void SampledAudioNode_start3(
    int nodeId,
    double when,
    double grainOffset,
    int loopCount,
  ) {
    return _SampledAudioNode_start3(
      nodeId,
      when,
      grainOffset,
      loopCount,
    );
  }

  late final _SampledAudioNode_start3_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start3>>(
          'SampledAudioNode_start3');
  late final _dart_SampledAudioNode_start3 _SampledAudioNode_start3 =
      _SampledAudioNode_start3_ptr.asFunction<_dart_SampledAudioNode_start3>();

  void SampledAudioNode_start4(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
    int loopCount,
  ) {
    return _SampledAudioNode_start4(
      nodeId,
      when,
      grainOffset,
      grainDuration,
      loopCount,
    );
  }

  late final _SampledAudioNode_start4_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start4>>(
          'SampledAudioNode_start4');
  late final _dart_SampledAudioNode_start4 _SampledAudioNode_start4 =
      _SampledAudioNode_start4_ptr.asFunction<_dart_SampledAudioNode_start4>();

  int SampledAudioNode_getCursor(
    int index,
  ) {
    return _SampledAudioNode_getCursor(
      index,
    );
  }

  late final _SampledAudioNode_getCursor_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_getCursor>>(
          'SampledAudioNode_getCursor');
  late final _dart_SampledAudioNode_getCursor _SampledAudioNode_getCursor =
      _SampledAudioNode_getCursor_ptr.asFunction<
          _dart_SampledAudioNode_getCursor>();

  int SampledAudioNode_playbackRate(
    int index,
  ) {
    return _SampledAudioNode_playbackRate(
      index,
    );
  }

  late final _SampledAudioNode_playbackRate_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_playbackRate>>(
          'SampledAudioNode_playbackRate');
  late final _dart_SampledAudioNode_playbackRate
      _SampledAudioNode_playbackRate = _SampledAudioNode_playbackRate_ptr
          .asFunction<_dart_SampledAudioNode_playbackRate>();

  int SampledAudioNode_detune(
    int index,
  ) {
    return _SampledAudioNode_detune(
      index,
    );
  }

  late final _SampledAudioNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_detune>>(
          'SampledAudioNode_detune');
  late final _dart_SampledAudioNode_detune _SampledAudioNode_detune =
      _SampledAudioNode_detune_ptr.asFunction<_dart_SampledAudioNode_detune>();

  /// /////////////
  /// AudioBus ///
  /// /////////////
  int makeBusFromFile(
    ffi.Pointer<ffi.Int8> file,
    int mixToMono,
    double targetSampleRate,
  ) {
    return _makeBusFromFile(
      file,
      mixToMono,
      targetSampleRate,
    );
  }

  late final _makeBusFromFile_ptr =
      _lookup<ffi.NativeFunction<_c_makeBusFromFile>>('makeBusFromFile');
  late final _dart_makeBusFromFile _makeBusFromFile =
      _makeBusFromFile_ptr.asFunction<_dart_makeBusFromFile>();

  int makeBusFromMemory(
    ffi.Pointer<ffi.Uint8> buffer,
    int bufferLen,
    ffi.Pointer<ffi.Int8> extension_1,
    int mixToMono,
  ) {
    return _makeBusFromMemory(
      buffer,
      bufferLen,
      extension_1,
      mixToMono,
    );
  }

  late final _makeBusFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_makeBusFromMemory>>('makeBusFromMemory');
  late final _dart_makeBusFromMemory _makeBusFromMemory =
      _makeBusFromMemory_ptr.asFunction<_dart_makeBusFromMemory>();

  int audioBusHasCheck(
    int busId,
  ) {
    return _audioBusHasCheck(
      busId,
    );
  }

  late final _audioBusHasCheck_ptr =
      _lookup<ffi.NativeFunction<_c_audioBusHasCheck>>('audioBusHasCheck');
  late final _dart_audioBusHasCheck _audioBusHasCheck =
      _audioBusHasCheck_ptr.asFunction<_dart_audioBusHasCheck>();

  int AudioBus_numberOfChannels(
    int busIndex,
  ) {
    return _AudioBus_numberOfChannels(
      busIndex,
    );
  }

  late final _AudioBus_numberOfChannels_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_numberOfChannels>>(
          'AudioBus_numberOfChannels');
  late final _dart_AudioBus_numberOfChannels _AudioBus_numberOfChannels =
      _AudioBus_numberOfChannels_ptr.asFunction<
          _dart_AudioBus_numberOfChannels>();

  int AudioBus_length(
    int busIndex,
  ) {
    return _AudioBus_length(
      busIndex,
    );
  }

  late final _AudioBus_length_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_length>>('AudioBus_length');
  late final _dart_AudioBus_length _AudioBus_length =
      _AudioBus_length_ptr.asFunction<_dart_AudioBus_length>();

  double AudioBus_sampleRate(
    int busIndex,
  ) {
    return _AudioBus_sampleRate(
      busIndex,
    );
  }

  late final _AudioBus_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_sampleRate>>(
          'AudioBus_sampleRate');
  late final _dart_AudioBus_sampleRate _AudioBus_sampleRate =
      _AudioBus_sampleRate_ptr.asFunction<_dart_AudioBus_sampleRate>();

  void AudioBus_setSampleRate(
    int busIndex,
    double sampleRate,
  ) {
    return _AudioBus_setSampleRate(
      busIndex,
      sampleRate,
    );
  }

  late final _AudioBus_setSampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_setSampleRate>>(
          'AudioBus_setSampleRate');
  late final _dart_AudioBus_setSampleRate _AudioBus_setSampleRate =
      _AudioBus_setSampleRate_ptr.asFunction<_dart_AudioBus_setSampleRate>();

  void AudioBus_zero(
    int busIndex,
  ) {
    return _AudioBus_zero(
      busIndex,
    );
  }

  late final _AudioBus_zero_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_zero>>('AudioBus_zero');
  late final _dart_AudioBus_zero _AudioBus_zero =
      _AudioBus_zero_ptr.asFunction<_dart_AudioBus_zero>();

  void AudioBus_clearSilentFlag(
    int busIndex,
  ) {
    return _AudioBus_clearSilentFlag(
      busIndex,
    );
  }

  late final _AudioBus_clearSilentFlag_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_clearSilentFlag>>(
          'AudioBus_clearSilentFlag');
  late final _dart_AudioBus_clearSilentFlag _AudioBus_clearSilentFlag =
      _AudioBus_clearSilentFlag_ptr.asFunction<
          _dart_AudioBus_clearSilentFlag>();

  void AudioBus_scale(
    int busIndex,
    double scale,
  ) {
    return _AudioBus_scale(
      busIndex,
      scale,
    );
  }

  late final _AudioBus_scale_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_scale>>('AudioBus_scale');
  late final _dart_AudioBus_scale _AudioBus_scale =
      _AudioBus_scale_ptr.asFunction<_dart_AudioBus_scale>();

  void AudioBus_reset(
    int busIndex,
  ) {
    return _AudioBus_reset(
      busIndex,
    );
  }

  late final _AudioBus_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_reset>>('AudioBus_reset');
  late final _dart_AudioBus_reset _AudioBus_reset =
      _AudioBus_reset_ptr.asFunction<_dart_AudioBus_reset>();

  int AudioBus_isSilent(
    int busIndex,
  ) {
    return _AudioBus_isSilent(
      busIndex,
    );
  }

  late final _AudioBus_isSilent_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isSilent>>('AudioBus_isSilent');
  late final _dart_AudioBus_isSilent _AudioBus_isSilent =
      _AudioBus_isSilent_ptr.asFunction<_dart_AudioBus_isSilent>();

  int AudioBus_isFirstTime(
    int busIndex,
  ) {
    return _AudioBus_isFirstTime(
      busIndex,
    );
  }

  late final _AudioBus_isFirstTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isFirstTime>>(
          'AudioBus_isFirstTime');
  late final _dart_AudioBus_isFirstTime _AudioBus_isFirstTime =
      _AudioBus_isFirstTime_ptr.asFunction<_dart_AudioBus_isFirstTime>();

  void releaseAudioBus(
    int index,
  ) {
    return _releaseAudioBus(
      index,
    );
  }

  late final _releaseAudioBus_ptr =
      _lookup<ffi.NativeFunction<_c_releaseAudioBus>>('releaseAudioBus');
  late final _dart_releaseAudioBus _releaseAudioBus =
      _releaseAudioBus_ptr.asFunction<_dart_releaseAudioBus>();

  /// /////////////
  /// GainNode ///
  /// /////////////
  int createGain(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createGain(
      context,
    );
  }

  late final _createGain_ptr =
      _lookup<ffi.NativeFunction<_c_createGain>>('createGain');
  late final _dart_createGain _createGain =
      _createGain_ptr.asFunction<_dart_createGain>();

  int GainNode_gain(
    int nodeId,
  ) {
    return _GainNode_gain(
      nodeId,
    );
  }

  late final _GainNode_gain_ptr =
      _lookup<ffi.NativeFunction<_c_GainNode_gain>>('GainNode_gain');
  late final _dart_GainNode_gain _GainNode_gain =
      _GainNode_gain_ptr.asFunction<_dart_GainNode_gain>();

  /// /////////////////
  /// RecorderNode ///
  /// /////////////////
  int createRecorderNode(
    ffi.Pointer<ffi.Void> context,
    int channelCount,
  ) {
    return _createRecorderNode(
      context,
      channelCount,
    );
  }

  late final _createRecorderNode_ptr =
      _lookup<ffi.NativeFunction<_c_createRecorderNode>>('createRecorderNode');
  late final _dart_createRecorderNode _createRecorderNode =
      _createRecorderNode_ptr.asFunction<_dart_createRecorderNode>();

  int createRecorderNodeByConfig(
    ffi.Pointer<ffi.Void> context,
    AudioStreamConfig outputConfig,
  ) {
    return _createRecorderNodeByConfig(
      context,
      outputConfig,
    );
  }

  late final _createRecorderNodeByConfig_ptr =
      _lookup<ffi.NativeFunction<_c_createRecorderNodeByConfig>>(
          'createRecorderNodeByConfig');
  late final _dart_createRecorderNodeByConfig _createRecorderNodeByConfig =
      _createRecorderNodeByConfig_ptr
          .asFunction<_dart_createRecorderNodeByConfig>();

  void RecorderNode_startRecording(
    int nodeId,
  ) {
    return _RecorderNode_startRecording(
      nodeId,
    );
  }

  late final _RecorderNode_startRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_startRecording>>(
          'RecorderNode_startRecording');
  late final _dart_RecorderNode_startRecording _RecorderNode_startRecording =
      _RecorderNode_startRecording_ptr.asFunction<
          _dart_RecorderNode_startRecording>();

  void RecorderNode_stopRecording(
    int nodeId,
  ) {
    return _RecorderNode_stopRecording(
      nodeId,
    );
  }

  late final _RecorderNode_stopRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_stopRecording>>(
          'RecorderNode_stopRecording');
  late final _dart_RecorderNode_stopRecording _RecorderNode_stopRecording =
      _RecorderNode_stopRecording_ptr.asFunction<
          _dart_RecorderNode_stopRecording>();

  double RecorderNode_recordedLengthInSeconds(
    int nodeId,
  ) {
    return _RecorderNode_recordedLengthInSeconds(
      nodeId,
    );
  }

  late final _RecorderNode_recordedLengthInSeconds_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_recordedLengthInSeconds>>(
          'RecorderNode_recordedLengthInSeconds');
  late final _dart_RecorderNode_recordedLengthInSeconds
      _RecorderNode_recordedLengthInSeconds =
      _RecorderNode_recordedLengthInSeconds_ptr.asFunction<
          _dart_RecorderNode_recordedLengthInSeconds>();

  int RecorderNode_createBusFromRecording(
    int nodeId,
    int mixToMono,
  ) {
    return _RecorderNode_createBusFromRecording(
      nodeId,
      mixToMono,
    );
  }

  late final _RecorderNode_createBusFromRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_createBusFromRecording>>(
          'RecorderNode_createBusFromRecording');
  late final _dart_RecorderNode_createBusFromRecording
      _RecorderNode_createBusFromRecording =
      _RecorderNode_createBusFromRecording_ptr.asFunction<
          _dart_RecorderNode_createBusFromRecording>();

  int RecorderNode_writeRecordingToWav(
    int nodeId,
    ffi.Pointer<ffi.Int8> file,
    int mixToMono,
  ) {
    return _RecorderNode_writeRecordingToWav(
      nodeId,
      file,
      mixToMono,
    );
  }

  late final _RecorderNode_writeRecordingToWav_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_writeRecordingToWav>>(
          'RecorderNode_writeRecordingToWav');
  late final _dart_RecorderNode_writeRecordingToWav
      _RecorderNode_writeRecordingToWav = _RecorderNode_writeRecordingToWav_ptr
          .asFunction<_dart_RecorderNode_writeRecordingToWav>();

  /// /////////////////
  /// AnalyserNode ///
  /// /////////////////
  int createAnalyserNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createAnalyserNode(
      context,
    );
  }

  late final _createAnalyserNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNode>>('createAnalyserNode');
  late final _dart_createAnalyserNode _createAnalyserNode =
      _createAnalyserNode_ptr.asFunction<_dart_createAnalyserNode>();

  int createAnalyserNodeFftSize(
    ffi.Pointer<ffi.Void> context,
    int fftSize,
  ) {
    return _createAnalyserNodeFftSize(
      context,
      fftSize,
    );
  }

  late final _createAnalyserNodeFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNodeFftSize>>(
          'createAnalyserNodeFftSize');
  late final _dart_createAnalyserNodeFftSize _createAnalyserNodeFftSize =
      _createAnalyserNodeFftSize_ptr
          .asFunction<_dart_createAnalyserNodeFftSize>();

  void AnalyserNode_setFftSize(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    int fftSize,
  ) {
    return _AnalyserNode_setFftSize(
      nodeId,
      context,
      fftSize,
    );
  }

  late final _AnalyserNode_setFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setFftSize>>(
          'AnalyserNode_setFftSize');
  late final _dart_AnalyserNode_setFftSize _AnalyserNode_setFftSize =
      _AnalyserNode_setFftSize_ptr.asFunction<_dart_AnalyserNode_setFftSize>();

  int AnalyserNode_fftSize(
    int nodeId,
  ) {
    return _AnalyserNode_fftSize(
      nodeId,
    );
  }

  late final _AnalyserNode_fftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_fftSize>>(
          'AnalyserNode_fftSize');
  late final _dart_AnalyserNode_fftSize _AnalyserNode_fftSize =
      _AnalyserNode_fftSize_ptr.asFunction<_dart_AnalyserNode_fftSize>();

  int AnalyserNode_frequencyBinCount(
    int nodeId,
  ) {
    return _AnalyserNode_frequencyBinCount(
      nodeId,
    );
  }

  late final _AnalyserNode_frequencyBinCount_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_frequencyBinCount>>(
          'AnalyserNode_frequencyBinCount');
  late final _dart_AnalyserNode_frequencyBinCount
      _AnalyserNode_frequencyBinCount = _AnalyserNode_frequencyBinCount_ptr
          .asFunction<_dart_AnalyserNode_frequencyBinCount>();

  void AnalyserNode_setMinDecibels(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setMinDecibels(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setMinDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMinDecibels>>(
          'AnalyserNode_setMinDecibels');
  late final _dart_AnalyserNode_setMinDecibels _AnalyserNode_setMinDecibels =
      _AnalyserNode_setMinDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMinDecibels>();

  int AnalyserNode_minDecibels(
    int nodeId,
  ) {
    return _AnalyserNode_minDecibels(
      nodeId,
    );
  }

  late final _AnalyserNode_minDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_minDecibels>>(
          'AnalyserNode_minDecibels');
  late final _dart_AnalyserNode_minDecibels _AnalyserNode_minDecibels =
      _AnalyserNode_minDecibels_ptr.asFunction<
          _dart_AnalyserNode_minDecibels>();

  void AnalyserNode_setMaxDecibels(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setMaxDecibels(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setMaxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMaxDecibels>>(
          'AnalyserNode_setMaxDecibels');
  late final _dart_AnalyserNode_setMaxDecibels _AnalyserNode_setMaxDecibels =
      _AnalyserNode_setMaxDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMaxDecibels>();

  int AnalyserNode_maxDecibels(
    int nodeId,
  ) {
    return _AnalyserNode_maxDecibels(
      nodeId,
    );
  }

  late final _AnalyserNode_maxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_maxDecibels>>(
          'AnalyserNode_maxDecibels');
  late final _dart_AnalyserNode_maxDecibels _AnalyserNode_maxDecibels =
      _AnalyserNode_maxDecibels_ptr.asFunction<
          _dart_AnalyserNode_maxDecibels>();

  void AnalyserNode_setSmoothingTimeConstant(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setSmoothingTimeConstant(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setSmoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setSmoothingTimeConstant>>(
          'AnalyserNode_setSmoothingTimeConstant');
  late final _dart_AnalyserNode_setSmoothingTimeConstant
      _AnalyserNode_setSmoothingTimeConstant =
      _AnalyserNode_setSmoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_setSmoothingTimeConstant>();

  int AnalyserNode_smoothingTimeConstant(
    int nodeId,
  ) {
    return _AnalyserNode_smoothingTimeConstant(
      nodeId,
    );
  }

  late final _AnalyserNode_smoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_smoothingTimeConstant>>(
          'AnalyserNode_smoothingTimeConstant');
  late final _dart_AnalyserNode_smoothingTimeConstant
      _AnalyserNode_smoothingTimeConstant =
      _AnalyserNode_smoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_smoothingTimeConstant>();

  void AnalyserNode_getFloatFrequencyData(
    int nodeId,
    ffi.Pointer<ffi.Float> array,
  ) {
    return _AnalyserNode_getFloatFrequencyData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getFloatFrequencyData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getFloatFrequencyData>>(
          'AnalyserNode_getFloatFrequencyData');
  late final _dart_AnalyserNode_getFloatFrequencyData
      _AnalyserNode_getFloatFrequencyData =
      _AnalyserNode_getFloatFrequencyData_ptr.asFunction<
          _dart_AnalyserNode_getFloatFrequencyData>();

  void AnalyserNode_getByteFrequencyData(
    int nodeId,
    ffi.Pointer<ffi.Uint8> array,
    int resample,
  ) {
    return _AnalyserNode_getByteFrequencyData(
      nodeId,
      array,
      resample,
    );
  }

  late final _AnalyserNode_getByteFrequencyData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getByteFrequencyData>>(
          'AnalyserNode_getByteFrequencyData');
  late final _dart_AnalyserNode_getByteFrequencyData
      _AnalyserNode_getByteFrequencyData =
      _AnalyserNode_getByteFrequencyData_ptr.asFunction<
          _dart_AnalyserNode_getByteFrequencyData>();

  void AnalyserNode_getFloatTimeDomainData(
    int nodeId,
    ffi.Pointer<ffi.Float> array,
  ) {
    return _AnalyserNode_getFloatTimeDomainData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getFloatTimeDomainData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getFloatTimeDomainData>>(
          'AnalyserNode_getFloatTimeDomainData');
  late final _dart_AnalyserNode_getFloatTimeDomainData
      _AnalyserNode_getFloatTimeDomainData =
      _AnalyserNode_getFloatTimeDomainData_ptr.asFunction<
          _dart_AnalyserNode_getFloatTimeDomainData>();

  void AnalyserNode_getByteTimeDomainData(
    int nodeId,
    ffi.Pointer<ffi.Uint8> array,
  ) {
    return _AnalyserNode_getByteTimeDomainData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getByteTimeDomainData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getByteTimeDomainData>>(
          'AnalyserNode_getByteTimeDomainData');
  late final _dart_AnalyserNode_getByteTimeDomainData
      _AnalyserNode_getByteTimeDomainData =
      _AnalyserNode_getByteTimeDomainData_ptr.asFunction<
          _dart_AnalyserNode_getByteTimeDomainData>();

  /// ///////////////////
  /// OscillatorNode ///
  /// ///////////////////
  int createOscillatorNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createOscillatorNode(
      context,
    );
  }

  late final _createOscillatorNode_ptr =
      _lookup<ffi.NativeFunction<_c_createOscillatorNode>>(
          'createOscillatorNode');
  late final _dart_createOscillatorNode _createOscillatorNode =
      _createOscillatorNode_ptr.asFunction<_dart_createOscillatorNode>();

  int OscillatorNode_type(
    int nodeId,
  ) {
    return _OscillatorNode_type(
      nodeId,
    );
  }

  late final _OscillatorNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_type>>(
          'OscillatorNode_type');
  late final _dart_OscillatorNode_type _OscillatorNode_type =
      _OscillatorNode_type_ptr.asFunction<_dart_OscillatorNode_type>();

  void OscillatorNode_setType(
    int nodeId,
    int type,
  ) {
    return _OscillatorNode_setType(
      nodeId,
      type,
    );
  }

  late final _OscillatorNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_setType>>(
          'OscillatorNode_setType');
  late final _dart_OscillatorNode_setType _OscillatorNode_setType =
      _OscillatorNode_setType_ptr.asFunction<_dart_OscillatorNode_setType>();

  int OscillatorNode_amplitude(
    int nodeId,
  ) {
    return _OscillatorNode_amplitude(
      nodeId,
    );
  }

  late final _OscillatorNode_amplitude_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_amplitude>>(
          'OscillatorNode_amplitude');
  late final _dart_OscillatorNode_amplitude _OscillatorNode_amplitude =
      _OscillatorNode_amplitude_ptr.asFunction<
          _dart_OscillatorNode_amplitude>();

  int OscillatorNode_frequency(
    int nodeId,
  ) {
    return _OscillatorNode_frequency(
      nodeId,
    );
  }

  late final _OscillatorNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_frequency>>(
          'OscillatorNode_frequency');
  late final _dart_OscillatorNode_frequency _OscillatorNode_frequency =
      _OscillatorNode_frequency_ptr.asFunction<
          _dart_OscillatorNode_frequency>();

  int OscillatorNode_bias(
    int nodeId,
  ) {
    return _OscillatorNode_bias(
      nodeId,
    );
  }

  late final _OscillatorNode_bias_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_bias>>(
          'OscillatorNode_bias');
  late final _dart_OscillatorNode_bias _OscillatorNode_bias =
      _OscillatorNode_bias_ptr.asFunction<_dart_OscillatorNode_bias>();

  int OscillatorNode_detune(
    int nodeId,
  ) {
    return _OscillatorNode_detune(
      nodeId,
    );
  }

  late final _OscillatorNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_detune>>(
          'OscillatorNode_detune');
  late final _dart_OscillatorNode_detune _OscillatorNode_detune =
      _OscillatorNode_detune_ptr.asFunction<_dart_OscillatorNode_detune>();

  /// BiquadFilterNode
  int createBiquadFilterNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createBiquadFilterNode(
      context,
    );
  }

  late final _createBiquadFilterNode_ptr =
      _lookup<ffi.NativeFunction<_c_createBiquadFilterNode>>(
          'createBiquadFilterNode');
  late final _dart_createBiquadFilterNode _createBiquadFilterNode =
      _createBiquadFilterNode_ptr.asFunction<_dart_createBiquadFilterNode>();

  int BiquadFilterNode_type(
    int nodeId,
  ) {
    return _BiquadFilterNode_type(
      nodeId,
    );
  }

  late final _BiquadFilterNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_type>>(
          'BiquadFilterNode_type');
  late final _dart_BiquadFilterNode_type _BiquadFilterNode_type =
      _BiquadFilterNode_type_ptr.asFunction<_dart_BiquadFilterNode_type>();

  void BiquadFilterNode_setType(
    int nodeId,
    int type,
  ) {
    return _BiquadFilterNode_setType(
      nodeId,
      type,
    );
  }

  late final _BiquadFilterNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_setType>>(
          'BiquadFilterNode_setType');
  late final _dart_BiquadFilterNode_setType _BiquadFilterNode_setType =
      _BiquadFilterNode_setType_ptr.asFunction<
          _dart_BiquadFilterNode_setType>();

  int BiquadFilterNode_frequency(
    int nodeId,
  ) {
    return _BiquadFilterNode_frequency(
      nodeId,
    );
  }

  late final _BiquadFilterNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_frequency>>(
          'BiquadFilterNode_frequency');
  late final _dart_BiquadFilterNode_frequency _BiquadFilterNode_frequency =
      _BiquadFilterNode_frequency_ptr.asFunction<
          _dart_BiquadFilterNode_frequency>();

  int BiquadFilterNode_q(
    int nodeId,
  ) {
    return _BiquadFilterNode_q(
      nodeId,
    );
  }

  late final _BiquadFilterNode_q_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_q>>('BiquadFilterNode_q');
  late final _dart_BiquadFilterNode_q _BiquadFilterNode_q =
      _BiquadFilterNode_q_ptr.asFunction<_dart_BiquadFilterNode_q>();

  int BiquadFilterNode_gain(
    int nodeId,
  ) {
    return _BiquadFilterNode_gain(
      nodeId,
    );
  }

  late final _BiquadFilterNode_gain_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_gain>>(
          'BiquadFilterNode_gain');
  late final _dart_BiquadFilterNode_gain _BiquadFilterNode_gain =
      _BiquadFilterNode_gain_ptr.asFunction<_dart_BiquadFilterNode_gain>();

  int BiquadFilterNode_detune(
    int nodeId,
  ) {
    return _BiquadFilterNode_detune(
      nodeId,
    );
  }

  late final _BiquadFilterNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_detune>>(
          'BiquadFilterNode_detune');
  late final _dart_BiquadFilterNode_detune _BiquadFilterNode_detune =
      _BiquadFilterNode_detune_ptr.asFunction<_dart_BiquadFilterNode_detune>();

  /// ///////////////
  /// PannerNode ///
  /// ///////////////
  int createPannerNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createPannerNode(
      context,
    );
  }

  late final _createPannerNode_ptr =
      _lookup<ffi.NativeFunction<_c_createPannerNode>>('createPannerNode');
  late final _dart_createPannerNode _createPannerNode =
      _createPannerNode_ptr.asFunction<_dart_createPannerNode>();

  int PannerNode_panningModel(
    int nodeId,
  ) {
    return _PannerNode_panningModel(
      nodeId,
    );
  }

  late final _PannerNode_panningModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_panningModel>>(
          'PannerNode_panningModel');
  late final _dart_PannerNode_panningModel _PannerNode_panningModel =
      _PannerNode_panningModel_ptr.asFunction<_dart_PannerNode_panningModel>();

  void PannerNode_setPanningModel(
    int nodeId,
    int m,
  ) {
    return _PannerNode_setPanningModel(
      nodeId,
      m,
    );
  }

  late final _PannerNode_setPanningModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setPanningModel>>(
          'PannerNode_setPanningModel');
  late final _dart_PannerNode_setPanningModel _PannerNode_setPanningModel =
      _PannerNode_setPanningModel_ptr.asFunction<
          _dart_PannerNode_setPanningModel>();

  int PannerNode_distanceModel(
    int nodeId,
  ) {
    return _PannerNode_distanceModel(
      nodeId,
    );
  }

  late final _PannerNode_distanceModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_distanceModel>>(
          'PannerNode_distanceModel');
  late final _dart_PannerNode_distanceModel _PannerNode_distanceModel =
      _PannerNode_distanceModel_ptr.asFunction<
          _dart_PannerNode_distanceModel>();

  void PannerNode_setDistanceModel(
    int nodeId,
    int m,
  ) {
    return _PannerNode_setDistanceModel(
      nodeId,
      m,
    );
  }

  late final _PannerNode_setDistanceModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setDistanceModel>>(
          'PannerNode_setDistanceModel');
  late final _dart_PannerNode_setDistanceModel _PannerNode_setDistanceModel =
      _PannerNode_setDistanceModel_ptr.asFunction<
          _dart_PannerNode_setDistanceModel>();

  void PannerNode_setPosition(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setPosition(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setPosition_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setPosition>>(
          'PannerNode_setPosition');
  late final _dart_PannerNode_setPosition _PannerNode_setPosition =
      _PannerNode_setPosition_ptr.asFunction<_dart_PannerNode_setPosition>();

  int PannerNode_positionX(
    int nodeId,
  ) {
    return _PannerNode_positionX(
      nodeId,
    );
  }

  late final _PannerNode_positionX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionX>>(
          'PannerNode_positionX');
  late final _dart_PannerNode_positionX _PannerNode_positionX =
      _PannerNode_positionX_ptr.asFunction<_dart_PannerNode_positionX>();

  int PannerNode_positionY(
    int nodeId,
  ) {
    return _PannerNode_positionY(
      nodeId,
    );
  }

  late final _PannerNode_positionY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionY>>(
          'PannerNode_positionY');
  late final _dart_PannerNode_positionY _PannerNode_positionY =
      _PannerNode_positionY_ptr.asFunction<_dart_PannerNode_positionY>();

  int PannerNode_positionZ(
    int nodeId,
  ) {
    return _PannerNode_positionZ(
      nodeId,
    );
  }

  late final _PannerNode_positionZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionZ>>(
          'PannerNode_positionZ');
  late final _dart_PannerNode_positionZ _PannerNode_positionZ =
      _PannerNode_positionZ_ptr.asFunction<_dart_PannerNode_positionZ>();

  void PannerNode_setOrientation(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setOrientation(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setOrientation_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setOrientation>>(
          'PannerNode_setOrientation');
  late final _dart_PannerNode_setOrientation _PannerNode_setOrientation =
      _PannerNode_setOrientation_ptr.asFunction<
          _dart_PannerNode_setOrientation>();

  int PannerNode_orientationX(
    int nodeId,
  ) {
    return _PannerNode_orientationX(
      nodeId,
    );
  }

  late final _PannerNode_orientationX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationX>>(
          'PannerNode_orientationX');
  late final _dart_PannerNode_orientationX _PannerNode_orientationX =
      _PannerNode_orientationX_ptr.asFunction<_dart_PannerNode_orientationX>();

  int PannerNode_orientationY(
    int nodeId,
  ) {
    return _PannerNode_orientationY(
      nodeId,
    );
  }

  late final _PannerNode_orientationY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationY>>(
          'PannerNode_orientationY');
  late final _dart_PannerNode_orientationY _PannerNode_orientationY =
      _PannerNode_orientationY_ptr.asFunction<_dart_PannerNode_orientationY>();

  int PannerNode_orientationZ(
    int nodeId,
  ) {
    return _PannerNode_orientationZ(
      nodeId,
    );
  }

  late final _PannerNode_orientationZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationZ>>(
          'PannerNode_orientationZ');
  late final _dart_PannerNode_orientationZ _PannerNode_orientationZ =
      _PannerNode_orientationZ_ptr.asFunction<_dart_PannerNode_orientationZ>();

  void PannerNode_setVelocity(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setVelocity(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setVelocity_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setVelocity>>(
          'PannerNode_setVelocity');
  late final _dart_PannerNode_setVelocity _PannerNode_setVelocity =
      _PannerNode_setVelocity_ptr.asFunction<_dart_PannerNode_setVelocity>();

  int PannerNode_velocityX(
    int nodeId,
  ) {
    return _PannerNode_velocityX(
      nodeId,
    );
  }

  late final _PannerNode_velocityX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityX>>(
          'PannerNode_velocityX');
  late final _dart_PannerNode_velocityX _PannerNode_velocityX =
      _PannerNode_velocityX_ptr.asFunction<_dart_PannerNode_velocityX>();

  int PannerNode_velocityY(
    int nodeId,
  ) {
    return _PannerNode_velocityY(
      nodeId,
    );
  }

  late final _PannerNode_velocityY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityY>>(
          'PannerNode_velocityY');
  late final _dart_PannerNode_velocityY _PannerNode_velocityY =
      _PannerNode_velocityY_ptr.asFunction<_dart_PannerNode_velocityY>();

  int PannerNode_velocityZ(
    int nodeId,
  ) {
    return _PannerNode_velocityZ(
      nodeId,
    );
  }

  late final _PannerNode_velocityZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityZ>>(
          'PannerNode_velocityZ');
  late final _dart_PannerNode_velocityZ _PannerNode_velocityZ =
      _PannerNode_velocityZ_ptr.asFunction<_dart_PannerNode_velocityZ>();

  int PannerNode_distanceGain(
    int nodeId,
  ) {
    return _PannerNode_distanceGain(
      nodeId,
    );
  }

  late final _PannerNode_distanceGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_distanceGain>>(
          'PannerNode_distanceGain');
  late final _dart_PannerNode_distanceGain _PannerNode_distanceGain =
      _PannerNode_distanceGain_ptr.asFunction<_dart_PannerNode_distanceGain>();

  int PannerNode_coneGain(
    int nodeId,
  ) {
    return _PannerNode_coneGain(
      nodeId,
    );
  }

  late final _PannerNode_coneGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneGain>>(
          'PannerNode_coneGain');
  late final _dart_PannerNode_coneGain _PannerNode_coneGain =
      _PannerNode_coneGain_ptr.asFunction<_dart_PannerNode_coneGain>();

  double PannerNode_refDistance(
    int nodeId,
  ) {
    return _PannerNode_refDistance(
      nodeId,
    );
  }

  late final _PannerNode_refDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_refDistance>>(
          'PannerNode_refDistance');
  late final _dart_PannerNode_refDistance _PannerNode_refDistance =
      _PannerNode_refDistance_ptr.asFunction<_dart_PannerNode_refDistance>();

  void PannerNode_setRefDistance(
    int nodeId,
    double refDistance,
  ) {
    return _PannerNode_setRefDistance(
      nodeId,
      refDistance,
    );
  }

  late final _PannerNode_setRefDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setRefDistance>>(
          'PannerNode_setRefDistance');
  late final _dart_PannerNode_setRefDistance _PannerNode_setRefDistance =
      _PannerNode_setRefDistance_ptr.asFunction<
          _dart_PannerNode_setRefDistance>();

  double PannerNode_maxDistance(
    int nodeId,
  ) {
    return _PannerNode_maxDistance(
      nodeId,
    );
  }

  late final _PannerNode_maxDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_maxDistance>>(
          'PannerNode_maxDistance');
  late final _dart_PannerNode_maxDistance _PannerNode_maxDistance =
      _PannerNode_maxDistance_ptr.asFunction<_dart_PannerNode_maxDistance>();

  void PannerNode_setMaxDistance(
    int nodeId,
    double maxDistance,
  ) {
    return _PannerNode_setMaxDistance(
      nodeId,
      maxDistance,
    );
  }

  late final _PannerNode_setMaxDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setMaxDistance>>(
          'PannerNode_setMaxDistance');
  late final _dart_PannerNode_setMaxDistance _PannerNode_setMaxDistance =
      _PannerNode_setMaxDistance_ptr.asFunction<
          _dart_PannerNode_setMaxDistance>();

  double PannerNode_rolloffFactor(
    int nodeId,
  ) {
    return _PannerNode_rolloffFactor(
      nodeId,
    );
  }

  late final _PannerNode_rolloffFactor_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_rolloffFactor>>(
          'PannerNode_rolloffFactor');
  late final _dart_PannerNode_rolloffFactor _PannerNode_rolloffFactor =
      _PannerNode_rolloffFactor_ptr.asFunction<
          _dart_PannerNode_rolloffFactor>();

  void PannerNode_setRolloffFactor(
    int nodeId,
    double rolloffFactor,
  ) {
    return _PannerNode_setRolloffFactor(
      nodeId,
      rolloffFactor,
    );
  }

  late final _PannerNode_setRolloffFactor_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setRolloffFactor>>(
          'PannerNode_setRolloffFactor');
  late final _dart_PannerNode_setRolloffFactor _PannerNode_setRolloffFactor =
      _PannerNode_setRolloffFactor_ptr.asFunction<
          _dart_PannerNode_setRolloffFactor>();

  double PannerNode_coneInnerAngle(
    int nodeId,
  ) {
    return _PannerNode_coneInnerAngle(
      nodeId,
    );
  }

  late final _PannerNode_coneInnerAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneInnerAngle>>(
          'PannerNode_coneInnerAngle');
  late final _dart_PannerNode_coneInnerAngle _PannerNode_coneInnerAngle =
      _PannerNode_coneInnerAngle_ptr.asFunction<
          _dart_PannerNode_coneInnerAngle>();

  void PannerNode_setConeInnerAngle(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeInnerAngle(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeInnerAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeInnerAngle>>(
          'PannerNode_setConeInnerAngle');
  late final _dart_PannerNode_setConeInnerAngle _PannerNode_setConeInnerAngle =
      _PannerNode_setConeInnerAngle_ptr.asFunction<
          _dart_PannerNode_setConeInnerAngle>();

  double PannerNode_coneOuterAngle(
    int nodeId,
  ) {
    return _PannerNode_coneOuterAngle(
      nodeId,
    );
  }

  late final _PannerNode_coneOuterAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneOuterAngle>>(
          'PannerNode_coneOuterAngle');
  late final _dart_PannerNode_coneOuterAngle _PannerNode_coneOuterAngle =
      _PannerNode_coneOuterAngle_ptr.asFunction<
          _dart_PannerNode_coneOuterAngle>();

  void PannerNode_setConeOuterAngle(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeOuterAngle(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeOuterAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeOuterAngle>>(
          'PannerNode_setConeOuterAngle');
  late final _dart_PannerNode_setConeOuterAngle _PannerNode_setConeOuterAngle =
      _PannerNode_setConeOuterAngle_ptr.asFunction<
          _dart_PannerNode_setConeOuterAngle>();

  double PannerNode_coneOuterGain(
    int nodeId,
  ) {
    return _PannerNode_coneOuterGain(
      nodeId,
    );
  }

  late final _PannerNode_coneOuterGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneOuterGain>>(
          'PannerNode_coneOuterGain');
  late final _dart_PannerNode_coneOuterGain _PannerNode_coneOuterGain =
      _PannerNode_coneOuterGain_ptr.asFunction<
          _dart_PannerNode_coneOuterGain>();

  void PannerNode_setConeOuterGain(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeOuterGain(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeOuterGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeOuterGain>>(
          'PannerNode_setConeOuterGain');
  late final _dart_PannerNode_setConeOuterGain _PannerNode_setConeOuterGain =
      _PannerNode_setConeOuterGain_ptr.asFunction<
          _dart_PannerNode_setConeOuterGain>();

  void PannerNode_getAzimuthElevation(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Double> outAzimuth,
    ffi.Pointer<ffi.Double> outElevation,
  ) {
    return _PannerNode_getAzimuthElevation(
      nodeId,
      context,
      outAzimuth,
      outElevation,
    );
  }

  late final _PannerNode_getAzimuthElevation_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_getAzimuthElevation>>(
          'PannerNode_getAzimuthElevation');
  late final _dart_PannerNode_getAzimuthElevation
      _PannerNode_getAzimuthElevation = _PannerNode_getAzimuthElevation_ptr
          .asFunction<_dart_PannerNode_getAzimuthElevation>();

  void PannerNode_dopplerRate(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _PannerNode_dopplerRate(
      nodeId,
      context,
    );
  }

  late final _PannerNode_dopplerRate_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_dopplerRate>>(
          'PannerNode_dopplerRate');
  late final _dart_PannerNode_dopplerRate _PannerNode_dopplerRate =
      _PannerNode_dopplerRate_ptr.asFunction<_dart_PannerNode_dopplerRate>();

  /// ////////////////////////
  /// ChannelSplitterNode ///
  /// ////////////////////////
  int createChannelSplitterNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createChannelSplitterNode(
      context,
    );
  }

  late final _createChannelSplitterNode_ptr =
      _lookup<ffi.NativeFunction<_c_createChannelSplitterNode>>(
          'createChannelSplitterNode');
  late final _dart_createChannelSplitterNode _createChannelSplitterNode =
      _createChannelSplitterNode_ptr
          .asFunction<_dart_createChannelSplitterNode>();

  void ChannelSplitterNode_addOutputs(
    int nodeId,
    int n,
  ) {
    return _ChannelSplitterNode_addOutputs(
      nodeId,
      n,
    );
  }

  late final _ChannelSplitterNode_addOutputs_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelSplitterNode_addOutputs>>(
          'ChannelSplitterNode_addOutputs');
  late final _dart_ChannelSplitterNode_addOutputs
      _ChannelSplitterNode_addOutputs = _ChannelSplitterNode_addOutputs_ptr
          .asFunction<_dart_ChannelSplitterNode_addOutputs>();

  /// //////////////////////
  /// ChannelMergerNode ///
  /// //////////////////////
  int createChannelMergerNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createChannelMergerNode(
      context,
    );
  }

  late final _createChannelMergerNode_ptr =
      _lookup<ffi.NativeFunction<_c_createChannelMergerNode>>(
          'createChannelMergerNode');
  late final _dart_createChannelMergerNode _createChannelMergerNode =
      _createChannelMergerNode_ptr.asFunction<_dart_createChannelMergerNode>();

  void ChannelMergerNode_addInputs(
    int nodeId,
    int n,
  ) {
    return _ChannelMergerNode_addInputs(
      nodeId,
      n,
    );
  }

  late final _ChannelMergerNode_addInputs_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelMergerNode_addInputs>>(
          'ChannelMergerNode_addInputs');
  late final _dart_ChannelMergerNode_addInputs _ChannelMergerNode_addInputs =
      _ChannelMergerNode_addInputs_ptr.asFunction<
          _dart_ChannelMergerNode_addInputs>();

  void ChannelMergerNode_setOutputChannelCount(
    int nodeId,
    int n,
  ) {
    return _ChannelMergerNode_setOutputChannelCount(
      nodeId,
      n,
    );
  }

  late final _ChannelMergerNode_setOutputChannelCount_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelMergerNode_setOutputChannelCount>>(
          'ChannelMergerNode_setOutputChannelCount');
  late final _dart_ChannelMergerNode_setOutputChannelCount
      _ChannelMergerNode_setOutputChannelCount =
      _ChannelMergerNode_setOutputChannelCount_ptr.asFunction<
          _dart_ChannelMergerNode_setOutputChannelCount>();

  /// ////////////////////////////
  /// AudioHardwareDeviceNode ///
  /// ////////////////////////////
  int createAudioHardwareDeviceNode(
    ffi.Pointer<ffi.Void> context,
    AudioStreamConfig outputConfig,
    AudioStreamConfig inputConfig,
  ) {
    return _createAudioHardwareDeviceNode(
      context,
      outputConfig,
      inputConfig,
    );
  }

  late final _createAudioHardwareDeviceNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioHardwareDeviceNode>>(
          'createAudioHardwareDeviceNode');
  late final _dart_createAudioHardwareDeviceNode
      _createAudioHardwareDeviceNode = _createAudioHardwareDeviceNode_ptr
          .asFunction<_dart_createAudioHardwareDeviceNode>();

  void AudioHardwareDeviceNode_start(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_start(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_start>>(
          'AudioHardwareDeviceNode_start');
  late final _dart_AudioHardwareDeviceNode_start
      _AudioHardwareDeviceNode_start = _AudioHardwareDeviceNode_start_ptr
          .asFunction<_dart_AudioHardwareDeviceNode_start>();

  void AudioHardwareDeviceNode_stop(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_stop(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_stop_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_stop>>(
          'AudioHardwareDeviceNode_stop');
  late final _dart_AudioHardwareDeviceNode_stop _AudioHardwareDeviceNode_stop =
      _AudioHardwareDeviceNode_stop_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_stop>();

  int AudioHardwareDeviceNode_isRunning(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_isRunning(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_isRunning_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_isRunning>>(
          'AudioHardwareDeviceNode_isRunning');
  late final _dart_AudioHardwareDeviceNode_isRunning
      _AudioHardwareDeviceNode_isRunning =
      _AudioHardwareDeviceNode_isRunning_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_isRunning>();

  AudioStreamConfig AudioHardwareDeviceNode_getOutputConfig(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_getOutputConfig(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_getOutputConfig_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_getOutputConfig>>(
          'AudioHardwareDeviceNode_getOutputConfig');
  late final _dart_AudioHardwareDeviceNode_getOutputConfig
      _AudioHardwareDeviceNode_getOutputConfig =
      _AudioHardwareDeviceNode_getOutputConfig_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_getOutputConfig>();

  AudioStreamConfig AudioHardwareDeviceNode_getInputConfig(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_getInputConfig(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_getInputConfig_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_getInputConfig>>(
          'AudioHardwareDeviceNode_getInputConfig');
  late final _dart_AudioHardwareDeviceNode_getInputConfig
      _AudioHardwareDeviceNode_getInputConfig =
      _AudioHardwareDeviceNode_getInputConfig_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_getInputConfig>();

  AudioStreamConfig createAudioStreamConfig(
    int device_index,
    int desired_channels,
    double desired_samplerate,
  ) {
    return _createAudioStreamConfig(
      device_index,
      desired_channels,
      desired_samplerate,
    );
  }

  late final _createAudioStreamConfig_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioStreamConfig>>(
          'createAudioStreamConfig');
  late final _dart_createAudioStreamConfig _createAudioStreamConfig =
      _createAudioStreamConfig_ptr.asFunction<_dart_createAudioStreamConfig>();

  void AudioHardwareDeviceNode_backendReinitialize(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_backendReinitialize(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_backendReinitialize_ptr = _lookup<
          ffi.NativeFunction<_c_AudioHardwareDeviceNode_backendReinitialize>>(
      'AudioHardwareDeviceNode_backendReinitialize');
  late final _dart_AudioHardwareDeviceNode_backendReinitialize
      _AudioHardwareDeviceNode_backendReinitialize =
      _AudioHardwareDeviceNode_backendReinitialize_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_backendReinitialize>();

  /// ///////////////////////////
  /// DynamicsCompressorNode ///
  /// ///////////////////////////
  int createDynamicsCompressorNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createDynamicsCompressorNode(
      context,
    );
  }

  late final _createDynamicsCompressorNode_ptr =
      _lookup<ffi.NativeFunction<_c_createDynamicsCompressorNode>>(
          'createDynamicsCompressorNode');
  late final _dart_createDynamicsCompressorNode _createDynamicsCompressorNode =
      _createDynamicsCompressorNode_ptr
          .asFunction<_dart_createDynamicsCompressorNode>();

  int DynamicsCompressorNode_threshold(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_threshold(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_threshold>>(
          'DynamicsCompressorNode_threshold');
  late final _dart_DynamicsCompressorNode_threshold
      _DynamicsCompressorNode_threshold = _DynamicsCompressorNode_threshold_ptr
          .asFunction<_dart_DynamicsCompressorNode_threshold>();

  int DynamicsCompressorNode_knee(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_knee(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_knee_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_knee>>(
          'DynamicsCompressorNode_knee');
  late final _dart_DynamicsCompressorNode_knee _DynamicsCompressorNode_knee =
      _DynamicsCompressorNode_knee_ptr.asFunction<
          _dart_DynamicsCompressorNode_knee>();

  int DynamicsCompressorNode_ratio(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_ratio(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_ratio_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_ratio>>(
          'DynamicsCompressorNode_ratio');
  late final _dart_DynamicsCompressorNode_ratio _DynamicsCompressorNode_ratio =
      _DynamicsCompressorNode_ratio_ptr.asFunction<
          _dart_DynamicsCompressorNode_ratio>();

  int DynamicsCompressorNode_attack(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_attack(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_attack_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_attack>>(
          'DynamicsCompressorNode_attack');
  late final _dart_DynamicsCompressorNode_attack
      _DynamicsCompressorNode_attack = _DynamicsCompressorNode_attack_ptr
          .asFunction<_dart_DynamicsCompressorNode_attack>();

  int DynamicsCompressorNode_release(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_release(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_release_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_release>>(
          'DynamicsCompressorNode_release');
  late final _dart_DynamicsCompressorNode_release
      _DynamicsCompressorNode_release = _DynamicsCompressorNode_release_ptr
          .asFunction<_dart_DynamicsCompressorNode_release>();

  int DynamicsCompressorNode_reduction(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_reduction(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_reduction_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_reduction>>(
          'DynamicsCompressorNode_reduction');
  late final _dart_DynamicsCompressorNode_reduction
      _DynamicsCompressorNode_reduction = _DynamicsCompressorNode_reduction_ptr
          .asFunction<_dart_DynamicsCompressorNode_reduction>();

  /// /////////////
  /// ADSRNode ///
  /// /////////////
  int createADSRNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createADSRNode(
      context,
    );
  }

  late final _createADSRNode_ptr =
      _lookup<ffi.NativeFunction<_c_createADSRNode>>('createADSRNode');
  late final _dart_createADSRNode _createADSRNode =
      _createADSRNode_ptr.asFunction<_dart_createADSRNode>();

  int ADSRNode_gate(
    int nodeId,
  ) {
    return _ADSRNode_gate(
      nodeId,
    );
  }

  late final _ADSRNode_gate_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_gate>>('ADSRNode_gate');
  late final _dart_ADSRNode_gate _ADSRNode_gate =
      _ADSRNode_gate_ptr.asFunction<_dart_ADSRNode_gate>();

  int ADSRNode_oneShot(
    int nodeId,
  ) {
    return _ADSRNode_oneShot(
      nodeId,
    );
  }

  late final _ADSRNode_oneShot_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_oneShot>>('ADSRNode_oneShot');
  late final _dart_ADSRNode_oneShot _ADSRNode_oneShot =
      _ADSRNode_oneShot_ptr.asFunction<_dart_ADSRNode_oneShot>();

  int ADSRNode_attackTime(
    int nodeId,
  ) {
    return _ADSRNode_attackTime(
      nodeId,
    );
  }

  late final _ADSRNode_attackTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_attackTime>>(
          'ADSRNode_attackTime');
  late final _dart_ADSRNode_attackTime _ADSRNode_attackTime =
      _ADSRNode_attackTime_ptr.asFunction<_dart_ADSRNode_attackTime>();

  int ADSRNode_attackLevel(
    int nodeId,
  ) {
    return _ADSRNode_attackLevel(
      nodeId,
    );
  }

  late final _ADSRNode_attackLevel_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_attackLevel>>(
          'ADSRNode_attackLevel');
  late final _dart_ADSRNode_attackLevel _ADSRNode_attackLevel =
      _ADSRNode_attackLevel_ptr.asFunction<_dart_ADSRNode_attackLevel>();

  int ADSRNode_decayTime(
    int nodeId,
  ) {
    return _ADSRNode_decayTime(
      nodeId,
    );
  }

  late final _ADSRNode_decayTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_decayTime>>('ADSRNode_decayTime');
  late final _dart_ADSRNode_decayTime _ADSRNode_decayTime =
      _ADSRNode_decayTime_ptr.asFunction<_dart_ADSRNode_decayTime>();

  int ADSRNode_sustainTime(
    int nodeId,
  ) {
    return _ADSRNode_sustainTime(
      nodeId,
    );
  }

  late final _ADSRNode_sustainTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_sustainTime>>(
          'ADSRNode_sustainTime');
  late final _dart_ADSRNode_sustainTime _ADSRNode_sustainTime =
      _ADSRNode_sustainTime_ptr.asFunction<_dart_ADSRNode_sustainTime>();

  int ADSRNode_sustainLevel(
    int nodeId,
  ) {
    return _ADSRNode_sustainLevel(
      nodeId,
    );
  }

  late final _ADSRNode_sustainLevel_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_sustainLevel>>(
          'ADSRNode_sustainLevel');
  late final _dart_ADSRNode_sustainLevel _ADSRNode_sustainLevel =
      _ADSRNode_sustainLevel_ptr.asFunction<_dart_ADSRNode_sustainLevel>();

  int ADSRNode_releaseTime(
    int nodeId,
  ) {
    return _ADSRNode_releaseTime(
      nodeId,
    );
  }

  late final _ADSRNode_releaseTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_releaseTime>>(
          'ADSRNode_releaseTime');
  late final _dart_ADSRNode_releaseTime _ADSRNode_releaseTime =
      _ADSRNode_releaseTime_ptr.asFunction<_dart_ADSRNode_releaseTime>();

  /// ///////////////////
  /// WaveShaperNode ///
  /// ///////////////////
  int createWaveShaperNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createWaveShaperNode(
      context,
    );
  }

  late final _createWaveShaperNode_ptr =
      _lookup<ffi.NativeFunction<_c_createWaveShaperNode>>(
          'createWaveShaperNode');
  late final _dart_createWaveShaperNode _createWaveShaperNode =
      _createWaveShaperNode_ptr.asFunction<_dart_createWaveShaperNode>();

  void WaveShaperNode_setCurve(
    int nodeId,
    ffi.Pointer<ffi.Float> curve,
  ) {
    return _WaveShaperNode_setCurve(
      nodeId,
      curve,
    );
  }

  late final _WaveShaperNode_setCurve_ptr =
      _lookup<ffi.NativeFunction<_c_WaveShaperNode_setCurve>>(
          'WaveShaperNode_setCurve');
  late final _dart_WaveShaperNode_setCurve _WaveShaperNode_setCurve =
      _WaveShaperNode_setCurve_ptr.asFunction<_dart_WaveShaperNode_setCurve>();

  /// //////////////
  /// NoiseNode ///
  /// //////////////
  int createNoiseNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createNoiseNode(
      context,
    );
  }

  late final _createNoiseNode_ptr =
      _lookup<ffi.NativeFunction<_c_createNoiseNode>>('createNoiseNode');
  late final _dart_createNoiseNode _createNoiseNode =
      _createNoiseNode_ptr.asFunction<_dart_createNoiseNode>();

  int NoiseNode_type(
    int nodeId,
  ) {
    return _NoiseNode_type(
      nodeId,
    );
  }

  late final _NoiseNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_NoiseNode_type>>('NoiseNode_type');
  late final _dart_NoiseNode_type _NoiseNode_type =
      _NoiseNode_type_ptr.asFunction<_dart_NoiseNode_type>();

  void NoiseNode_setType(
    int nodeId,
    int type,
  ) {
    return _NoiseNode_setType(
      nodeId,
      type,
    );
  }

  late final _NoiseNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_NoiseNode_setType>>('NoiseNode_setType');
  late final _dart_NoiseNode_setType _NoiseNode_setType =
      _NoiseNode_setType_ptr.asFunction<_dart_NoiseNode_setType>();

  /// /////////////////
  /// PolyBLEPNode ///
  /// /////////////////
  int createPolyBLEPNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createPolyBLEPNode(
      context,
    );
  }

  late final _createPolyBLEPNode_ptr =
      _lookup<ffi.NativeFunction<_c_createPolyBLEPNode>>('createPolyBLEPNode');
  late final _dart_createPolyBLEPNode _createPolyBLEPNode =
      _createPolyBLEPNode_ptr.asFunction<_dart_createPolyBLEPNode>();

  int PolyBLEPNode_type(
    int nodeId,
  ) {
    return _PolyBLEPNode_type(
      nodeId,
    );
  }

  late final _PolyBLEPNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_type>>('PolyBLEPNode_type');
  late final _dart_PolyBLEPNode_type _PolyBLEPNode_type =
      _PolyBLEPNode_type_ptr.asFunction<_dart_PolyBLEPNode_type>();

  void PolyBLEPNode_setType(
    int nodeId,
    int type,
  ) {
    return _PolyBLEPNode_setType(
      nodeId,
      type,
    );
  }

  late final _PolyBLEPNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_setType>>(
          'PolyBLEPNode_setType');
  late final _dart_PolyBLEPNode_setType _PolyBLEPNode_setType =
      _PolyBLEPNode_setType_ptr.asFunction<_dart_PolyBLEPNode_setType>();

  int PolyBLEPNode_amplitude(
    int nodeId,
  ) {
    return _PolyBLEPNode_amplitude(
      nodeId,
    );
  }

  late final _PolyBLEPNode_amplitude_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_amplitude>>(
          'PolyBLEPNode_amplitude');
  late final _dart_PolyBLEPNode_amplitude _PolyBLEPNode_amplitude =
      _PolyBLEPNode_amplitude_ptr.asFunction<_dart_PolyBLEPNode_amplitude>();

  int PolyBLEPNode_frequency(
    int nodeId,
  ) {
    return _PolyBLEPNode_frequency(
      nodeId,
    );
  }

  late final _PolyBLEPNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_frequency>>(
          'PolyBLEPNode_frequency');
  late final _dart_PolyBLEPNode_frequency _PolyBLEPNode_frequency =
      _PolyBLEPNode_frequency_ptr.asFunction<_dart_PolyBLEPNode_frequency>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class CharArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> string;

  @ffi.Int32()
  external int len;
}

class FloatArray extends ffi.Struct {
  external ffi.Pointer<ffi.Float> array;

  @ffi.Int32()
  external int len;
}

class IntArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> array;

  @ffi.Int32()
  external int len;
}

class AudioDeviceInfoBridge extends ffi.Struct {
  @ffi.Int32()
  external int index;

  external ffi.Pointer<ffi.Int8> identifier;

  @ffi.Int32()
  external int identifier_len;

  @ffi.Int32()
  external int num_output_channels;

  @ffi.Int32()
  external int num_input_channels;

  external FloatArray supported_samplerates;

  @ffi.Float()
  external double nominal_samplerate;

  @ffi.Int32()
  external int is_default_output;

  @ffi.Int32()
  external int is_default_input;
}

class AudioDeviceInfoList extends ffi.Struct {
  external ffi.Pointer<AudioDeviceInfoBridge> audioDeviceList;

  @ffi.Int32()
  external int length;
}

class AudioStreamConfig extends ffi.Struct {
  @ffi.Int32()
  external int device_index;

  @ffi.Uint32()
  external int desired_channels;

  @ffi.Float()
  external double desired_samplerate;
}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101600;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 110300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int true_1 = 1;

const int false_1 = 0;

const int __bool_true_false_are_defined = 1;

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __len,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __len,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Int32 __c,
  ffi.Uint64 __len,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  int __c,
  int __len,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  int __buflen,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c_memset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __smax,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset_s = int Function(
  ffi.Pointer<ffi.Void> __s,
  int __smax,
  int __c,
  int __n,
);

typedef _c_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  ffi.Uint64 __big_len,
  ffi.Pointer<ffi.Void> __little,
  ffi.Uint64 __little_len,
);

typedef _dart_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  int __big_len,
  ffi.Pointer<ffi.Void> __little,
  int __little_len,
);

typedef _c_memset_pattern4 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern4 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  int __len,
);

typedef _c_memset_pattern8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern8 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  int __len,
);

typedef _c_memset_pattern16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern16 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  int __len,
);

typedef _c_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  ffi.Uint64 __len,
);

typedef _dart_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  int __len,
);

typedef _c_strlcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcat = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcpy = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strmode = ffi.Void Function(
  ffi.Int32 __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _dart_strmode = void Function(
  int __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int64 arg2,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_timingsafe_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  ffi.Uint64 __len,
);

typedef _dart_timingsafe_bcmp = int Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  int __len,
);

typedef _c_strsignal_r = ffi.Int32 Function(
  ffi.Int32 __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strsignal_r = int Function(
  int __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  int __buflen,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ffs = int Function(
  int arg0,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsl = int Function(
  int arg0,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsll = int Function(
  int arg0,
);

typedef _c_fls = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fls = int Function(
  int arg0,
);

typedef _c_flsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsl = int Function(
  int arg0,
);

typedef _c_flsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsll = int Function(
  int arg0,
);

typedef _c_labSoundMakeAudioDeviceList = AudioDeviceInfoList Function();

typedef _dart_labSoundMakeAudioDeviceList = AudioDeviceInfoList Function();

typedef _c_InitDartApiDL = ffi.IntPtr Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_registerDecodeAudioSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerDecodeAudioSendPort = void Function(
  int sendPort,
);

typedef _c_registerAudioSampleOnEndedSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerAudioSampleOnEndedSendPort = void Function(
  int sendPort,
);

typedef _c_registerOfflineRenderCompleteSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerOfflineRenderCompleteSendPort = void Function(
  int sendPort,
);

typedef _c_createRealtimeAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _dart_createRealtimeAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _c_createOfflineAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  ffi.Double recordTimeMilliseconds,
);

typedef _dart_createOfflineAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  double recordTimeMilliseconds,
);

typedef _c_AudioContext_startOfflineRendering = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_startOfflineRendering = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_addAutomaticPullNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_addAutomaticPullNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_removeAutomaticPullNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_removeAutomaticPullNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_processAutomaticPullNodes = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 framesToProcess,
);

typedef _dart_AudioContext_processAutomaticPullNodes = void Function(
  ffi.Pointer<ffi.Void> context,
  int framesToProcess,
);

typedef _c_AudioContext_handlePreRenderTasks = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_handlePreRenderTasks = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_handlePostRenderTasks = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_handlePostRenderTasks = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_synchronizeConnections = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 timeOut_ms,
);

typedef _dart_AudioContext_synchronizeConnections = void Function(
  ffi.Pointer<ffi.Void> context,
  int timeOut_ms,
);

typedef _c_AudioContext_suspend = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_suspend = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_resume = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_resume = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_currentTime = ffi.Double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_currentTime = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_predictedCurrentTime = ffi.Double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_predictedCurrentTime = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_sampleRate = ffi.Float Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_sampleRate = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isInitialized = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_isInitialized = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isConnected = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destinationIndex,
  ffi.Int32 sourceIndex,
);

typedef _dart_AudioContext_isConnected = int Function(
  ffi.Pointer<ffi.Void> context,
  int destinationIndex,
  int sourceIndex,
);

typedef _c_AudioContext_setDeviceNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_setDeviceNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_device = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_device = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isOfflineContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_isOfflineContext = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_currentSampleFrame = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_currentSampleFrame = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_connect = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destination,
  ffi.Int32 source,
  ffi.Int32 destIdx,
  ffi.Int32 srcIdx,
);

typedef _dart_AudioContext_connect = void Function(
  ffi.Pointer<ffi.Void> context,
  int destination,
  int source,
  int destIdx,
  int srcIdx,
);

typedef _c_AudioContext_disconnect = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destination,
  ffi.Int32 source,
  ffi.Int32 destIdx,
  ffi.Int32 srcIdx,
);

typedef _dart_AudioContext_disconnect = void Function(
  ffi.Pointer<ffi.Void> context,
  int destination,
  int source,
  int destIdx,
  int srcIdx,
);

typedef _c_AudioContext_disconnect2 = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 node,
  ffi.Int32 destIdx,
);

typedef _dart_AudioContext_disconnect2 = void Function(
  ffi.Pointer<ffi.Void> context,
  int node,
  int destIdx,
);

typedef _c_AudioContext_releaseContext = ffi.Void Function(
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_AudioContext_releaseContext = void Function(
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_AudioParam_value = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_value = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
);

typedef _dart_AudioParam_setValue = void Function(
  int nodeId,
  int paramIndex,
  double value,
);

typedef _c_AudioParam_finalValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioParam_finalValue = double Function(
  int nodeId,
  int paramIndex,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioParam_setValueCurveAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Pointer<ffi.Float> curve,
  ffi.Float time,
  ffi.Float duration,
);

typedef _dart_AudioParam_setValueCurveAtTime = void Function(
  int nodeId,
  int paramIndex,
  ffi.Pointer<ffi.Float> curve,
  double time,
  double duration,
);

typedef _c_AudioParam_cancelScheduledValues = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float startTime,
);

typedef _dart_AudioParam_cancelScheduledValues = void Function(
  int nodeId,
  int paramIndex,
  double startTime,
);

typedef _c_AudioParam_setValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_setValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_exponentialRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_exponentialRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_linearRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_linearRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_setTargetAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float target,
  ffi.Float time,
  ffi.Float timeConstant,
);

typedef _dart_AudioParam_setTargetAtTime = void Function(
  int nodeId,
  int paramIndex,
  double target,
  double time,
  double timeConstant,
);

typedef _c_AudioParam_minValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_minValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_maxValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_maxValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_defaultValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_defaultValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_resetSmoothedValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_resetSmoothedValue = void Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setSmoothingConstant = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Double k,
);

typedef _dart_AudioParam_setSmoothingConstant = void Function(
  int nodeId,
  int paramIndex,
  double k,
);

typedef _c_AudioParam_hasSampleAccurateValues = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_hasSampleAccurateValues = int Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioNode_initialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_initialize = void Function(
  int nodeId,
);

typedef _c_AudioNode_uninitialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_uninitialize = void Function(
  int nodeId,
);

typedef _c_AudioNode_isScheduledNode = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_isScheduledNode = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfInputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfInputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfOutputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfOutputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_channelCount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_channelCount = int Function(
  int nodeId,
);

typedef _c_AudioNode_reset = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioNode_reset = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioNode_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_name = ffi.Pointer<ffi.Int8> Function(
  int nodeId,
);

typedef _c_releaseNode = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_releaseNode = void Function(
  int nodeId,
);

typedef _c_hasNode = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_hasNode = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_isPlayingOrScheduled = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_isPlayingOrScheduled = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_stop = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_stop = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_hasFinished = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_hasFinished = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_startWhen = ffi.Uint64 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_startWhen = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_start = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_playbackState = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_playbackState = int Function(
  int nodeId,
);

typedef _c_createAudioSampleNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createAudioSampleNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_SampledAudioNode_setBus = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 busIndex,
);

typedef _dart_SampledAudioNode_setBus = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  int busIndex,
);

typedef _c_SampledAudioNode_schedule = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
);

typedef _dart_SampledAudioNode_schedule = void Function(
  int nodeId,
  double when,
);

typedef _c_SampledAudioNode_schedule2 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule2 = void Function(
  int nodeId,
  double when,
  int loopCount,
);

typedef _c_SampledAudioNode_schedule3 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule3 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  int loopCount,
);

typedef _c_SampledAudioNode_schedule4 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule4 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
  int loopCount,
);

typedef _c_SampledAudioNode_clearSchedules = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SampledAudioNode_clearSchedules = void Function(
  int nodeId,
);

typedef _c_SampledAudioNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
);

typedef _dart_SampledAudioNode_start = void Function(
  int nodeId,
  double when,
);

typedef _c_SampledAudioNode_start2 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start2 = void Function(
  int nodeId,
  double when,
  int loopCount,
);

typedef _c_SampledAudioNode_start3 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start3 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  int loopCount,
);

typedef _c_SampledAudioNode_start4 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start4 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
  int loopCount,
);

typedef _c_SampledAudioNode_getCursor = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_getCursor = int Function(
  int index,
);

typedef _c_SampledAudioNode_playbackRate = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_playbackRate = int Function(
  int index,
);

typedef _c_SampledAudioNode_detune = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_detune = int Function(
  int index,
);

typedef _c_makeBusFromFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 mixToMono,
  ffi.Float targetSampleRate,
);

typedef _dart_makeBusFromFile = int Function(
  ffi.Pointer<ffi.Int8> file,
  int mixToMono,
  double targetSampleRate,
);

typedef _c_makeBusFromMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 bufferLen,
  ffi.Pointer<ffi.Int8> extension_1,
  ffi.Int32 mixToMono,
);

typedef _dart_makeBusFromMemory = int Function(
  ffi.Pointer<ffi.Uint8> buffer,
  int bufferLen,
  ffi.Pointer<ffi.Int8> extension_1,
  int mixToMono,
);

typedef _c_audioBusHasCheck = ffi.Int32 Function(
  ffi.Int32 busId,
);

typedef _dart_audioBusHasCheck = int Function(
  int busId,
);

typedef _c_AudioBus_numberOfChannels = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_numberOfChannels = int Function(
  int busIndex,
);

typedef _c_AudioBus_length = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_length = int Function(
  int busIndex,
);

typedef _c_AudioBus_sampleRate = ffi.Float Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_sampleRate = double Function(
  int busIndex,
);

typedef _c_AudioBus_setSampleRate = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float sampleRate,
);

typedef _dart_AudioBus_setSampleRate = void Function(
  int busIndex,
  double sampleRate,
);

typedef _c_AudioBus_zero = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_zero = void Function(
  int busIndex,
);

typedef _c_AudioBus_clearSilentFlag = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_clearSilentFlag = void Function(
  int busIndex,
);

typedef _c_AudioBus_scale = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float scale,
);

typedef _dart_AudioBus_scale = void Function(
  int busIndex,
  double scale,
);

typedef _c_AudioBus_reset = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_reset = void Function(
  int busIndex,
);

typedef _c_AudioBus_isSilent = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isSilent = int Function(
  int busIndex,
);

typedef _c_AudioBus_isFirstTime = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isFirstTime = int Function(
  int busIndex,
);

typedef _c_releaseAudioBus = ffi.Void Function(
  ffi.Int32 index,
);

typedef _dart_releaseAudioBus = void Function(
  int index,
);

typedef _c_createGain = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createGain = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_GainNode_gain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_GainNode_gain = int Function(
  int nodeId,
);

typedef _c_createRecorderNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 channelCount,
);

typedef _dart_createRecorderNode = int Function(
  ffi.Pointer<ffi.Void> context,
  int channelCount,
);

typedef _c_createRecorderNodeByConfig = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
);

typedef _dart_createRecorderNodeByConfig = int Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
);

typedef _c_RecorderNode_startRecording = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_startRecording = void Function(
  int nodeId,
);

typedef _c_RecorderNode_stopRecording = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_stopRecording = void Function(
  int nodeId,
);

typedef _c_RecorderNode_recordedLengthInSeconds = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_recordedLengthInSeconds = double Function(
  int nodeId,
);

typedef _c_RecorderNode_createBusFromRecording = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 mixToMono,
);

typedef _dart_RecorderNode_createBusFromRecording = int Function(
  int nodeId,
  int mixToMono,
);

typedef _c_RecorderNode_writeRecordingToWav = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 mixToMono,
);

typedef _dart_RecorderNode_writeRecordingToWav = int Function(
  int nodeId,
  ffi.Pointer<ffi.Int8> file,
  int mixToMono,
);

typedef _c_createAnalyserNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createAnalyserNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_createAnalyserNodeFftSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 fftSize,
);

typedef _dart_createAnalyserNodeFftSize = int Function(
  ffi.Pointer<ffi.Void> context,
  int fftSize,
);

typedef _c_AnalyserNode_setFftSize = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 fftSize,
);

typedef _dart_AnalyserNode_setFftSize = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  int fftSize,
);

typedef _c_AnalyserNode_fftSize = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_fftSize = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_frequencyBinCount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_frequencyBinCount = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setMinDecibels = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMinDecibels = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_minDecibels = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_minDecibels = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setMaxDecibels = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMaxDecibels = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_maxDecibels = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_maxDecibels = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setSmoothingTimeConstant = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setSmoothingTimeConstant = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_smoothingTimeConstant = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_smoothingTimeConstant = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_getFloatFrequencyData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _dart_AnalyserNode_getFloatFrequencyData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _c_AnalyserNode_getByteFrequencyData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Uint8> array,
  ffi.Int32 resample,
);

typedef _dart_AnalyserNode_getByteFrequencyData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Uint8> array,
  int resample,
);

typedef _c_AnalyserNode_getFloatTimeDomainData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _dart_AnalyserNode_getFloatTimeDomainData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _c_AnalyserNode_getByteTimeDomainData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Uint8> array,
);

typedef _dart_AnalyserNode_getByteTimeDomainData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Uint8> array,
);

typedef _c_createOscillatorNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createOscillatorNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_OscillatorNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_type = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_OscillatorNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_OscillatorNode_amplitude = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_amplitude = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_frequency = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_bias = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_bias = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_detune = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_detune = int Function(
  int nodeId,
);

typedef _c_createBiquadFilterNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createBiquadFilterNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_BiquadFilterNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_type = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_BiquadFilterNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_BiquadFilterNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_frequency = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_q = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_q = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_gain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_gain = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_detune = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_detune = int Function(
  int nodeId,
);

typedef _c_createPannerNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createPannerNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PannerNode_panningModel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_panningModel = int Function(
  int nodeId,
);

typedef _c_PannerNode_setPanningModel = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 m,
);

typedef _dart_PannerNode_setPanningModel = void Function(
  int nodeId,
  int m,
);

typedef _c_PannerNode_distanceModel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_distanceModel = int Function(
  int nodeId,
);

typedef _c_PannerNode_setDistanceModel = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 m,
);

typedef _dart_PannerNode_setDistanceModel = void Function(
  int nodeId,
  int m,
);

typedef _c_PannerNode_setPosition = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setPosition = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_positionX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionX = int Function(
  int nodeId,
);

typedef _c_PannerNode_positionY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionY = int Function(
  int nodeId,
);

typedef _c_PannerNode_positionZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_setOrientation = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setOrientation = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_orientationX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationX = int Function(
  int nodeId,
);

typedef _c_PannerNode_orientationY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationY = int Function(
  int nodeId,
);

typedef _c_PannerNode_orientationZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_setVelocity = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setVelocity = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_velocityX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityX = int Function(
  int nodeId,
);

typedef _c_PannerNode_velocityY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityY = int Function(
  int nodeId,
);

typedef _c_PannerNode_velocityZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_distanceGain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_distanceGain = int Function(
  int nodeId,
);

typedef _c_PannerNode_coneGain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneGain = int Function(
  int nodeId,
);

typedef _c_PannerNode_refDistance = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_refDistance = double Function(
  int nodeId,
);

typedef _c_PannerNode_setRefDistance = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float refDistance,
);

typedef _dart_PannerNode_setRefDistance = void Function(
  int nodeId,
  double refDistance,
);

typedef _c_PannerNode_maxDistance = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_maxDistance = double Function(
  int nodeId,
);

typedef _c_PannerNode_setMaxDistance = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float maxDistance,
);

typedef _dart_PannerNode_setMaxDistance = void Function(
  int nodeId,
  double maxDistance,
);

typedef _c_PannerNode_rolloffFactor = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_rolloffFactor = double Function(
  int nodeId,
);

typedef _c_PannerNode_setRolloffFactor = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float rolloffFactor,
);

typedef _dart_PannerNode_setRolloffFactor = void Function(
  int nodeId,
  double rolloffFactor,
);

typedef _c_PannerNode_coneInnerAngle = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneInnerAngle = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeInnerAngle = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeInnerAngle = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_coneOuterAngle = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneOuterAngle = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeOuterAngle = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeOuterAngle = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_coneOuterGain = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneOuterGain = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeOuterGain = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeOuterGain = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_getAzimuthElevation = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ffi.Double> outAzimuth,
  ffi.Pointer<ffi.Double> outElevation,
);

typedef _dart_PannerNode_getAzimuthElevation = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ffi.Double> outAzimuth,
  ffi.Pointer<ffi.Double> outElevation,
);

typedef _c_PannerNode_dopplerRate = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_PannerNode_dopplerRate = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_createChannelSplitterNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createChannelSplitterNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ChannelSplitterNode_addOutputs = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelSplitterNode_addOutputs = void Function(
  int nodeId,
  int n,
);

typedef _c_createChannelMergerNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createChannelMergerNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ChannelMergerNode_addInputs = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelMergerNode_addInputs = void Function(
  int nodeId,
  int n,
);

typedef _c_ChannelMergerNode_setOutputChannelCount = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelMergerNode_setOutputChannelCount = void Function(
  int nodeId,
  int n,
);

typedef _c_createAudioHardwareDeviceNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _dart_createAudioHardwareDeviceNode = int Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _c_AudioHardwareDeviceNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_start = void Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_stop = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_stop = void Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_isRunning = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_isRunning = int Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_getOutputConfig = AudioStreamConfig Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_getOutputConfig = AudioStreamConfig
    Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_getInputConfig = AudioStreamConfig Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_getInputConfig = AudioStreamConfig
    Function(
  int nodeId,
);

typedef _c_createAudioStreamConfig = AudioStreamConfig Function(
  ffi.Int32 device_index,
  ffi.Uint32 desired_channels,
  ffi.Float desired_samplerate,
);

typedef _dart_createAudioStreamConfig = AudioStreamConfig Function(
  int device_index,
  int desired_channels,
  double desired_samplerate,
);

typedef _c_AudioHardwareDeviceNode_backendReinitialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_backendReinitialize = void Function(
  int nodeId,
);

typedef _c_createDynamicsCompressorNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createDynamicsCompressorNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_DynamicsCompressorNode_threshold = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_threshold = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_knee = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_knee = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_ratio = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_ratio = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_attack = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_attack = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_release = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_release = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_reduction = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_reduction = int Function(
  int nodeId,
);

typedef _c_createADSRNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createADSRNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ADSRNode_gate = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_gate = int Function(
  int nodeId,
);

typedef _c_ADSRNode_oneShot = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_oneShot = int Function(
  int nodeId,
);

typedef _c_ADSRNode_attackTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_attackTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_attackLevel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_attackLevel = int Function(
  int nodeId,
);

typedef _c_ADSRNode_decayTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_decayTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_sustainTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_sustainTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_sustainLevel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_sustainLevel = int Function(
  int nodeId,
);

typedef _c_ADSRNode_releaseTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_releaseTime = int Function(
  int nodeId,
);

typedef _c_createWaveShaperNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createWaveShaperNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_WaveShaperNode_setCurve = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Float> curve,
);

typedef _dart_WaveShaperNode_setCurve = void Function(
  int nodeId,
  ffi.Pointer<ffi.Float> curve,
);

typedef _c_createNoiseNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createNoiseNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_NoiseNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_NoiseNode_type = int Function(
  int nodeId,
);

typedef _c_NoiseNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_NoiseNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_createPolyBLEPNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createPolyBLEPNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PolyBLEPNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_type = int Function(
  int nodeId,
);

typedef _c_PolyBLEPNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_PolyBLEPNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_PolyBLEPNode_amplitude = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_amplitude = int Function(
  int nodeId,
);

typedef _c_PolyBLEPNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_frequency = int Function(
  int nodeId,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
