// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to LabSound
class LabSoundBind {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LabSoundBind(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LabSoundBind.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_start_ptr =
      _lookup<ffi.NativeFunction<_c___va_start>>('__va_start');
  late final _dart___va_start ___va_start =
      ___va_start_ptr.asFunction<_dart___va_start>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_init_cookie>>(
          '__security_init_cookie');
  late final _dart___security_init_cookie ___security_init_cookie =
      ___security_init_cookie_ptr.asFunction<_dart___security_init_cookie>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_check_cookie>>(
          '__security_check_cookie');
  late final _dart___security_check_cookie ___security_check_cookie =
      ___security_check_cookie_ptr.asFunction<_dart___security_check_cookie>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailure_ptr =
      _lookup<ffi.NativeFunction<_c___report_gsfailure>>('__report_gsfailure');
  late final _dart___report_gsfailure ___report_gsfailure =
      ___report_gsfailure_ptr.asFunction<_dart___report_gsfailure>();

  late final ffi.Pointer<ffi.Uint64> ___security_cookie =
      _lookup<ffi.Uint64>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfo_ptr =
      _lookup<ffi.NativeFunction<_c__invalid_parameter_noinfo>>(
          '_invalid_parameter_noinfo');
  late final _dart__invalid_parameter_noinfo __invalid_parameter_noinfo =
      __invalid_parameter_noinfo_ptr
          .asFunction<_dart__invalid_parameter_noinfo>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturn_ptr =
      _lookup<ffi.NativeFunction<_c__invalid_parameter_noinfo_noreturn>>(
          '_invalid_parameter_noinfo_noreturn');
  late final _dart__invalid_parameter_noinfo_noreturn
      __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturn_ptr
          .asFunction<_dart__invalid_parameter_noinfo_noreturn>();

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watson_ptr =
      _lookup<ffi.NativeFunction<_c__invoke_watson>>('_invoke_watson');
  late final _dart__invoke_watson __invoke_watson =
      __invoke_watson_ptr.asFunction<_dart__invoke_watson>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errno_ptr = _lookup<ffi.NativeFunction<_c__errno>>('_errno');
  late final _dart__errno __errno = __errno_ptr.asFunction<_dart__errno>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errno_ptr =
      _lookup<ffi.NativeFunction<_c__set_errno>>('_set_errno');
  late final _dart__set_errno __set_errno =
      __set_errno_ptr.asFunction<_dart__set_errno>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errno_ptr =
      _lookup<ffi.NativeFunction<_c__get_errno>>('_get_errno');
  late final _dart__get_errno __get_errno =
      __get_errno_ptr.asFunction<_dart__get_errno>();

  ffi.Pointer<ffi.Uint64> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrno_ptr =
      _lookup<ffi.NativeFunction<_c___doserrno>>('__doserrno');
  late final _dart___doserrno ___doserrno =
      ___doserrno_ptr.asFunction<_dart___doserrno>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrno_ptr =
      _lookup<ffi.NativeFunction<_c__set_doserrno>>('_set_doserrno');
  late final _dart__set_doserrno __set_doserrno =
      __set_doserrno_ptr.asFunction<_dart__set_doserrno>();

  int _get_doserrno(
    ffi.Pointer<ffi.Uint64> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrno_ptr =
      _lookup<ffi.NativeFunction<_c__get_doserrno>>('_get_doserrno');
  late final _dart__get_doserrno __get_doserrno =
      __get_doserrno_ptr.asFunction<_dart__get_doserrno>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return _memchr(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memcmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memcpy(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memmove(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return _memset(
      _Dst,
      _Val,
      _Size,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Val,
  ) {
    return _strchr(
      _Str,
      _Val,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Ch,
  ) {
    return _strrchr(
      _Str,
      _Ch,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _SubStr,
  ) {
    return _strstr(
      _Str,
      _SubStr,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Uint16> wcschr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return _wcschr(
      _Str,
      _Ch,
    );
  }

  late final _wcschr_ptr = _lookup<ffi.NativeFunction<_c_wcschr>>('wcschr');
  late final _dart_wcschr _wcschr = _wcschr_ptr.asFunction<_dart_wcschr>();

  ffi.Pointer<ffi.Uint16> wcsrchr(
    ffi.Pointer<ffi.Uint16> _Str,
    int _Ch,
  ) {
    return _wcsrchr(
      _Str,
      _Ch,
    );
  }

  late final _wcsrchr_ptr = _lookup<ffi.NativeFunction<_c_wcsrchr>>('wcsrchr');
  late final _dart_wcsrchr _wcsrchr = _wcsrchr_ptr.asFunction<_dart_wcsrchr>();

  ffi.Pointer<ffi.Uint16> wcsstr(
    ffi.Pointer<ffi.Uint16> _Str,
    ffi.Pointer<ffi.Uint16> _SubStr,
  ) {
    return _wcsstr(
      _Str,
      _SubStr,
    );
  }

  late final _wcsstr_ptr = _lookup<ffi.NativeFunction<_c_wcsstr>>('wcsstr');
  late final _dart_wcsstr _wcsstr = _wcsstr_ptr.asFunction<_dart_wcsstr>();

  int _memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return __memicmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final __memicmp_ptr =
      _lookup<ffi.NativeFunction<_c__memicmp>>('_memicmp');
  late final _dart__memicmp __memicmp =
      __memicmp_ptr.asFunction<_dart__memicmp>();

  int _memicmp_l(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __memicmp_l(
      _Buf1,
      _Buf2,
      _Size,
      _Locale,
    );
  }

  late final __memicmp_l_ptr =
      _lookup<ffi.NativeFunction<_c__memicmp_l>>('_memicmp_l');
  late final _dart__memicmp_l __memicmp_l =
      __memicmp_l_ptr.asFunction<_dart__memicmp_l>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _Size,
  ) {
    return _memccpy_1(
      _Dst,
      _Src,
      _Val,
      _Size,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy_1 =
      _memccpy_ptr.asFunction<_dart_memccpy>();

  int memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memicmp_1(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memicmp_ptr = _lookup<ffi.NativeFunction<_c_memicmp>>('memicmp');
  late final _dart_memicmp _memicmp_1 =
      _memicmp_ptr.asFunction<_dart_memicmp>();

  int wcscat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscat_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscat_s_ptr =
      _lookup<ffi.NativeFunction<_c_wcscat_s>>('wcscat_s');
  late final _dart_wcscat_s _wcscat_s =
      _wcscat_s_ptr.asFunction<_dart_wcscat_s>();

  int wcscpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscpy_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscpy_s_ptr =
      _lookup<ffi.NativeFunction<_c_wcscpy_s>>('wcscpy_s');
  late final _dart_wcscpy_s _wcscpy_s =
      _wcscpy_s_ptr.asFunction<_dart_wcscpy_s>();

  int wcsncat_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsncat_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncat_s_ptr =
      _lookup<ffi.NativeFunction<_c_wcsncat_s>>('wcsncat_s');
  late final _dart_wcsncat_s _wcsncat_s =
      _wcsncat_s_ptr.asFunction<_dart_wcsncat_s>();

  int wcsncpy_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsncpy_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncpy_s_ptr =
      _lookup<ffi.NativeFunction<_c_wcsncpy_s>>('wcsncpy_s');
  late final _dart_wcsncpy_s _wcsncpy_s =
      _wcsncpy_s_ptr.asFunction<_dart_wcsncpy_s>();

  ffi.Pointer<ffi.Uint16> wcstok_s(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return _wcstok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_s_ptr =
      _lookup<ffi.NativeFunction<_c_wcstok_s>>('wcstok_s');
  late final _dart_wcstok_s _wcstok_s =
      _wcstok_s_ptr.asFunction<_dart_wcstok_s>();

  ffi.Pointer<ffi.Uint16> _wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsdup(
      _String,
    );
  }

  late final __wcsdup_ptr = _lookup<ffi.NativeFunction<_c__wcsdup>>('_wcsdup');
  late final _dart__wcsdup __wcsdup = __wcsdup_ptr.asFunction<_dart__wcsdup>();

  ffi.Pointer<ffi.Uint16> wcscat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscat(
      _Destination,
      _Source,
    );
  }

  late final _wcscat_ptr = _lookup<ffi.NativeFunction<_c_wcscat>>('wcscat');
  late final _dart_wcscat _wcscat = _wcscat_ptr.asFunction<_dart_wcscat>();

  int wcscmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcscmp(
      _String1,
      _String2,
    );
  }

  late final _wcscmp_ptr = _lookup<ffi.NativeFunction<_c_wcscmp>>('wcscmp');
  late final _dart_wcscmp _wcscmp = _wcscmp_ptr.asFunction<_dart_wcscmp>();

  ffi.Pointer<ffi.Uint16> wcscpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
  ) {
    return _wcscpy(
      _Destination,
      _Source,
    );
  }

  late final _wcscpy_ptr = _lookup<ffi.NativeFunction<_c_wcscpy>>('wcscpy');
  late final _dart_wcscpy _wcscpy = _wcscpy_ptr.asFunction<_dart_wcscpy>();

  int wcscspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcscspn(
      _String,
      _Control,
    );
  }

  late final _wcscspn_ptr = _lookup<ffi.NativeFunction<_c_wcscspn>>('wcscspn');
  late final _dart_wcscspn _wcscspn = _wcscspn_ptr.asFunction<_dart_wcscspn>();

  int wcslen(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcslen(
      _String,
    );
  }

  late final _wcslen_ptr = _lookup<ffi.NativeFunction<_c_wcslen>>('wcslen');
  late final _dart_wcslen _wcslen = _wcslen_ptr.asFunction<_dart_wcslen>();

  int wcsnlen(
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsnlen(
      _Source,
      _MaxCount,
    );
  }

  late final _wcsnlen_ptr = _lookup<ffi.NativeFunction<_c_wcsnlen>>('wcsnlen');
  late final _dart_wcsnlen _wcsnlen = _wcsnlen_ptr.asFunction<_dart_wcsnlen>();

  ffi.Pointer<ffi.Uint16> wcsncat(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return _wcsncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncat_ptr = _lookup<ffi.NativeFunction<_c_wcsncat>>('wcsncat');
  late final _dart_wcsncat _wcsncat = _wcsncat_ptr.asFunction<_dart_wcsncat>();

  int wcsncmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return _wcsncmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncmp_ptr = _lookup<ffi.NativeFunction<_c_wcsncmp>>('wcsncmp');
  late final _dart_wcsncmp _wcsncmp = _wcsncmp_ptr.asFunction<_dart_wcsncmp>();

  ffi.Pointer<ffi.Uint16> wcsncpy(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _Count,
  ) {
    return _wcsncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncpy_ptr = _lookup<ffi.NativeFunction<_c_wcsncpy>>('wcsncpy');
  late final _dart_wcsncpy _wcsncpy = _wcsncpy_ptr.asFunction<_dart_wcsncpy>();

  ffi.Pointer<ffi.Uint16> wcspbrk(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcspbrk(
      _String,
      _Control,
    );
  }

  late final _wcspbrk_ptr = _lookup<ffi.NativeFunction<_c_wcspbrk>>('wcspbrk');
  late final _dart_wcspbrk _wcspbrk = _wcspbrk_ptr.asFunction<_dart_wcspbrk>();

  int wcsspn(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Control,
  ) {
    return _wcsspn(
      _String,
      _Control,
    );
  }

  late final _wcsspn_ptr = _lookup<ffi.NativeFunction<_c_wcsspn>>('wcsspn');
  late final _dart_wcsspn _wcsspn = _wcsspn_ptr.asFunction<_dart_wcsspn>();

  ffi.Pointer<ffi.Uint16> wcstok(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<ffi.Uint16> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
  ) {
    return _wcstok(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_ptr = _lookup<ffi.NativeFunction<_c_wcstok>>('wcstok');
  late final _dart_wcstok _wcstok = _wcstok_ptr.asFunction<_dart_wcstok>();

  ffi.Pointer<ffi.Uint16> _wcserror(
    int _ErrorNumber,
  ) {
    return __wcserror_1(
      _ErrorNumber,
    );
  }

  late final __wcserror_ptr =
      _lookup<ffi.NativeFunction<_c__wcserror>>('_wcserror');
  late final _dart__wcserror __wcserror_1 =
      __wcserror_ptr.asFunction<_dart__wcserror>();

  int _wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return __wcserror_s_1(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  late final __wcserror_s_ptr =
      _lookup<ffi.NativeFunction<_c__wcserror_s>>('_wcserror_s');
  late final _dart__wcserror_s __wcserror_s_1 =
      __wcserror_s_ptr.asFunction<_dart__wcserror_s>();

  ffi.Pointer<ffi.Uint16> __wcserror(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return ___wcserror(
      _String,
    );
  }

  late final ___wcserror_ptr =
      _lookup<ffi.NativeFunction<_c___wcserror>>('__wcserror');
  late final _dart___wcserror ___wcserror =
      ___wcserror_ptr.asFunction<_dart___wcserror>();

  int __wcserror_s(
    ffi.Pointer<ffi.Uint16> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.Uint16> _ErrorMessage,
  ) {
    return ___wcserror_s(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  late final ___wcserror_s_ptr =
      _lookup<ffi.NativeFunction<_c___wcserror_s>>('__wcserror_s');
  late final _dart___wcserror_s ___wcserror_s =
      ___wcserror_s_ptr.asFunction<_dart___wcserror_s>();

  int _wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return __wcsicmp(
      _String1,
      _String2,
    );
  }

  late final __wcsicmp_ptr =
      _lookup<ffi.NativeFunction<_c__wcsicmp>>('_wcsicmp');
  late final _dart__wcsicmp __wcsicmp =
      __wcsicmp_ptr.asFunction<_dart__wcsicmp>();

  int _wcsicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsicmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicmp_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsicmp_l>>('_wcsicmp_l');
  late final _dart__wcsicmp_l __wcsicmp_l =
      __wcsicmp_l_ptr.asFunction<_dart__wcsicmp_l>();

  int _wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicmp_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnicmp>>('_wcsnicmp');
  late final _dart__wcsnicmp __wcsnicmp =
      __wcsnicmp_ptr.asFunction<_dart__wcsnicmp>();

  int _wcsnicmp_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicmp_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnicmp_l>>('_wcsnicmp_l');
  late final _dart__wcsnicmp_l __wcsnicmp_l =
      __wcsnicmp_l_ptr.asFunction<_dart__wcsnicmp_l>();

  int _wcsnset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset_s(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_s_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnset_s>>('_wcsnset_s');
  late final _dart__wcsnset_s __wcsnset_s =
      __wcsnset_s_ptr.asFunction<_dart__wcsnset_s>();

  ffi.Pointer<ffi.Uint16> _wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return __wcsnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final __wcsnset_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnset>>('_wcsnset');
  late final _dart__wcsnset __wcsnset =
      __wcsnset_ptr.asFunction<_dart__wcsnset>();

  ffi.Pointer<ffi.Uint16> _wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsrev(
      _String,
    );
  }

  late final __wcsrev_ptr = _lookup<ffi.NativeFunction<_c__wcsrev>>('_wcsrev');
  late final _dart__wcsrev __wcsrev = __wcsrev_ptr.asFunction<_dart__wcsrev>();

  int _wcsset_s(
    ffi.Pointer<ffi.Uint16> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return __wcsset_s(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  late final __wcsset_s_ptr =
      _lookup<ffi.NativeFunction<_c__wcsset_s>>('_wcsset_s');
  late final _dart__wcsset_s __wcsset_s =
      __wcsset_s_ptr.asFunction<_dart__wcsset_s>();

  ffi.Pointer<ffi.Uint16> _wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return __wcsset(
      _String,
      _Value,
    );
  }

  late final __wcsset_ptr = _lookup<ffi.NativeFunction<_c__wcsset>>('_wcsset');
  late final _dart__wcsset __wcsset = __wcsset_ptr.asFunction<_dart__wcsset>();

  int _wcslwr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
  ) {
    return __wcslwr_s(
      _String,
      _SizeInWords,
    );
  }

  late final __wcslwr_s_ptr =
      _lookup<ffi.NativeFunction<_c__wcslwr_s>>('_wcslwr_s');
  late final _dart__wcslwr_s __wcslwr_s =
      __wcslwr_s_ptr.asFunction<_dart__wcslwr_s>();

  ffi.Pointer<ffi.Uint16> _wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcslwr(
      _String,
    );
  }

  late final __wcslwr_ptr = _lookup<ffi.NativeFunction<_c__wcslwr>>('_wcslwr');
  late final _dart__wcslwr __wcslwr = __wcslwr_ptr.asFunction<_dart__wcslwr>();

  int _wcslwr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _SizeInWords,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcslwr_s_l(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  late final __wcslwr_s_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcslwr_s_l>>('_wcslwr_s_l');
  late final _dart__wcslwr_s_l __wcslwr_s_l =
      __wcslwr_s_l_ptr.asFunction<_dart__wcslwr_s_l>();

  ffi.Pointer<ffi.Uint16> _wcslwr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcslwr_l(
      _String,
      _Locale,
    );
  }

  late final __wcslwr_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcslwr_l>>('_wcslwr_l');
  late final _dart__wcslwr_l __wcslwr_l =
      __wcslwr_l_ptr.asFunction<_dart__wcslwr_l>();

  int _wcsupr_s(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
  ) {
    return __wcsupr_s(
      _String,
      _Size,
    );
  }

  late final __wcsupr_s_ptr =
      _lookup<ffi.NativeFunction<_c__wcsupr_s>>('_wcsupr_s');
  late final _dart__wcsupr_s __wcsupr_s =
      __wcsupr_s_ptr.asFunction<_dart__wcsupr_s>();

  ffi.Pointer<ffi.Uint16> _wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return __wcsupr(
      _String,
    );
  }

  late final __wcsupr_ptr = _lookup<ffi.NativeFunction<_c__wcsupr>>('_wcsupr');
  late final _dart__wcsupr __wcsupr = __wcsupr_ptr.asFunction<_dart__wcsupr>();

  int _wcsupr_s_l(
    ffi.Pointer<ffi.Uint16> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __wcsupr_s_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsupr_s_l>>('_wcsupr_s_l');
  late final _dart__wcsupr_s_l __wcsupr_s_l =
      __wcsupr_s_l_ptr.asFunction<_dart__wcsupr_s_l>();

  ffi.Pointer<ffi.Uint16> _wcsupr_l(
    ffi.Pointer<ffi.Uint16> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsupr_l(
      _String,
      _Locale,
    );
  }

  late final __wcsupr_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsupr_l>>('_wcsupr_l');
  late final _dart__wcsupr_l __wcsupr_l =
      __wcsupr_l_ptr.asFunction<_dart__wcsupr_l>();

  int wcsxfrm(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
  ) {
    return _wcsxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsxfrm_ptr = _lookup<ffi.NativeFunction<_c_wcsxfrm>>('wcsxfrm');
  late final _dart_wcsxfrm _wcsxfrm = _wcsxfrm_ptr.asFunction<_dart_wcsxfrm>();

  int _wcsxfrm_l(
    ffi.Pointer<ffi.Uint16> _Destination,
    ffi.Pointer<ffi.Uint16> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsxfrm_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsxfrm_l>>('_wcsxfrm_l');
  late final _dart__wcsxfrm_l __wcsxfrm_l =
      __wcsxfrm_l_ptr.asFunction<_dart__wcsxfrm_l>();

  int wcscoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcscoll(
      _String1,
      _String2,
    );
  }

  late final _wcscoll_ptr = _lookup<ffi.NativeFunction<_c_wcscoll>>('wcscoll');
  late final _dart_wcscoll _wcscoll = _wcscoll_ptr.asFunction<_dart_wcscoll>();

  int _wcscoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcscoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcscoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcscoll_l>>('_wcscoll_l');
  late final _dart__wcscoll_l __wcscoll_l =
      __wcscoll_l_ptr.asFunction<_dart__wcscoll_l>();

  int _wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return __wcsicoll(
      _String1,
      _String2,
    );
  }

  late final __wcsicoll_ptr =
      _lookup<ffi.NativeFunction<_c__wcsicoll>>('_wcsicoll');
  late final _dart__wcsicoll __wcsicoll =
      __wcsicoll_ptr.asFunction<_dart__wcsicoll>();

  int _wcsicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsicoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __wcsicoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsicoll_l>>('_wcsicoll_l');
  late final _dart__wcsicoll_l __wcsicoll_l =
      __wcsicoll_l_ptr.asFunction<_dart__wcsicoll_l>();

  int _wcsncoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsncoll_ptr =
      _lookup<ffi.NativeFunction<_c__wcsncoll>>('_wcsncoll');
  late final _dart__wcsncoll __wcsncoll =
      __wcsncoll_ptr.asFunction<_dart__wcsncoll>();

  int _wcsncoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsncoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsncoll_l>>('_wcsncoll_l');
  late final _dart__wcsncoll_l __wcsncoll_l =
      __wcsncoll_l_ptr.asFunction<_dart__wcsncoll_l>();

  int _wcsnicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return __wcsnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __wcsnicoll_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnicoll>>('_wcsnicoll');
  late final _dart__wcsnicoll __wcsnicoll =
      __wcsnicoll_ptr.asFunction<_dart__wcsnicoll>();

  int _wcsnicoll_l(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __wcsnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcsnicoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__wcsnicoll_l>>('_wcsnicoll_l');
  late final _dart__wcsnicoll_l __wcsnicoll_l =
      __wcsnicoll_l_ptr.asFunction<_dart__wcsnicoll_l>();

  ffi.Pointer<ffi.Uint16> wcsdup(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsdup_1(
      _String,
    );
  }

  late final _wcsdup_ptr = _lookup<ffi.NativeFunction<_c_wcsdup>>('wcsdup');
  late final _dart_wcsdup _wcsdup_1 = _wcsdup_ptr.asFunction<_dart_wcsdup>();

  int wcsicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcsicmp_1(
      _String1,
      _String2,
    );
  }

  late final _wcsicmp_ptr = _lookup<ffi.NativeFunction<_c_wcsicmp>>('wcsicmp');
  late final _dart_wcsicmp _wcsicmp_1 =
      _wcsicmp_ptr.asFunction<_dart_wcsicmp>();

  int wcsnicmp(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp_1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmp_ptr =
      _lookup<ffi.NativeFunction<_c_wcsnicmp>>('wcsnicmp');
  late final _dart_wcsnicmp _wcsnicmp_1 =
      _wcsnicmp_ptr.asFunction<_dart_wcsnicmp>();

  ffi.Pointer<ffi.Uint16> wcsnset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset_1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnset_ptr = _lookup<ffi.NativeFunction<_c_wcsnset>>('wcsnset');
  late final _dart_wcsnset _wcsnset_1 =
      _wcsnset_ptr.asFunction<_dart_wcsnset>();

  ffi.Pointer<ffi.Uint16> wcsrev(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsrev_1(
      _String,
    );
  }

  late final _wcsrev_ptr = _lookup<ffi.NativeFunction<_c_wcsrev>>('wcsrev');
  late final _dart_wcsrev _wcsrev_1 = _wcsrev_ptr.asFunction<_dart_wcsrev>();

  ffi.Pointer<ffi.Uint16> wcsset(
    ffi.Pointer<ffi.Uint16> _String,
    int _Value,
  ) {
    return _wcsset_1(
      _String,
      _Value,
    );
  }

  late final _wcsset_ptr = _lookup<ffi.NativeFunction<_c_wcsset>>('wcsset');
  late final _dart_wcsset _wcsset_1 = _wcsset_ptr.asFunction<_dart_wcsset>();

  ffi.Pointer<ffi.Uint16> wcslwr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcslwr_1(
      _String,
    );
  }

  late final _wcslwr_ptr = _lookup<ffi.NativeFunction<_c_wcslwr>>('wcslwr');
  late final _dart_wcslwr _wcslwr_1 = _wcslwr_ptr.asFunction<_dart_wcslwr>();

  ffi.Pointer<ffi.Uint16> wcsupr(
    ffi.Pointer<ffi.Uint16> _String,
  ) {
    return _wcsupr_1(
      _String,
    );
  }

  late final _wcsupr_ptr = _lookup<ffi.NativeFunction<_c_wcsupr>>('wcsupr');
  late final _dart_wcsupr _wcsupr_1 = _wcsupr_ptr.asFunction<_dart_wcsupr>();

  int wcsicoll(
    ffi.Pointer<ffi.Uint16> _String1,
    ffi.Pointer<ffi.Uint16> _String2,
  ) {
    return _wcsicoll_1(
      _String1,
      _String2,
    );
  }

  late final _wcsicoll_ptr =
      _lookup<ffi.NativeFunction<_c_wcsicoll>>('wcsicoll');
  late final _dart_wcsicoll _wcsicoll_1 =
      _wcsicoll_ptr.asFunction<_dart_wcsicoll>();

  int strcpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcpy_s_ptr =
      _lookup<ffi.NativeFunction<_c_strcpy_s>>('strcpy_s');
  late final _dart_strcpy_s _strcpy_s =
      _strcpy_s_ptr.asFunction<_dart_strcpy_s>();

  int strcat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcat_s_ptr =
      _lookup<ffi.NativeFunction<_c_strcat_s>>('strcat_s');
  late final _dart_strcat_s _strcat_s =
      _strcat_s_ptr.asFunction<_dart_strcat_s>();

  int strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _ErrorNumber,
  ) {
    return _strerror_s_1(
      _Buffer,
      _SizeInBytes,
      _ErrorNumber,
    );
  }

  late final _strerror_s_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_s>>('strerror_s');
  late final _dart_strerror_s _strerror_s_1 =
      _strerror_s_ptr.asFunction<_dart_strerror_s>();

  int strncat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncat_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncat_s_ptr =
      _lookup<ffi.NativeFunction<_c_strncat_s>>('strncat_s');
  late final _dart_strncat_s _strncat_s =
      _strncat_s_ptr.asFunction<_dart_strncat_s>();

  int strncpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncpy_s_ptr =
      _lookup<ffi.NativeFunction<_c_strncpy_s>>('strncpy_s');
  late final _dart_strncpy_s _strncpy_s =
      _strncpy_s_ptr.asFunction<_dart_strncpy_s>();

  ffi.Pointer<ffi.Int8> strtok_s(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
  ) {
    return _strtok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _strtok_s_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_s>>('strtok_s');
  late final _dart_strtok_s _strtok_s =
      _strtok_s_ptr.asFunction<_dart_strtok_s>();

  ffi.Pointer<ffi.Void> _memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _MaxCount,
  ) {
    return __memccpy(
      _Dst,
      _Src,
      _Val,
      _MaxCount,
    );
  }

  late final __memccpy_ptr =
      _lookup<ffi.NativeFunction<_c__memccpy>>('_memccpy');
  late final _dart__memccpy __memccpy =
      __memccpy_ptr.asFunction<_dart__memccpy>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat(
      _Destination,
      _Source,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  int strcmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
  ) {
    return _strcmp(
      _Str1,
      _Str2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int _strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __strcmpi(
      _String1,
      _String2,
    );
  }

  late final __strcmpi_ptr =
      _lookup<ffi.NativeFunction<_c__strcmpi>>('_strcmpi');
  late final _dart__strcmpi __strcmpi =
      __strcmpi_ptr.asFunction<_dart__strcmpi>();

  int strcoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcoll(
      _String1,
      _String2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  int _strcoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strcoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __strcoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__strcoll_l>>('_strcoll_l');
  late final _dart__strcoll_l __strcoll_l =
      __strcoll_l_ptr.asFunction<_dart__strcoll_l>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy(
      _Destination,
      _Source,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strcspn(
      _Str,
      _Control,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> _strdup(
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return __strdup(
      _Source,
    );
  }

  late final __strdup_ptr = _lookup<ffi.NativeFunction<_c__strdup>>('_strdup');
  late final _dart__strdup __strdup = __strdup_ptr.asFunction<_dart__strdup>();

  ffi.Pointer<ffi.Int8> _strerror(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return __strerror(
      _ErrorMessage,
    );
  }

  late final __strerror_ptr =
      _lookup<ffi.NativeFunction<_c__strerror>>('_strerror');
  late final _dart__strerror __strerror =
      __strerror_ptr.asFunction<_dart__strerror>();

  int _strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return __strerror_s(
      _Buffer,
      _SizeInBytes,
      _ErrorMessage,
    );
  }

  late final __strerror_s_ptr =
      _lookup<ffi.NativeFunction<_c__strerror_s>>('_strerror_s');
  late final _dart__strerror_s __strerror_s =
      __strerror_s_ptr.asFunction<_dart__strerror_s>();

  ffi.Pointer<ffi.Int8> strerror(
    int _ErrorMessage,
  ) {
    return _strerror_1(
      _ErrorMessage,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror_1 =
      _strerror_ptr.asFunction<_dart_strerror>();

  int _stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __stricmp(
      _String1,
      _String2,
    );
  }

  late final __stricmp_ptr =
      _lookup<ffi.NativeFunction<_c__stricmp>>('_stricmp');
  late final _dart__stricmp __stricmp =
      __stricmp_ptr.asFunction<_dart__stricmp>();

  int _stricoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return __stricoll(
      _String1,
      _String2,
    );
  }

  late final __stricoll_ptr =
      _lookup<ffi.NativeFunction<_c__stricoll>>('_stricoll');
  late final _dart__stricoll __stricoll =
      __stricoll_ptr.asFunction<_dart__stricoll>();

  int _stricoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __stricoll_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__stricoll_l>>('_stricoll_l');
  late final _dart__stricoll_l __stricoll_l =
      __stricoll_l_ptr.asFunction<_dart__stricoll_l>();

  int _stricmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __stricmp_l(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final __stricmp_l_ptr =
      _lookup<ffi.NativeFunction<_c__stricmp_l>>('_stricmp_l');
  late final _dart__stricmp_l __stricmp_l =
      __stricmp_l_ptr.asFunction<_dart__stricmp_l>();

  int strlen(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return _strlen(
      _Str,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  int _strlwr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return __strlwr_s(
      _String,
      _Size,
    );
  }

  late final __strlwr_s_ptr =
      _lookup<ffi.NativeFunction<_c__strlwr_s>>('_strlwr_s');
  late final _dart__strlwr_s __strlwr_s =
      __strlwr_s_ptr.asFunction<_dart__strlwr_s>();

  ffi.Pointer<ffi.Int8> _strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __strlwr(
      _String,
    );
  }

  late final __strlwr_ptr = _lookup<ffi.NativeFunction<_c__strlwr>>('_strlwr');
  late final _dart__strlwr __strlwr = __strlwr_ptr.asFunction<_dart__strlwr>();

  int _strlwr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strlwr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strlwr_s_l_ptr =
      _lookup<ffi.NativeFunction<_c__strlwr_s_l>>('_strlwr_s_l');
  late final _dart__strlwr_s_l __strlwr_s_l =
      __strlwr_s_l_ptr.asFunction<_dart__strlwr_s_l>();

  ffi.Pointer<ffi.Int8> _strlwr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strlwr_l(
      _String,
      _Locale,
    );
  }

  late final __strlwr_l_ptr =
      _lookup<ffi.NativeFunction<_c__strlwr_l>>('_strlwr_l');
  late final _dart__strlwr_l __strlwr_l =
      __strlwr_l_ptr.asFunction<_dart__strlwr_l>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
    int _MaxCount,
  ) {
    return _strncmp(
      _Str1,
      _Str2,
      _MaxCount,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  int _strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicmp_ptr =
      _lookup<ffi.NativeFunction<_c__strnicmp>>('_strnicmp');
  late final _dart__strnicmp __strnicmp =
      __strnicmp_ptr.asFunction<_dart__strnicmp>();

  int _strnicmp_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strnicmp_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicmp_l_ptr =
      _lookup<ffi.NativeFunction<_c__strnicmp_l>>('_strnicmp_l');
  late final _dart__strnicmp_l __strnicmp_l =
      __strnicmp_l_ptr.asFunction<_dart__strnicmp_l>();

  int _strnicoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strnicoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strnicoll_ptr =
      _lookup<ffi.NativeFunction<_c__strnicoll>>('_strnicoll');
  late final _dart__strnicoll __strnicoll =
      __strnicoll_ptr.asFunction<_dart__strnicoll>();

  int _strnicoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strnicoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strnicoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__strnicoll_l>>('_strnicoll_l');
  late final _dart__strnicoll_l __strnicoll_l =
      __strnicoll_l_ptr.asFunction<_dart__strnicoll_l>();

  int _strncoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return __strncoll(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final __strncoll_ptr =
      _lookup<ffi.NativeFunction<_c__strncoll>>('_strncoll');
  late final _dart__strncoll __strncoll =
      __strncoll_ptr.asFunction<_dart__strncoll>();

  int _strncoll_l(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strncoll_l(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final __strncoll_l_ptr =
      _lookup<ffi.NativeFunction<_c__strncoll_l>>('_strncoll_l');
  late final _dart__strncoll_l __strncoll_l =
      __strncoll_l_ptr.asFunction<_dart__strncoll_l>();

  int __strncnt(
    ffi.Pointer<ffi.Int8> _String,
    int _Count,
  ) {
    return ___strncnt(
      _String,
      _Count,
    );
  }

  late final ___strncnt_ptr =
      _lookup<ffi.NativeFunction<_c___strncnt>>('__strncnt');
  late final _dart___strncnt ___strncnt =
      ___strncnt_ptr.asFunction<_dart___strncnt>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  int strnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return _strnlen(
      _String,
      _MaxCount,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  int _strnset_s(
    ffi.Pointer<ffi.Int8> _String,
    int _SizeInBytes,
    int _Value,
    int _MaxCount,
  ) {
    return __strnset_s(
      _String,
      _SizeInBytes,
      _Value,
      _MaxCount,
    );
  }

  late final __strnset_s_ptr =
      _lookup<ffi.NativeFunction<_c__strnset_s>>('_strnset_s');
  late final _dart__strnset_s __strnset_s =
      __strnset_s_ptr.asFunction<_dart__strnset_s>();

  ffi.Pointer<ffi.Int8> _strnset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
    int _Count,
  ) {
    return __strnset(
      _Destination,
      _Value,
      _Count,
    );
  }

  late final __strnset_ptr =
      _lookup<ffi.NativeFunction<_c__strnset>>('_strnset');
  late final _dart__strnset __strnset =
      __strnset_ptr.asFunction<_dart__strnset>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strpbrk(
      _Str,
      _Control,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> _strrev(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return __strrev(
      _Str,
    );
  }

  late final __strrev_ptr = _lookup<ffi.NativeFunction<_c__strrev>>('_strrev');
  late final _dart__strrev __strrev = __strrev_ptr.asFunction<_dart__strrev>();

  int _strset_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _DestinationSize,
    int _Value,
  ) {
    return __strset_s(
      _Destination,
      _DestinationSize,
      _Value,
    );
  }

  late final __strset_s_ptr =
      _lookup<ffi.NativeFunction<_c__strset_s>>('_strset_s');
  late final _dart__strset_s __strset_s =
      __strset_s_ptr.asFunction<_dart__strset_s>();

  ffi.Pointer<ffi.Int8> _strset(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
  ) {
    return __strset(
      _Destination,
      _Value,
    );
  }

  late final __strset_ptr = _lookup<ffi.NativeFunction<_c__strset>>('_strset');
  late final _dart__strset __strset = __strset_ptr.asFunction<_dart__strset>();

  int strspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strspn(
      _Str,
      _Control,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
  ) {
    return _strtok(
      _String,
      _Delimiter,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  int _strupr_s(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return __strupr_s(
      _String,
      _Size,
    );
  }

  late final __strupr_s_ptr =
      _lookup<ffi.NativeFunction<_c__strupr_s>>('_strupr_s');
  late final _dart__strupr_s __strupr_s =
      __strupr_s_ptr.asFunction<_dart__strupr_s>();

  ffi.Pointer<ffi.Int8> _strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return __strupr(
      _String,
    );
  }

  late final __strupr_ptr = _lookup<ffi.NativeFunction<_c__strupr>>('_strupr');
  late final _dart__strupr __strupr = __strupr_ptr.asFunction<_dart__strupr>();

  int _strupr_s_l(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strupr_s_l(
      _String,
      _Size,
      _Locale,
    );
  }

  late final __strupr_s_l_ptr =
      _lookup<ffi.NativeFunction<_c__strupr_s_l>>('_strupr_s_l');
  late final _dart__strupr_s_l __strupr_s_l =
      __strupr_s_l_ptr.asFunction<_dart__strupr_s_l>();

  ffi.Pointer<ffi.Int8> _strupr_l(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strupr_l(
      _String,
      _Locale,
    );
  }

  late final __strupr_l_ptr =
      _lookup<ffi.NativeFunction<_c__strupr_l>>('_strupr_l');
  late final _dart__strupr_l __strupr_l =
      __strupr_l_ptr.asFunction<_dart__strupr_l>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  int _strxfrm_l(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    ffi.Pointer<__crt_locale_pointers> _Locale,
  ) {
    return __strxfrm_l(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __strxfrm_l_ptr =
      _lookup<ffi.NativeFunction<_c__strxfrm_l>>('_strxfrm_l');
  late final _dart__strxfrm_l __strxfrm_l =
      __strxfrm_l_ptr.asFunction<_dart__strxfrm_l>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strdup_1(
      _String,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup_1 = _strdup_ptr.asFunction<_dart_strdup>();

  int strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcmpi_1(
      _String1,
      _String2,
    );
  }

  late final _strcmpi_ptr = _lookup<ffi.NativeFunction<_c_strcmpi>>('strcmpi');
  late final _dart_strcmpi _strcmpi_1 =
      _strcmpi_ptr.asFunction<_dart_strcmpi>();

  int stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _stricmp_1(
      _String1,
      _String2,
    );
  }

  late final _stricmp_ptr = _lookup<ffi.NativeFunction<_c_stricmp>>('stricmp');
  late final _dart_stricmp _stricmp_1 =
      _stricmp_ptr.asFunction<_dart_stricmp>();

  ffi.Pointer<ffi.Int8> strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strlwr_1(
      _String,
    );
  }

  late final _strlwr_ptr = _lookup<ffi.NativeFunction<_c_strlwr>>('strlwr');
  late final _dart_strlwr _strlwr_1 = _strlwr_ptr.asFunction<_dart_strlwr>();

  int strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strnicmp_1(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicmp_ptr =
      _lookup<ffi.NativeFunction<_c_strnicmp>>('strnicmp');
  late final _dart_strnicmp _strnicmp_1 =
      _strnicmp_ptr.asFunction<_dart_strnicmp>();

  ffi.Pointer<ffi.Int8> strnset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _strnset_1(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _strnset_ptr = _lookup<ffi.NativeFunction<_c_strnset>>('strnset');
  late final _dart_strnset _strnset_1 =
      _strnset_ptr.asFunction<_dart_strnset>();

  ffi.Pointer<ffi.Int8> strrev(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strrev_1(
      _String,
    );
  }

  late final _strrev_ptr = _lookup<ffi.NativeFunction<_c_strrev>>('strrev');
  late final _dart_strrev _strrev_1 = _strrev_ptr.asFunction<_dart_strrev>();

  ffi.Pointer<ffi.Int8> strset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
  ) {
    return _strset_1(
      _String,
      _Value,
    );
  }

  late final _strset_ptr = _lookup<ffi.NativeFunction<_c_strset>>('strset');
  late final _dart_strset _strset_1 = _strset_ptr.asFunction<_dart_strset>();

  ffi.Pointer<ffi.Int8> strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strupr_1(
      _String,
    );
  }

  late final _strupr_ptr = _lookup<ffi.NativeFunction<_c_strupr>>('strupr');
  late final _dart_strupr _strupr_1 = _strupr_ptr.asFunction<_dart_strupr>();

  AudioDeviceInfoList labSound_MakeAudioDeviceList() {
    return _labSound_MakeAudioDeviceList();
  }

  late final _labSound_MakeAudioDeviceList_ptr =
      _lookup<ffi.NativeFunction<_c_labSound_MakeAudioDeviceList>>(
          'labSound_MakeAudioDeviceList');
  late final _dart_labSound_MakeAudioDeviceList _labSound_MakeAudioDeviceList =
      _labSound_MakeAudioDeviceList_ptr
          .asFunction<_dart_labSound_MakeAudioDeviceList>();

  AudioDeviceIndex labSound_GetDefaultOutputAudioDeviceIndex() {
    return _labSound_GetDefaultOutputAudioDeviceIndex();
  }

  late final _labSound_GetDefaultOutputAudioDeviceIndex_ptr =
      _lookup<ffi.NativeFunction<_c_labSound_GetDefaultOutputAudioDeviceIndex>>(
          'labSound_GetDefaultOutputAudioDeviceIndex');
  late final _dart_labSound_GetDefaultOutputAudioDeviceIndex
      _labSound_GetDefaultOutputAudioDeviceIndex =
      _labSound_GetDefaultOutputAudioDeviceIndex_ptr
          .asFunction<_dart_labSound_GetDefaultOutputAudioDeviceIndex>();

  AudioDeviceIndex labSound_GetDefaultInputAudioDeviceIndex() {
    return _labSound_GetDefaultInputAudioDeviceIndex();
  }

  late final _labSound_GetDefaultInputAudioDeviceIndex_ptr =
      _lookup<ffi.NativeFunction<_c_labSound_GetDefaultInputAudioDeviceIndex>>(
          'labSound_GetDefaultInputAudioDeviceIndex');
  late final _dart_labSound_GetDefaultInputAudioDeviceIndex
      _labSound_GetDefaultInputAudioDeviceIndex =
      _labSound_GetDefaultInputAudioDeviceIndex_ptr
          .asFunction<_dart_labSound_GetDefaultInputAudioDeviceIndex>();

  int labSound_MakeAudioHardwareInputNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _labSound_MakeAudioHardwareInputNode(
      context,
    );
  }

  late final _labSound_MakeAudioHardwareInputNode_ptr =
      _lookup<ffi.NativeFunction<_c_labSound_MakeAudioHardwareInputNode>>(
          'labSound_MakeAudioHardwareInputNode');
  late final _dart_labSound_MakeAudioHardwareInputNode
      _labSound_MakeAudioHardwareInputNode =
      _labSound_MakeAudioHardwareInputNode_ptr
          .asFunction<_dart_labSound_MakeAudioHardwareInputNode>();

  AudioStreamConfig labSound_GetDefaultInputAudioDeviceConfiguration() {
    return _labSound_GetDefaultInputAudioDeviceConfiguration();
  }

  late final _labSound_GetDefaultInputAudioDeviceConfiguration_ptr = _lookup<
          ffi.NativeFunction<
              _c_labSound_GetDefaultInputAudioDeviceConfiguration>>(
      'labSound_GetDefaultInputAudioDeviceConfiguration');
  late final _dart_labSound_GetDefaultInputAudioDeviceConfiguration
      _labSound_GetDefaultInputAudioDeviceConfiguration =
      _labSound_GetDefaultInputAudioDeviceConfiguration_ptr
          .asFunction<_dart_labSound_GetDefaultInputAudioDeviceConfiguration>();

  AudioStreamConfig labSound_GetDefaultOutputAudioDeviceConfiguration() {
    return _labSound_GetDefaultOutputAudioDeviceConfiguration();
  }

  late final _labSound_GetDefaultOutputAudioDeviceConfiguration_ptr = _lookup<
          ffi.NativeFunction<
              _c_labSound_GetDefaultOutputAudioDeviceConfiguration>>(
      'labSound_GetDefaultOutputAudioDeviceConfiguration');
  late final _dart_labSound_GetDefaultOutputAudioDeviceConfiguration
      _labSound_GetDefaultOutputAudioDeviceConfiguration =
      _labSound_GetDefaultOutputAudioDeviceConfiguration_ptr.asFunction<
          _dart_labSound_GetDefaultOutputAudioDeviceConfiguration>();

  /// /////////
  /// PORT ///
  /// /////////
  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void registerDecodeAudioSendPort(
    int sendPort,
  ) {
    return _registerDecodeAudioSendPort(
      sendPort,
    );
  }

  late final _registerDecodeAudioSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerDecodeAudioSendPort>>(
          'registerDecodeAudioSendPort');
  late final _dart_registerDecodeAudioSendPort _registerDecodeAudioSendPort =
      _registerDecodeAudioSendPort_ptr
          .asFunction<_dart_registerDecodeAudioSendPort>();

  void registerAudioSampleOnEndedSendPort(
    int sendPort,
  ) {
    return _registerAudioSampleOnEndedSendPort(
      sendPort,
    );
  }

  late final _registerAudioSampleOnEndedSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerAudioSampleOnEndedSendPort>>(
          'registerAudioSampleOnEndedSendPort');
  late final _dart_registerAudioSampleOnEndedSendPort
      _registerAudioSampleOnEndedSendPort =
      _registerAudioSampleOnEndedSendPort_ptr
          .asFunction<_dart_registerAudioSampleOnEndedSendPort>();

  void registerOfflineRenderCompleteSendPort(
    int sendPort,
  ) {
    return _registerOfflineRenderCompleteSendPort(
      sendPort,
    );
  }

  late final _registerOfflineRenderCompleteSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerOfflineRenderCompleteSendPort>>(
          'registerOfflineRenderCompleteSendPort');
  late final _dart_registerOfflineRenderCompleteSendPort
      _registerOfflineRenderCompleteSendPort =
      _registerOfflineRenderCompleteSendPort_ptr
          .asFunction<_dart_registerOfflineRenderCompleteSendPort>();

  /// /////////////////
  /// AudioContext ///
  /// /////////////////
  ffi.Pointer<ffi.Void> createRealtimeAudioContext(
    AudioStreamConfig outputConfig,
    AudioStreamConfig inputConfig,
  ) {
    return _createRealtimeAudioContext(
      outputConfig,
      inputConfig,
    );
  }

  late final _createRealtimeAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createRealtimeAudioContext>>(
          'createRealtimeAudioContext');
  late final _dart_createRealtimeAudioContext _createRealtimeAudioContext =
      _createRealtimeAudioContext_ptr
          .asFunction<_dart_createRealtimeAudioContext>();

  ffi.Pointer<ffi.Void> createOfflineAudioContext(
    AudioStreamConfig outputConfig,
    double recordTimeMilliseconds,
  ) {
    return _createOfflineAudioContext(
      outputConfig,
      recordTimeMilliseconds,
    );
  }

  late final _createOfflineAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createOfflineAudioContext>>(
          'createOfflineAudioContext');
  late final _dart_createOfflineAudioContext _createOfflineAudioContext =
      _createOfflineAudioContext_ptr
          .asFunction<_dart_createOfflineAudioContext>();

  int AudioContext_startOfflineRendering(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_startOfflineRendering(
      context,
    );
  }

  late final _AudioContext_startOfflineRendering_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_startOfflineRendering>>(
          'AudioContext_startOfflineRendering');
  late final _dart_AudioContext_startOfflineRendering
      _AudioContext_startOfflineRendering =
      _AudioContext_startOfflineRendering_ptr.asFunction<
          _dart_AudioContext_startOfflineRendering>();

  int AudioContext_makeAudioHardwareInputNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_makeAudioHardwareInputNode(
      context,
    );
  }

  late final _AudioContext_makeAudioHardwareInputNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_makeAudioHardwareInputNode>>(
          'AudioContext_makeAudioHardwareInputNode');
  late final _dart_AudioContext_makeAudioHardwareInputNode
      _AudioContext_makeAudioHardwareInputNode =
      _AudioContext_makeAudioHardwareInputNode_ptr.asFunction<
          _dart_AudioContext_makeAudioHardwareInputNode>();

  void AudioContext_addAutomaticPullNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_addAutomaticPullNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_addAutomaticPullNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_addAutomaticPullNode>>(
          'AudioContext_addAutomaticPullNode');
  late final _dart_AudioContext_addAutomaticPullNode
      _AudioContext_addAutomaticPullNode =
      _AudioContext_addAutomaticPullNode_ptr.asFunction<
          _dart_AudioContext_addAutomaticPullNode>();

  void AudioContext_removeAutomaticPullNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_removeAutomaticPullNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_removeAutomaticPullNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_removeAutomaticPullNode>>(
          'AudioContext_removeAutomaticPullNode');
  late final _dart_AudioContext_removeAutomaticPullNode
      _AudioContext_removeAutomaticPullNode =
      _AudioContext_removeAutomaticPullNode_ptr.asFunction<
          _dart_AudioContext_removeAutomaticPullNode>();

  void AudioContext_processAutomaticPullNodes(
    ffi.Pointer<ffi.Void> context,
    int framesToProcess,
  ) {
    return _AudioContext_processAutomaticPullNodes(
      context,
      framesToProcess,
    );
  }

  late final _AudioContext_processAutomaticPullNodes_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_processAutomaticPullNodes>>(
          'AudioContext_processAutomaticPullNodes');
  late final _dart_AudioContext_processAutomaticPullNodes
      _AudioContext_processAutomaticPullNodes =
      _AudioContext_processAutomaticPullNodes_ptr.asFunction<
          _dart_AudioContext_processAutomaticPullNodes>();

  void AudioContext_handlePreRenderTasks(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_handlePreRenderTasks(
      context,
    );
  }

  late final _AudioContext_handlePreRenderTasks_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_handlePreRenderTasks>>(
          'AudioContext_handlePreRenderTasks');
  late final _dart_AudioContext_handlePreRenderTasks
      _AudioContext_handlePreRenderTasks =
      _AudioContext_handlePreRenderTasks_ptr.asFunction<
          _dart_AudioContext_handlePreRenderTasks>();

  void AudioContext_handlePostRenderTasks(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_handlePostRenderTasks(
      context,
    );
  }

  late final _AudioContext_handlePostRenderTasks_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_handlePostRenderTasks>>(
          'AudioContext_handlePostRenderTasks');
  late final _dart_AudioContext_handlePostRenderTasks
      _AudioContext_handlePostRenderTasks =
      _AudioContext_handlePostRenderTasks_ptr.asFunction<
          _dart_AudioContext_handlePostRenderTasks>();

  void AudioContext_synchronizeConnections(
    ffi.Pointer<ffi.Void> context,
    int timeOut_ms,
  ) {
    return _AudioContext_synchronizeConnections(
      context,
      timeOut_ms,
    );
  }

  late final _AudioContext_synchronizeConnections_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_synchronizeConnections>>(
          'AudioContext_synchronizeConnections');
  late final _dart_AudioContext_synchronizeConnections
      _AudioContext_synchronizeConnections =
      _AudioContext_synchronizeConnections_ptr.asFunction<
          _dart_AudioContext_synchronizeConnections>();

  void AudioContext_suspend(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_suspend(
      context,
    );
  }

  late final _AudioContext_suspend_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_suspend>>(
          'AudioContext_suspend');
  late final _dart_AudioContext_suspend _AudioContext_suspend =
      _AudioContext_suspend_ptr.asFunction<_dart_AudioContext_suspend>();

  void AudioContext_resume(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_resume(
      context,
    );
  }

  late final _AudioContext_resume_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_resume>>(
          'AudioContext_resume');
  late final _dart_AudioContext_resume _AudioContext_resume =
      _AudioContext_resume_ptr.asFunction<_dart_AudioContext_resume>();

  double AudioContext_currentTime(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_currentTime(
      context,
    );
  }

  late final _AudioContext_currentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentTime>>(
          'AudioContext_currentTime');
  late final _dart_AudioContext_currentTime _AudioContext_currentTime =
      _AudioContext_currentTime_ptr.asFunction<
          _dart_AudioContext_currentTime>();

  double AudioContext_predictedCurrentTime(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_predictedCurrentTime(
      context,
    );
  }

  late final _AudioContext_predictedCurrentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_predictedCurrentTime>>(
          'AudioContext_predictedCurrentTime');
  late final _dart_AudioContext_predictedCurrentTime
      _AudioContext_predictedCurrentTime =
      _AudioContext_predictedCurrentTime_ptr.asFunction<
          _dart_AudioContext_predictedCurrentTime>();

  double AudioContext_sampleRate(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_sampleRate(
      context,
    );
  }

  late final _AudioContext_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_sampleRate>>(
          'AudioContext_sampleRate');
  late final _dart_AudioContext_sampleRate _AudioContext_sampleRate =
      _AudioContext_sampleRate_ptr.asFunction<_dart_AudioContext_sampleRate>();

  int AudioContext_isInitialized(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_isInitialized(
      context,
    );
  }

  late final _AudioContext_isInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isInitialized>>(
          'AudioContext_isInitialized');
  late final _dart_AudioContext_isInitialized _AudioContext_isInitialized =
      _AudioContext_isInitialized_ptr.asFunction<
          _dart_AudioContext_isInitialized>();

  int AudioContext_isConnected(
    ffi.Pointer<ffi.Void> context,
    int destinationIndex,
    int sourceIndex,
  ) {
    return _AudioContext_isConnected(
      context,
      destinationIndex,
      sourceIndex,
    );
  }

  late final _AudioContext_isConnected_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isConnected>>(
          'AudioContext_isConnected');
  late final _dart_AudioContext_isConnected _AudioContext_isConnected =
      _AudioContext_isConnected_ptr.asFunction<
          _dart_AudioContext_isConnected>();

  void AudioContext_setDeviceNode(
    ffi.Pointer<ffi.Void> context,
    int nodeId,
  ) {
    return _AudioContext_setDeviceNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_setDeviceNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_setDeviceNode>>(
          'AudioContext_setDeviceNode');
  late final _dart_AudioContext_setDeviceNode _AudioContext_setDeviceNode =
      _AudioContext_setDeviceNode_ptr.asFunction<
          _dart_AudioContext_setDeviceNode>();

  int AudioContext_device(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_device(
      context,
    );
  }

  late final _AudioContext_device_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_device>>(
          'AudioContext_device');
  late final _dart_AudioContext_device _AudioContext_device =
      _AudioContext_device_ptr.asFunction<_dart_AudioContext_device>();

  int AudioContext_isOfflineContext(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_isOfflineContext(
      context,
    );
  }

  late final _AudioContext_isOfflineContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isOfflineContext>>(
          'AudioContext_isOfflineContext');
  late final _dart_AudioContext_isOfflineContext
      _AudioContext_isOfflineContext = _AudioContext_isOfflineContext_ptr
          .asFunction<_dart_AudioContext_isOfflineContext>();

  int AudioContext_currentSampleFrame(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioContext_currentSampleFrame(
      context,
    );
  }

  late final _AudioContext_currentSampleFrame_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentSampleFrame>>(
          'AudioContext_currentSampleFrame');
  late final _dart_AudioContext_currentSampleFrame
      _AudioContext_currentSampleFrame = _AudioContext_currentSampleFrame_ptr
          .asFunction<_dart_AudioContext_currentSampleFrame>();

  void AudioContext_connect(
    ffi.Pointer<ffi.Void> context,
    int destination,
    int source,
    int destIdx,
    int srcIdx,
  ) {
    return _AudioContext_connect(
      context,
      destination,
      source,
      destIdx,
      srcIdx,
    );
  }

  late final _AudioContext_connect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_connect>>(
          'AudioContext_connect');
  late final _dart_AudioContext_connect _AudioContext_connect =
      _AudioContext_connect_ptr.asFunction<_dart_AudioContext_connect>();

  void AudioContext_disconnect(
    ffi.Pointer<ffi.Void> context,
    int destination,
    int source,
    int destIdx,
    int srcIdx,
  ) {
    return _AudioContext_disconnect(
      context,
      destination,
      source,
      destIdx,
      srcIdx,
    );
  }

  late final _AudioContext_disconnect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnect>>(
          'AudioContext_disconnect');
  late final _dart_AudioContext_disconnect _AudioContext_disconnect =
      _AudioContext_disconnect_ptr.asFunction<_dart_AudioContext_disconnect>();

  void AudioContext_disconnectCompletely(
    ffi.Pointer<ffi.Void> context,
    int node,
    int destIdx,
  ) {
    return _AudioContext_disconnectCompletely(
      context,
      node,
      destIdx,
    );
  }

  late final _AudioContext_disconnectCompletely_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnectCompletely>>(
          'AudioContext_disconnectCompletely');
  late final _dart_AudioContext_disconnectCompletely
      _AudioContext_disconnectCompletely =
      _AudioContext_disconnectCompletely_ptr.asFunction<
          _dart_AudioContext_disconnectCompletely>();

  void AudioContext_connectParam(
    ffi.Pointer<ffi.Void> context,
    int paramNodeId,
    int paramId,
    int driverNodeId,
    int index,
  ) {
    return _AudioContext_connectParam(
      context,
      paramNodeId,
      paramId,
      driverNodeId,
      index,
    );
  }

  late final _AudioContext_connectParam_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_connectParam>>(
          'AudioContext_connectParam');
  late final _dart_AudioContext_connectParam _AudioContext_connectParam =
      _AudioContext_connectParam_ptr.asFunction<
          _dart_AudioContext_connectParam>();

  void AudioContext_connectParamByName(
    ffi.Pointer<ffi.Void> context,
    int destinationNodeId,
    ffi.Pointer<ffi.Int8> parameterName,
    int driverNodeId,
    int index,
  ) {
    return _AudioContext_connectParamByName(
      context,
      destinationNodeId,
      parameterName,
      driverNodeId,
      index,
    );
  }

  late final _AudioContext_connectParamByName_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_connectParamByName>>(
          'AudioContext_connectParamByName');
  late final _dart_AudioContext_connectParamByName
      _AudioContext_connectParamByName = _AudioContext_connectParamByName_ptr
          .asFunction<_dart_AudioContext_connectParamByName>();

  void AudioContext_disconnectParam(
    ffi.Pointer<ffi.Void> context,
    int paramNodeId,
    int paramId,
    int driverNodeId,
    int index,
  ) {
    return _AudioContext_disconnectParam(
      context,
      paramNodeId,
      paramId,
      driverNodeId,
      index,
    );
  }

  late final _AudioContext_disconnectParam_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnectParam>>(
          'AudioContext_disconnectParam');
  late final _dart_AudioContext_disconnectParam _AudioContext_disconnectParam =
      _AudioContext_disconnectParam_ptr.asFunction<
          _dart_AudioContext_disconnectParam>();

  void AudioContext_releaseContext(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _AudioContext_releaseContext(
      ctx,
    );
  }

  late final _AudioContext_releaseContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_releaseContext>>(
          'AudioContext_releaseContext');
  late final _dart_AudioContext_releaseContext _AudioContext_releaseContext =
      _AudioContext_releaseContext_ptr.asFunction<
          _dart_AudioContext_releaseContext>();

  /// ///////////////
  /// AudioParam ///
  /// ///////////////
  double AudioParam_value(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_value(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_value_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_value>>('AudioParam_value');
  late final _dart_AudioParam_value _AudioParam_value =
      _AudioParam_value_ptr.asFunction<_dart_AudioParam_value>();

  void AudioParam_setValue(
    int nodeId,
    int paramIndex,
    double value,
  ) {
    return _AudioParam_setValue(
      nodeId,
      paramIndex,
      value,
    );
  }

  late final _AudioParam_setValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValue>>(
          'AudioParam_setValue');
  late final _dart_AudioParam_setValue _AudioParam_setValue =
      _AudioParam_setValue_ptr.asFunction<_dart_AudioParam_setValue>();

  double AudioParam_finalValue(
    int nodeId,
    int paramIndex,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioParam_finalValue(
      nodeId,
      paramIndex,
      context,
    );
  }

  late final _AudioParam_finalValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_finalValue>>(
          'AudioParam_finalValue');
  late final _dart_AudioParam_finalValue _AudioParam_finalValue =
      _AudioParam_finalValue_ptr.asFunction<_dart_AudioParam_finalValue>();

  void AudioParam_setValueCurveAtTime(
    int nodeId,
    int paramIndex,
    ffi.Pointer<ffi.Float> curve,
    double time,
    double duration,
  ) {
    return _AudioParam_setValueCurveAtTime(
      nodeId,
      paramIndex,
      curve,
      time,
      duration,
    );
  }

  late final _AudioParam_setValueCurveAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueCurveAtTime>>(
          'AudioParam_setValueCurveAtTime');
  late final _dart_AudioParam_setValueCurveAtTime
      _AudioParam_setValueCurveAtTime = _AudioParam_setValueCurveAtTime_ptr
          .asFunction<_dart_AudioParam_setValueCurveAtTime>();

  void AudioParam_cancelScheduledValues(
    int nodeId,
    int paramIndex,
    double startTime,
  ) {
    return _AudioParam_cancelScheduledValues(
      nodeId,
      paramIndex,
      startTime,
    );
  }

  late final _AudioParam_cancelScheduledValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_cancelScheduledValues>>(
          'AudioParam_cancelScheduledValues');
  late final _dart_AudioParam_cancelScheduledValues
      _AudioParam_cancelScheduledValues = _AudioParam_cancelScheduledValues_ptr
          .asFunction<_dart_AudioParam_cancelScheduledValues>();

  void AudioParam_setValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_setValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_setValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueAtTime>>(
          'AudioParam_setValueAtTime');
  late final _dart_AudioParam_setValueAtTime _AudioParam_setValueAtTime =
      _AudioParam_setValueAtTime_ptr.asFunction<
          _dart_AudioParam_setValueAtTime>();

  void AudioParam_exponentialRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_exponentialRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_exponentialRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_exponentialRampToValueAtTime>>(
          'AudioParam_exponentialRampToValueAtTime');
  late final _dart_AudioParam_exponentialRampToValueAtTime
      _AudioParam_exponentialRampToValueAtTime =
      _AudioParam_exponentialRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_exponentialRampToValueAtTime>();

  void AudioParam_linearRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_linearRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_linearRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_linearRampToValueAtTime>>(
          'AudioParam_linearRampToValueAtTime');
  late final _dart_AudioParam_linearRampToValueAtTime
      _AudioParam_linearRampToValueAtTime =
      _AudioParam_linearRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_linearRampToValueAtTime>();

  void AudioParam_setTargetAtTime(
    int nodeId,
    int paramIndex,
    double target,
    double time,
    double timeConstant,
  ) {
    return _AudioParam_setTargetAtTime(
      nodeId,
      paramIndex,
      target,
      time,
      timeConstant,
    );
  }

  late final _AudioParam_setTargetAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setTargetAtTime>>(
          'AudioParam_setTargetAtTime');
  late final _dart_AudioParam_setTargetAtTime _AudioParam_setTargetAtTime =
      _AudioParam_setTargetAtTime_ptr.asFunction<
          _dart_AudioParam_setTargetAtTime>();

  double AudioParam_minValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_minValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_minValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_minValue>>(
          'AudioParam_minValue');
  late final _dart_AudioParam_minValue _AudioParam_minValue =
      _AudioParam_minValue_ptr.asFunction<_dart_AudioParam_minValue>();

  double AudioParam_maxValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_maxValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_maxValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_maxValue>>(
          'AudioParam_maxValue');
  late final _dart_AudioParam_maxValue _AudioParam_maxValue =
      _AudioParam_maxValue_ptr.asFunction<_dart_AudioParam_maxValue>();

  double AudioParam_defaultValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_defaultValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_defaultValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_defaultValue>>(
          'AudioParam_defaultValue');
  late final _dart_AudioParam_defaultValue _AudioParam_defaultValue =
      _AudioParam_defaultValue_ptr.asFunction<_dart_AudioParam_defaultValue>();

  void AudioParam_resetSmoothedValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_resetSmoothedValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_resetSmoothedValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_resetSmoothedValue>>(
          'AudioParam_resetSmoothedValue');
  late final _dart_AudioParam_resetSmoothedValue
      _AudioParam_resetSmoothedValue = _AudioParam_resetSmoothedValue_ptr
          .asFunction<_dart_AudioParam_resetSmoothedValue>();

  void AudioParam_setSmoothingConstant(
    int nodeId,
    int paramIndex,
    double k,
  ) {
    return _AudioParam_setSmoothingConstant(
      nodeId,
      paramIndex,
      k,
    );
  }

  late final _AudioParam_setSmoothingConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setSmoothingConstant>>(
          'AudioParam_setSmoothingConstant');
  late final _dart_AudioParam_setSmoothingConstant
      _AudioParam_setSmoothingConstant = _AudioParam_setSmoothingConstant_ptr
          .asFunction<_dart_AudioParam_setSmoothingConstant>();

  int AudioParam_hasSampleAccurateValues(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_hasSampleAccurateValues(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_hasSampleAccurateValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_hasSampleAccurateValues>>(
          'AudioParam_hasSampleAccurateValues');
  late final _dart_AudioParam_hasSampleAccurateValues
      _AudioParam_hasSampleAccurateValues =
      _AudioParam_hasSampleAccurateValues_ptr.asFunction<
          _dart_AudioParam_hasSampleAccurateValues>();

  /// //////////////
  /// AudioNode ///
  /// //////////////
  void AudioNode_initialize(
    int nodeId,
  ) {
    return _AudioNode_initialize(
      nodeId,
    );
  }

  late final _AudioNode_initialize_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_initialize>>(
          'AudioNode_initialize');
  late final _dart_AudioNode_initialize _AudioNode_initialize =
      _AudioNode_initialize_ptr.asFunction<_dart_AudioNode_initialize>();

  void AudioNode_uninitialize(
    int nodeId,
  ) {
    return _AudioNode_uninitialize(
      nodeId,
    );
  }

  late final _AudioNode_uninitialize_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_uninitialize>>(
          'AudioNode_uninitialize');
  late final _dart_AudioNode_uninitialize _AudioNode_uninitialize =
      _AudioNode_uninitialize_ptr.asFunction<_dart_AudioNode_uninitialize>();

  int AudioNode_isScheduledNode(
    int nodeId,
  ) {
    return _AudioNode_isScheduledNode(
      nodeId,
    );
  }

  late final _AudioNode_isScheduledNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_isScheduledNode>>(
          'AudioNode_isScheduledNode');
  late final _dart_AudioNode_isScheduledNode _AudioNode_isScheduledNode =
      _AudioNode_isScheduledNode_ptr.asFunction<
          _dart_AudioNode_isScheduledNode>();

  int AudioNode_numberOfInputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfInputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfInputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfInputs>>(
          'AudioNode_numberOfInputs');
  late final _dart_AudioNode_numberOfInputs _AudioNode_numberOfInputs =
      _AudioNode_numberOfInputs_ptr.asFunction<
          _dart_AudioNode_numberOfInputs>();

  int AudioNode_numberOfOutputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfOutputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfOutputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfOutputs>>(
          'AudioNode_numberOfOutputs');
  late final _dart_AudioNode_numberOfOutputs _AudioNode_numberOfOutputs =
      _AudioNode_numberOfOutputs_ptr.asFunction<
          _dart_AudioNode_numberOfOutputs>();

  int AudioNode_channelCount(
    int nodeId,
  ) {
    return _AudioNode_channelCount(
      nodeId,
    );
  }

  late final _AudioNode_channelCount_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_channelCount>>(
          'AudioNode_channelCount');
  late final _dart_AudioNode_channelCount _AudioNode_channelCount =
      _AudioNode_channelCount_ptr.asFunction<_dart_AudioNode_channelCount>();

  void AudioNode_reset(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _AudioNode_reset(
      nodeId,
      context,
    );
  }

  late final _AudioNode_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_reset>>('AudioNode_reset');
  late final _dart_AudioNode_reset _AudioNode_reset =
      _AudioNode_reset_ptr.asFunction<_dart_AudioNode_reset>();

  ffi.Pointer<ffi.Int8> AudioNode_name(
    int nodeId,
  ) {
    return _AudioNode_name(
      nodeId,
    );
  }

  late final _AudioNode_name_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_name>>('AudioNode_name');
  late final _dart_AudioNode_name _AudioNode_name =
      _AudioNode_name_ptr.asFunction<_dart_AudioNode_name>();

  void releaseNode(
    int nodeId,
  ) {
    return _releaseNode(
      nodeId,
    );
  }

  late final _releaseNode_ptr =
      _lookup<ffi.NativeFunction<_c_releaseNode>>('releaseNode');
  late final _dart_releaseNode _releaseNode =
      _releaseNode_ptr.asFunction<_dart_releaseNode>();

  int hasNode(
    int nodeId,
  ) {
    return _hasNode(
      nodeId,
    );
  }

  late final _hasNode_ptr = _lookup<ffi.NativeFunction<_c_hasNode>>('hasNode');
  late final _dart_hasNode _hasNode = _hasNode_ptr.asFunction<_dart_hasNode>();

  /// AudioScheduledSourceNode
  int AudioScheduledSourceNode_isPlayingOrScheduled(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_isPlayingOrScheduled(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_isPlayingOrScheduled_ptr = _lookup<
          ffi.NativeFunction<_c_AudioScheduledSourceNode_isPlayingOrScheduled>>(
      'AudioScheduledSourceNode_isPlayingOrScheduled');
  late final _dart_AudioScheduledSourceNode_isPlayingOrScheduled
      _AudioScheduledSourceNode_isPlayingOrScheduled =
      _AudioScheduledSourceNode_isPlayingOrScheduled_ptr.asFunction<
          _dart_AudioScheduledSourceNode_isPlayingOrScheduled>();

  void AudioScheduledSourceNode_stop(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_stop(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_stop_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_stop>>(
          'AudioScheduledSourceNode_stop');
  late final _dart_AudioScheduledSourceNode_stop
      _AudioScheduledSourceNode_stop = _AudioScheduledSourceNode_stop_ptr
          .asFunction<_dart_AudioScheduledSourceNode_stop>();

  int AudioScheduledSourceNode_hasFinished(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_hasFinished(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_hasFinished_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_hasFinished>>(
          'AudioScheduledSourceNode_hasFinished');
  late final _dart_AudioScheduledSourceNode_hasFinished
      _AudioScheduledSourceNode_hasFinished =
      _AudioScheduledSourceNode_hasFinished_ptr.asFunction<
          _dart_AudioScheduledSourceNode_hasFinished>();

  int AudioScheduledSourceNode_startWhen(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_startWhen(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_startWhen_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_startWhen>>(
          'AudioScheduledSourceNode_startWhen');
  late final _dart_AudioScheduledSourceNode_startWhen
      _AudioScheduledSourceNode_startWhen =
      _AudioScheduledSourceNode_startWhen_ptr.asFunction<
          _dart_AudioScheduledSourceNode_startWhen>();

  void AudioScheduledSourceNode_start(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_start(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_start>>(
          'AudioScheduledSourceNode_start');
  late final _dart_AudioScheduledSourceNode_start
      _AudioScheduledSourceNode_start = _AudioScheduledSourceNode_start_ptr
          .asFunction<_dart_AudioScheduledSourceNode_start>();

  int AudioScheduledSourceNode_playbackState(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_playbackState(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_playbackState_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_playbackState>>(
          'AudioScheduledSourceNode_playbackState');
  late final _dart_AudioScheduledSourceNode_playbackState
      _AudioScheduledSourceNode_playbackState =
      _AudioScheduledSourceNode_playbackState_ptr.asFunction<
          _dart_AudioScheduledSourceNode_playbackState>();

  /// /////////////////////
  /// SampledAudioNode ///
  /// /////////////////////
  int createAudioSampleNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createAudioSampleNode(
      context,
    );
  }

  late final _createAudioSampleNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioSampleNode>>(
          'createAudioSampleNode');
  late final _dart_createAudioSampleNode _createAudioSampleNode =
      _createAudioSampleNode_ptr.asFunction<_dart_createAudioSampleNode>();

  void SampledAudioNode_setBus(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    int busIndex,
  ) {
    return _SampledAudioNode_setBus(
      nodeId,
      context,
      busIndex,
    );
  }

  late final _SampledAudioNode_setBus_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_setBus>>(
          'SampledAudioNode_setBus');
  late final _dart_SampledAudioNode_setBus _SampledAudioNode_setBus =
      _SampledAudioNode_setBus_ptr.asFunction<_dart_SampledAudioNode_setBus>();

  void SampledAudioNode_schedule(
    int nodeId,
    double when,
  ) {
    return _SampledAudioNode_schedule(
      nodeId,
      when,
    );
  }

  late final _SampledAudioNode_schedule_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule>>(
          'SampledAudioNode_schedule');
  late final _dart_SampledAudioNode_schedule _SampledAudioNode_schedule =
      _SampledAudioNode_schedule_ptr.asFunction<
          _dart_SampledAudioNode_schedule>();

  void SampledAudioNode_schedule2(
    int nodeId,
    double when,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule2(
      nodeId,
      when,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule2_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule2>>(
          'SampledAudioNode_schedule2');
  late final _dart_SampledAudioNode_schedule2 _SampledAudioNode_schedule2 =
      _SampledAudioNode_schedule2_ptr.asFunction<
          _dart_SampledAudioNode_schedule2>();

  void SampledAudioNode_schedule3(
    int nodeId,
    double when,
    double grainOffset,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule3(
      nodeId,
      when,
      grainOffset,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule3_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule3>>(
          'SampledAudioNode_schedule3');
  late final _dart_SampledAudioNode_schedule3 _SampledAudioNode_schedule3 =
      _SampledAudioNode_schedule3_ptr.asFunction<
          _dart_SampledAudioNode_schedule3>();

  void SampledAudioNode_schedule4(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule4(
      nodeId,
      when,
      grainOffset,
      grainDuration,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule4_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule4>>(
          'SampledAudioNode_schedule4');
  late final _dart_SampledAudioNode_schedule4 _SampledAudioNode_schedule4 =
      _SampledAudioNode_schedule4_ptr.asFunction<
          _dart_SampledAudioNode_schedule4>();

  void SampledAudioNode_clearSchedules(
    int nodeId,
  ) {
    return _SampledAudioNode_clearSchedules(
      nodeId,
    );
  }

  late final _SampledAudioNode_clearSchedules_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_clearSchedules>>(
          'SampledAudioNode_clearSchedules');
  late final _dart_SampledAudioNode_clearSchedules
      _SampledAudioNode_clearSchedules = _SampledAudioNode_clearSchedules_ptr
          .asFunction<_dart_SampledAudioNode_clearSchedules>();

  void SampledAudioNode_start(
    int nodeId,
    double when,
  ) {
    return _SampledAudioNode_start(
      nodeId,
      when,
    );
  }

  late final _SampledAudioNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start>>(
          'SampledAudioNode_start');
  late final _dart_SampledAudioNode_start _SampledAudioNode_start =
      _SampledAudioNode_start_ptr.asFunction<_dart_SampledAudioNode_start>();

  void SampledAudioNode_start2(
    int nodeId,
    double when,
    int loopCount,
  ) {
    return _SampledAudioNode_start2(
      nodeId,
      when,
      loopCount,
    );
  }

  late final _SampledAudioNode_start2_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start2>>(
          'SampledAudioNode_start2');
  late final _dart_SampledAudioNode_start2 _SampledAudioNode_start2 =
      _SampledAudioNode_start2_ptr.asFunction<_dart_SampledAudioNode_start2>();

  void SampledAudioNode_start3(
    int nodeId,
    double when,
    double grainOffset,
    int loopCount,
  ) {
    return _SampledAudioNode_start3(
      nodeId,
      when,
      grainOffset,
      loopCount,
    );
  }

  late final _SampledAudioNode_start3_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start3>>(
          'SampledAudioNode_start3');
  late final _dart_SampledAudioNode_start3 _SampledAudioNode_start3 =
      _SampledAudioNode_start3_ptr.asFunction<_dart_SampledAudioNode_start3>();

  void SampledAudioNode_start4(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
    int loopCount,
  ) {
    return _SampledAudioNode_start4(
      nodeId,
      when,
      grainOffset,
      grainDuration,
      loopCount,
    );
  }

  late final _SampledAudioNode_start4_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_start4>>(
          'SampledAudioNode_start4');
  late final _dart_SampledAudioNode_start4 _SampledAudioNode_start4 =
      _SampledAudioNode_start4_ptr.asFunction<_dart_SampledAudioNode_start4>();

  int SampledAudioNode_getCursor(
    int index,
  ) {
    return _SampledAudioNode_getCursor(
      index,
    );
  }

  late final _SampledAudioNode_getCursor_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_getCursor>>(
          'SampledAudioNode_getCursor');
  late final _dart_SampledAudioNode_getCursor _SampledAudioNode_getCursor =
      _SampledAudioNode_getCursor_ptr.asFunction<
          _dart_SampledAudioNode_getCursor>();

  int SampledAudioNode_playbackRate(
    int index,
  ) {
    return _SampledAudioNode_playbackRate(
      index,
    );
  }

  late final _SampledAudioNode_playbackRate_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_playbackRate>>(
          'SampledAudioNode_playbackRate');
  late final _dart_SampledAudioNode_playbackRate
      _SampledAudioNode_playbackRate = _SampledAudioNode_playbackRate_ptr
          .asFunction<_dart_SampledAudioNode_playbackRate>();

  int SampledAudioNode_detune(
    int index,
  ) {
    return _SampledAudioNode_detune(
      index,
    );
  }

  late final _SampledAudioNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_detune>>(
          'SampledAudioNode_detune');
  late final _dart_SampledAudioNode_detune _SampledAudioNode_detune =
      _SampledAudioNode_detune_ptr.asFunction<_dart_SampledAudioNode_detune>();

  /// /////////////
  /// AudioBus ///
  /// /////////////
  int makeBusFromFile(
    ffi.Pointer<ffi.Int8> file,
    int mixToMono,
    double targetSampleRate,
  ) {
    return _makeBusFromFile(
      file,
      mixToMono,
      targetSampleRate,
    );
  }

  late final _makeBusFromFile_ptr =
      _lookup<ffi.NativeFunction<_c_makeBusFromFile>>('makeBusFromFile');
  late final _dart_makeBusFromFile _makeBusFromFile =
      _makeBusFromFile_ptr.asFunction<_dart_makeBusFromFile>();

  int makeBusFromMemory(
    ffi.Pointer<ffi.Uint8> buffer,
    int bufferLen,
    ffi.Pointer<ffi.Int8> extension_1,
    int mixToMono,
  ) {
    return _makeBusFromMemory(
      buffer,
      bufferLen,
      extension_1,
      mixToMono,
    );
  }

  late final _makeBusFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_makeBusFromMemory>>('makeBusFromMemory');
  late final _dart_makeBusFromMemory _makeBusFromMemory =
      _makeBusFromMemory_ptr.asFunction<_dart_makeBusFromMemory>();

  int audioBusHasCheck(
    int busId,
  ) {
    return _audioBusHasCheck(
      busId,
    );
  }

  late final _audioBusHasCheck_ptr =
      _lookup<ffi.NativeFunction<_c_audioBusHasCheck>>('audioBusHasCheck');
  late final _dart_audioBusHasCheck _audioBusHasCheck =
      _audioBusHasCheck_ptr.asFunction<_dart_audioBusHasCheck>();

  int AudioBus_numberOfChannels(
    int busIndex,
  ) {
    return _AudioBus_numberOfChannels(
      busIndex,
    );
  }

  late final _AudioBus_numberOfChannels_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_numberOfChannels>>(
          'AudioBus_numberOfChannels');
  late final _dart_AudioBus_numberOfChannels _AudioBus_numberOfChannels =
      _AudioBus_numberOfChannels_ptr.asFunction<
          _dart_AudioBus_numberOfChannels>();

  int AudioBus_length(
    int busIndex,
  ) {
    return _AudioBus_length(
      busIndex,
    );
  }

  late final _AudioBus_length_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_length>>('AudioBus_length');
  late final _dart_AudioBus_length _AudioBus_length =
      _AudioBus_length_ptr.asFunction<_dart_AudioBus_length>();

  double AudioBus_sampleRate(
    int busIndex,
  ) {
    return _AudioBus_sampleRate(
      busIndex,
    );
  }

  late final _AudioBus_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_sampleRate>>(
          'AudioBus_sampleRate');
  late final _dart_AudioBus_sampleRate _AudioBus_sampleRate =
      _AudioBus_sampleRate_ptr.asFunction<_dart_AudioBus_sampleRate>();

  void AudioBus_setSampleRate(
    int busIndex,
    double sampleRate,
  ) {
    return _AudioBus_setSampleRate(
      busIndex,
      sampleRate,
    );
  }

  late final _AudioBus_setSampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_setSampleRate>>(
          'AudioBus_setSampleRate');
  late final _dart_AudioBus_setSampleRate _AudioBus_setSampleRate =
      _AudioBus_setSampleRate_ptr.asFunction<_dart_AudioBus_setSampleRate>();

  void AudioBus_zero(
    int busIndex,
  ) {
    return _AudioBus_zero(
      busIndex,
    );
  }

  late final _AudioBus_zero_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_zero>>('AudioBus_zero');
  late final _dart_AudioBus_zero _AudioBus_zero =
      _AudioBus_zero_ptr.asFunction<_dart_AudioBus_zero>();

  void AudioBus_clearSilentFlag(
    int busIndex,
  ) {
    return _AudioBus_clearSilentFlag(
      busIndex,
    );
  }

  late final _AudioBus_clearSilentFlag_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_clearSilentFlag>>(
          'AudioBus_clearSilentFlag');
  late final _dart_AudioBus_clearSilentFlag _AudioBus_clearSilentFlag =
      _AudioBus_clearSilentFlag_ptr.asFunction<
          _dart_AudioBus_clearSilentFlag>();

  void AudioBus_scale(
    int busIndex,
    double scale,
  ) {
    return _AudioBus_scale(
      busIndex,
      scale,
    );
  }

  late final _AudioBus_scale_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_scale>>('AudioBus_scale');
  late final _dart_AudioBus_scale _AudioBus_scale =
      _AudioBus_scale_ptr.asFunction<_dart_AudioBus_scale>();

  void AudioBus_reset(
    int busIndex,
  ) {
    return _AudioBus_reset(
      busIndex,
    );
  }

  late final _AudioBus_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_reset>>('AudioBus_reset');
  late final _dart_AudioBus_reset _AudioBus_reset =
      _AudioBus_reset_ptr.asFunction<_dart_AudioBus_reset>();

  int AudioBus_isSilent(
    int busIndex,
  ) {
    return _AudioBus_isSilent(
      busIndex,
    );
  }

  late final _AudioBus_isSilent_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isSilent>>('AudioBus_isSilent');
  late final _dart_AudioBus_isSilent _AudioBus_isSilent =
      _AudioBus_isSilent_ptr.asFunction<_dart_AudioBus_isSilent>();

  int AudioBus_isFirstTime(
    int busIndex,
  ) {
    return _AudioBus_isFirstTime(
      busIndex,
    );
  }

  late final _AudioBus_isFirstTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isFirstTime>>(
          'AudioBus_isFirstTime');
  late final _dart_AudioBus_isFirstTime _AudioBus_isFirstTime =
      _AudioBus_isFirstTime_ptr.asFunction<_dart_AudioBus_isFirstTime>();

  void releaseAudioBus(
    int index,
  ) {
    return _releaseAudioBus(
      index,
    );
  }

  late final _releaseAudioBus_ptr =
      _lookup<ffi.NativeFunction<_c_releaseAudioBus>>('releaseAudioBus');
  late final _dart_releaseAudioBus _releaseAudioBus =
      _releaseAudioBus_ptr.asFunction<_dart_releaseAudioBus>();

  /// /////////////
  /// GainNode ///
  /// /////////////
  int createGain(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createGain(
      context,
    );
  }

  late final _createGain_ptr =
      _lookup<ffi.NativeFunction<_c_createGain>>('createGain');
  late final _dart_createGain _createGain =
      _createGain_ptr.asFunction<_dart_createGain>();

  int GainNode_gain(
    int nodeId,
  ) {
    return _GainNode_gain(
      nodeId,
    );
  }

  late final _GainNode_gain_ptr =
      _lookup<ffi.NativeFunction<_c_GainNode_gain>>('GainNode_gain');
  late final _dart_GainNode_gain _GainNode_gain =
      _GainNode_gain_ptr.asFunction<_dart_GainNode_gain>();

  /// /////////////////
  /// RecorderNode ///
  /// /////////////////
  int createRecorderNode(
    ffi.Pointer<ffi.Void> context,
    int channelCount,
  ) {
    return _createRecorderNode(
      context,
      channelCount,
    );
  }

  late final _createRecorderNode_ptr =
      _lookup<ffi.NativeFunction<_c_createRecorderNode>>('createRecorderNode');
  late final _dart_createRecorderNode _createRecorderNode =
      _createRecorderNode_ptr.asFunction<_dart_createRecorderNode>();

  int createRecorderNodeByConfig(
    ffi.Pointer<ffi.Void> context,
    AudioStreamConfig outputConfig,
  ) {
    return _createRecorderNodeByConfig(
      context,
      outputConfig,
    );
  }

  late final _createRecorderNodeByConfig_ptr =
      _lookup<ffi.NativeFunction<_c_createRecorderNodeByConfig>>(
          'createRecorderNodeByConfig');
  late final _dart_createRecorderNodeByConfig _createRecorderNodeByConfig =
      _createRecorderNodeByConfig_ptr
          .asFunction<_dart_createRecorderNodeByConfig>();

  void RecorderNode_startRecording(
    int nodeId,
  ) {
    return _RecorderNode_startRecording(
      nodeId,
    );
  }

  late final _RecorderNode_startRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_startRecording>>(
          'RecorderNode_startRecording');
  late final _dart_RecorderNode_startRecording _RecorderNode_startRecording =
      _RecorderNode_startRecording_ptr.asFunction<
          _dart_RecorderNode_startRecording>();

  void RecorderNode_stopRecording(
    int nodeId,
  ) {
    return _RecorderNode_stopRecording(
      nodeId,
    );
  }

  late final _RecorderNode_stopRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_stopRecording>>(
          'RecorderNode_stopRecording');
  late final _dart_RecorderNode_stopRecording _RecorderNode_stopRecording =
      _RecorderNode_stopRecording_ptr.asFunction<
          _dart_RecorderNode_stopRecording>();

  double RecorderNode_recordedLengthInSeconds(
    int nodeId,
  ) {
    return _RecorderNode_recordedLengthInSeconds(
      nodeId,
    );
  }

  late final _RecorderNode_recordedLengthInSeconds_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_recordedLengthInSeconds>>(
          'RecorderNode_recordedLengthInSeconds');
  late final _dart_RecorderNode_recordedLengthInSeconds
      _RecorderNode_recordedLengthInSeconds =
      _RecorderNode_recordedLengthInSeconds_ptr.asFunction<
          _dart_RecorderNode_recordedLengthInSeconds>();

  int RecorderNode_createBusFromRecording(
    int nodeId,
    int mixToMono,
  ) {
    return _RecorderNode_createBusFromRecording(
      nodeId,
      mixToMono,
    );
  }

  late final _RecorderNode_createBusFromRecording_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_createBusFromRecording>>(
          'RecorderNode_createBusFromRecording');
  late final _dart_RecorderNode_createBusFromRecording
      _RecorderNode_createBusFromRecording =
      _RecorderNode_createBusFromRecording_ptr.asFunction<
          _dart_RecorderNode_createBusFromRecording>();

  int RecorderNode_writeRecordingToWav(
    int nodeId,
    ffi.Pointer<ffi.Int8> file,
    int mixToMono,
  ) {
    return _RecorderNode_writeRecordingToWav(
      nodeId,
      file,
      mixToMono,
    );
  }

  late final _RecorderNode_writeRecordingToWav_ptr =
      _lookup<ffi.NativeFunction<_c_RecorderNode_writeRecordingToWav>>(
          'RecorderNode_writeRecordingToWav');
  late final _dart_RecorderNode_writeRecordingToWav
      _RecorderNode_writeRecordingToWav = _RecorderNode_writeRecordingToWav_ptr
          .asFunction<_dart_RecorderNode_writeRecordingToWav>();

  /// /////////////////
  /// AnalyserNode ///
  /// /////////////////
  int createAnalyserNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createAnalyserNode(
      context,
    );
  }

  late final _createAnalyserNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNode>>('createAnalyserNode');
  late final _dart_createAnalyserNode _createAnalyserNode =
      _createAnalyserNode_ptr.asFunction<_dart_createAnalyserNode>();

  int createAnalyserNodeFftSize(
    ffi.Pointer<ffi.Void> context,
    int fftSize,
  ) {
    return _createAnalyserNodeFftSize(
      context,
      fftSize,
    );
  }

  late final _createAnalyserNodeFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNodeFftSize>>(
          'createAnalyserNodeFftSize');
  late final _dart_createAnalyserNodeFftSize _createAnalyserNodeFftSize =
      _createAnalyserNodeFftSize_ptr
          .asFunction<_dart_createAnalyserNodeFftSize>();

  void AnalyserNode_setFftSize(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    int fftSize,
  ) {
    return _AnalyserNode_setFftSize(
      nodeId,
      context,
      fftSize,
    );
  }

  late final _AnalyserNode_setFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setFftSize>>(
          'AnalyserNode_setFftSize');
  late final _dart_AnalyserNode_setFftSize _AnalyserNode_setFftSize =
      _AnalyserNode_setFftSize_ptr.asFunction<_dart_AnalyserNode_setFftSize>();

  int AnalyserNode_fftSize(
    int nodeId,
  ) {
    return _AnalyserNode_fftSize(
      nodeId,
    );
  }

  late final _AnalyserNode_fftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_fftSize>>(
          'AnalyserNode_fftSize');
  late final _dart_AnalyserNode_fftSize _AnalyserNode_fftSize =
      _AnalyserNode_fftSize_ptr.asFunction<_dart_AnalyserNode_fftSize>();

  int AnalyserNode_frequencyBinCount(
    int nodeId,
  ) {
    return _AnalyserNode_frequencyBinCount(
      nodeId,
    );
  }

  late final _AnalyserNode_frequencyBinCount_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_frequencyBinCount>>(
          'AnalyserNode_frequencyBinCount');
  late final _dart_AnalyserNode_frequencyBinCount
      _AnalyserNode_frequencyBinCount = _AnalyserNode_frequencyBinCount_ptr
          .asFunction<_dart_AnalyserNode_frequencyBinCount>();

  void AnalyserNode_setMinDecibels(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setMinDecibels(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setMinDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMinDecibels>>(
          'AnalyserNode_setMinDecibels');
  late final _dart_AnalyserNode_setMinDecibels _AnalyserNode_setMinDecibels =
      _AnalyserNode_setMinDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMinDecibels>();

  int AnalyserNode_minDecibels(
    int nodeId,
  ) {
    return _AnalyserNode_minDecibels(
      nodeId,
    );
  }

  late final _AnalyserNode_minDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_minDecibels>>(
          'AnalyserNode_minDecibels');
  late final _dart_AnalyserNode_minDecibels _AnalyserNode_minDecibels =
      _AnalyserNode_minDecibels_ptr.asFunction<
          _dart_AnalyserNode_minDecibels>();

  void AnalyserNode_setMaxDecibels(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setMaxDecibels(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setMaxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMaxDecibels>>(
          'AnalyserNode_setMaxDecibels');
  late final _dart_AnalyserNode_setMaxDecibels _AnalyserNode_setMaxDecibels =
      _AnalyserNode_setMaxDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMaxDecibels>();

  int AnalyserNode_maxDecibels(
    int nodeId,
  ) {
    return _AnalyserNode_maxDecibels(
      nodeId,
    );
  }

  late final _AnalyserNode_maxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_maxDecibels>>(
          'AnalyserNode_maxDecibels');
  late final _dart_AnalyserNode_maxDecibels _AnalyserNode_maxDecibels =
      _AnalyserNode_maxDecibels_ptr.asFunction<
          _dart_AnalyserNode_maxDecibels>();

  void AnalyserNode_setSmoothingTimeConstant(
    int nodeId,
    double k,
  ) {
    return _AnalyserNode_setSmoothingTimeConstant(
      nodeId,
      k,
    );
  }

  late final _AnalyserNode_setSmoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setSmoothingTimeConstant>>(
          'AnalyserNode_setSmoothingTimeConstant');
  late final _dart_AnalyserNode_setSmoothingTimeConstant
      _AnalyserNode_setSmoothingTimeConstant =
      _AnalyserNode_setSmoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_setSmoothingTimeConstant>();

  int AnalyserNode_smoothingTimeConstant(
    int nodeId,
  ) {
    return _AnalyserNode_smoothingTimeConstant(
      nodeId,
    );
  }

  late final _AnalyserNode_smoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_smoothingTimeConstant>>(
          'AnalyserNode_smoothingTimeConstant');
  late final _dart_AnalyserNode_smoothingTimeConstant
      _AnalyserNode_smoothingTimeConstant =
      _AnalyserNode_smoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_smoothingTimeConstant>();

  void AnalyserNode_getFloatFrequencyData(
    int nodeId,
    ffi.Pointer<ffi.Float> array,
  ) {
    return _AnalyserNode_getFloatFrequencyData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getFloatFrequencyData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getFloatFrequencyData>>(
          'AnalyserNode_getFloatFrequencyData');
  late final _dart_AnalyserNode_getFloatFrequencyData
      _AnalyserNode_getFloatFrequencyData =
      _AnalyserNode_getFloatFrequencyData_ptr.asFunction<
          _dart_AnalyserNode_getFloatFrequencyData>();

  void AnalyserNode_getByteFrequencyData(
    int nodeId,
    ffi.Pointer<ffi.Uint8> array,
    int resample,
  ) {
    return _AnalyserNode_getByteFrequencyData(
      nodeId,
      array,
      resample,
    );
  }

  late final _AnalyserNode_getByteFrequencyData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getByteFrequencyData>>(
          'AnalyserNode_getByteFrequencyData');
  late final _dart_AnalyserNode_getByteFrequencyData
      _AnalyserNode_getByteFrequencyData =
      _AnalyserNode_getByteFrequencyData_ptr.asFunction<
          _dart_AnalyserNode_getByteFrequencyData>();

  void AnalyserNode_getFloatTimeDomainData(
    int nodeId,
    ffi.Pointer<ffi.Float> array,
  ) {
    return _AnalyserNode_getFloatTimeDomainData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getFloatTimeDomainData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getFloatTimeDomainData>>(
          'AnalyserNode_getFloatTimeDomainData');
  late final _dart_AnalyserNode_getFloatTimeDomainData
      _AnalyserNode_getFloatTimeDomainData =
      _AnalyserNode_getFloatTimeDomainData_ptr.asFunction<
          _dart_AnalyserNode_getFloatTimeDomainData>();

  void AnalyserNode_getByteTimeDomainData(
    int nodeId,
    ffi.Pointer<ffi.Uint8> array,
  ) {
    return _AnalyserNode_getByteTimeDomainData(
      nodeId,
      array,
    );
  }

  late final _AnalyserNode_getByteTimeDomainData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getByteTimeDomainData>>(
          'AnalyserNode_getByteTimeDomainData');
  late final _dart_AnalyserNode_getByteTimeDomainData
      _AnalyserNode_getByteTimeDomainData =
      _AnalyserNode_getByteTimeDomainData_ptr.asFunction<
          _dart_AnalyserNode_getByteTimeDomainData>();

  /// ///////////////////
  /// OscillatorNode ///
  /// ///////////////////
  int createOscillatorNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createOscillatorNode(
      context,
    );
  }

  late final _createOscillatorNode_ptr =
      _lookup<ffi.NativeFunction<_c_createOscillatorNode>>(
          'createOscillatorNode');
  late final _dart_createOscillatorNode _createOscillatorNode =
      _createOscillatorNode_ptr.asFunction<_dart_createOscillatorNode>();

  int OscillatorNode_type(
    int nodeId,
  ) {
    return _OscillatorNode_type(
      nodeId,
    );
  }

  late final _OscillatorNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_type>>(
          'OscillatorNode_type');
  late final _dart_OscillatorNode_type _OscillatorNode_type =
      _OscillatorNode_type_ptr.asFunction<_dart_OscillatorNode_type>();

  void OscillatorNode_setType(
    int nodeId,
    int type,
  ) {
    return _OscillatorNode_setType(
      nodeId,
      type,
    );
  }

  late final _OscillatorNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_setType>>(
          'OscillatorNode_setType');
  late final _dart_OscillatorNode_setType _OscillatorNode_setType =
      _OscillatorNode_setType_ptr.asFunction<_dart_OscillatorNode_setType>();

  int OscillatorNode_amplitude(
    int nodeId,
  ) {
    return _OscillatorNode_amplitude(
      nodeId,
    );
  }

  late final _OscillatorNode_amplitude_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_amplitude>>(
          'OscillatorNode_amplitude');
  late final _dart_OscillatorNode_amplitude _OscillatorNode_amplitude =
      _OscillatorNode_amplitude_ptr.asFunction<
          _dart_OscillatorNode_amplitude>();

  int OscillatorNode_frequency(
    int nodeId,
  ) {
    return _OscillatorNode_frequency(
      nodeId,
    );
  }

  late final _OscillatorNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_frequency>>(
          'OscillatorNode_frequency');
  late final _dart_OscillatorNode_frequency _OscillatorNode_frequency =
      _OscillatorNode_frequency_ptr.asFunction<
          _dart_OscillatorNode_frequency>();

  int OscillatorNode_bias(
    int nodeId,
  ) {
    return _OscillatorNode_bias(
      nodeId,
    );
  }

  late final _OscillatorNode_bias_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_bias>>(
          'OscillatorNode_bias');
  late final _dart_OscillatorNode_bias _OscillatorNode_bias =
      _OscillatorNode_bias_ptr.asFunction<_dart_OscillatorNode_bias>();

  int OscillatorNode_detune(
    int nodeId,
  ) {
    return _OscillatorNode_detune(
      nodeId,
    );
  }

  late final _OscillatorNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_OscillatorNode_detune>>(
          'OscillatorNode_detune');
  late final _dart_OscillatorNode_detune _OscillatorNode_detune =
      _OscillatorNode_detune_ptr.asFunction<_dart_OscillatorNode_detune>();

  /// BiquadFilterNode
  int createBiquadFilterNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createBiquadFilterNode(
      context,
    );
  }

  late final _createBiquadFilterNode_ptr =
      _lookup<ffi.NativeFunction<_c_createBiquadFilterNode>>(
          'createBiquadFilterNode');
  late final _dart_createBiquadFilterNode _createBiquadFilterNode =
      _createBiquadFilterNode_ptr.asFunction<_dart_createBiquadFilterNode>();

  int BiquadFilterNode_type(
    int nodeId,
  ) {
    return _BiquadFilterNode_type(
      nodeId,
    );
  }

  late final _BiquadFilterNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_type>>(
          'BiquadFilterNode_type');
  late final _dart_BiquadFilterNode_type _BiquadFilterNode_type =
      _BiquadFilterNode_type_ptr.asFunction<_dart_BiquadFilterNode_type>();

  void BiquadFilterNode_setType(
    int nodeId,
    int type,
  ) {
    return _BiquadFilterNode_setType(
      nodeId,
      type,
    );
  }

  late final _BiquadFilterNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_setType>>(
          'BiquadFilterNode_setType');
  late final _dart_BiquadFilterNode_setType _BiquadFilterNode_setType =
      _BiquadFilterNode_setType_ptr.asFunction<
          _dart_BiquadFilterNode_setType>();

  int BiquadFilterNode_frequency(
    int nodeId,
  ) {
    return _BiquadFilterNode_frequency(
      nodeId,
    );
  }

  late final _BiquadFilterNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_frequency>>(
          'BiquadFilterNode_frequency');
  late final _dart_BiquadFilterNode_frequency _BiquadFilterNode_frequency =
      _BiquadFilterNode_frequency_ptr.asFunction<
          _dart_BiquadFilterNode_frequency>();

  int BiquadFilterNode_q(
    int nodeId,
  ) {
    return _BiquadFilterNode_q(
      nodeId,
    );
  }

  late final _BiquadFilterNode_q_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_q>>('BiquadFilterNode_q');
  late final _dart_BiquadFilterNode_q _BiquadFilterNode_q =
      _BiquadFilterNode_q_ptr.asFunction<_dart_BiquadFilterNode_q>();

  int BiquadFilterNode_gain(
    int nodeId,
  ) {
    return _BiquadFilterNode_gain(
      nodeId,
    );
  }

  late final _BiquadFilterNode_gain_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_gain>>(
          'BiquadFilterNode_gain');
  late final _dart_BiquadFilterNode_gain _BiquadFilterNode_gain =
      _BiquadFilterNode_gain_ptr.asFunction<_dart_BiquadFilterNode_gain>();

  int BiquadFilterNode_detune(
    int nodeId,
  ) {
    return _BiquadFilterNode_detune(
      nodeId,
    );
  }

  late final _BiquadFilterNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_BiquadFilterNode_detune>>(
          'BiquadFilterNode_detune');
  late final _dart_BiquadFilterNode_detune _BiquadFilterNode_detune =
      _BiquadFilterNode_detune_ptr.asFunction<_dart_BiquadFilterNode_detune>();

  /// ///////////////
  /// PannerNode ///
  /// ///////////////
  int createPannerNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createPannerNode(
      context,
    );
  }

  late final _createPannerNode_ptr =
      _lookup<ffi.NativeFunction<_c_createPannerNode>>('createPannerNode');
  late final _dart_createPannerNode _createPannerNode =
      _createPannerNode_ptr.asFunction<_dart_createPannerNode>();

  int PannerNode_panningModel(
    int nodeId,
  ) {
    return _PannerNode_panningModel(
      nodeId,
    );
  }

  late final _PannerNode_panningModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_panningModel>>(
          'PannerNode_panningModel');
  late final _dart_PannerNode_panningModel _PannerNode_panningModel =
      _PannerNode_panningModel_ptr.asFunction<_dart_PannerNode_panningModel>();

  void PannerNode_setPanningModel(
    int nodeId,
    int m,
  ) {
    return _PannerNode_setPanningModel(
      nodeId,
      m,
    );
  }

  late final _PannerNode_setPanningModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setPanningModel>>(
          'PannerNode_setPanningModel');
  late final _dart_PannerNode_setPanningModel _PannerNode_setPanningModel =
      _PannerNode_setPanningModel_ptr.asFunction<
          _dart_PannerNode_setPanningModel>();

  int PannerNode_distanceModel(
    int nodeId,
  ) {
    return _PannerNode_distanceModel(
      nodeId,
    );
  }

  late final _PannerNode_distanceModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_distanceModel>>(
          'PannerNode_distanceModel');
  late final _dart_PannerNode_distanceModel _PannerNode_distanceModel =
      _PannerNode_distanceModel_ptr.asFunction<
          _dart_PannerNode_distanceModel>();

  void PannerNode_setDistanceModel(
    int nodeId,
    int m,
  ) {
    return _PannerNode_setDistanceModel(
      nodeId,
      m,
    );
  }

  late final _PannerNode_setDistanceModel_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setDistanceModel>>(
          'PannerNode_setDistanceModel');
  late final _dart_PannerNode_setDistanceModel _PannerNode_setDistanceModel =
      _PannerNode_setDistanceModel_ptr.asFunction<
          _dart_PannerNode_setDistanceModel>();

  void PannerNode_setPosition(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setPosition(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setPosition_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setPosition>>(
          'PannerNode_setPosition');
  late final _dart_PannerNode_setPosition _PannerNode_setPosition =
      _PannerNode_setPosition_ptr.asFunction<_dart_PannerNode_setPosition>();

  int PannerNode_positionX(
    int nodeId,
  ) {
    return _PannerNode_positionX(
      nodeId,
    );
  }

  late final _PannerNode_positionX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionX>>(
          'PannerNode_positionX');
  late final _dart_PannerNode_positionX _PannerNode_positionX =
      _PannerNode_positionX_ptr.asFunction<_dart_PannerNode_positionX>();

  int PannerNode_positionY(
    int nodeId,
  ) {
    return _PannerNode_positionY(
      nodeId,
    );
  }

  late final _PannerNode_positionY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionY>>(
          'PannerNode_positionY');
  late final _dart_PannerNode_positionY _PannerNode_positionY =
      _PannerNode_positionY_ptr.asFunction<_dart_PannerNode_positionY>();

  int PannerNode_positionZ(
    int nodeId,
  ) {
    return _PannerNode_positionZ(
      nodeId,
    );
  }

  late final _PannerNode_positionZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_positionZ>>(
          'PannerNode_positionZ');
  late final _dart_PannerNode_positionZ _PannerNode_positionZ =
      _PannerNode_positionZ_ptr.asFunction<_dart_PannerNode_positionZ>();

  void PannerNode_setOrientation(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setOrientation(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setOrientation_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setOrientation>>(
          'PannerNode_setOrientation');
  late final _dart_PannerNode_setOrientation _PannerNode_setOrientation =
      _PannerNode_setOrientation_ptr.asFunction<
          _dart_PannerNode_setOrientation>();

  int PannerNode_orientationX(
    int nodeId,
  ) {
    return _PannerNode_orientationX(
      nodeId,
    );
  }

  late final _PannerNode_orientationX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationX>>(
          'PannerNode_orientationX');
  late final _dart_PannerNode_orientationX _PannerNode_orientationX =
      _PannerNode_orientationX_ptr.asFunction<_dart_PannerNode_orientationX>();

  int PannerNode_orientationY(
    int nodeId,
  ) {
    return _PannerNode_orientationY(
      nodeId,
    );
  }

  late final _PannerNode_orientationY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationY>>(
          'PannerNode_orientationY');
  late final _dart_PannerNode_orientationY _PannerNode_orientationY =
      _PannerNode_orientationY_ptr.asFunction<_dart_PannerNode_orientationY>();

  int PannerNode_orientationZ(
    int nodeId,
  ) {
    return _PannerNode_orientationZ(
      nodeId,
    );
  }

  late final _PannerNode_orientationZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_orientationZ>>(
          'PannerNode_orientationZ');
  late final _dart_PannerNode_orientationZ _PannerNode_orientationZ =
      _PannerNode_orientationZ_ptr.asFunction<_dart_PannerNode_orientationZ>();

  void PannerNode_setVelocity(
    int nodeId,
    double x,
    double y,
    double z,
  ) {
    return _PannerNode_setVelocity(
      nodeId,
      x,
      y,
      z,
    );
  }

  late final _PannerNode_setVelocity_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setVelocity>>(
          'PannerNode_setVelocity');
  late final _dart_PannerNode_setVelocity _PannerNode_setVelocity =
      _PannerNode_setVelocity_ptr.asFunction<_dart_PannerNode_setVelocity>();

  int PannerNode_velocityX(
    int nodeId,
  ) {
    return _PannerNode_velocityX(
      nodeId,
    );
  }

  late final _PannerNode_velocityX_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityX>>(
          'PannerNode_velocityX');
  late final _dart_PannerNode_velocityX _PannerNode_velocityX =
      _PannerNode_velocityX_ptr.asFunction<_dart_PannerNode_velocityX>();

  int PannerNode_velocityY(
    int nodeId,
  ) {
    return _PannerNode_velocityY(
      nodeId,
    );
  }

  late final _PannerNode_velocityY_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityY>>(
          'PannerNode_velocityY');
  late final _dart_PannerNode_velocityY _PannerNode_velocityY =
      _PannerNode_velocityY_ptr.asFunction<_dart_PannerNode_velocityY>();

  int PannerNode_velocityZ(
    int nodeId,
  ) {
    return _PannerNode_velocityZ(
      nodeId,
    );
  }

  late final _PannerNode_velocityZ_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_velocityZ>>(
          'PannerNode_velocityZ');
  late final _dart_PannerNode_velocityZ _PannerNode_velocityZ =
      _PannerNode_velocityZ_ptr.asFunction<_dart_PannerNode_velocityZ>();

  int PannerNode_distanceGain(
    int nodeId,
  ) {
    return _PannerNode_distanceGain(
      nodeId,
    );
  }

  late final _PannerNode_distanceGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_distanceGain>>(
          'PannerNode_distanceGain');
  late final _dart_PannerNode_distanceGain _PannerNode_distanceGain =
      _PannerNode_distanceGain_ptr.asFunction<_dart_PannerNode_distanceGain>();

  int PannerNode_coneGain(
    int nodeId,
  ) {
    return _PannerNode_coneGain(
      nodeId,
    );
  }

  late final _PannerNode_coneGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneGain>>(
          'PannerNode_coneGain');
  late final _dart_PannerNode_coneGain _PannerNode_coneGain =
      _PannerNode_coneGain_ptr.asFunction<_dart_PannerNode_coneGain>();

  double PannerNode_refDistance(
    int nodeId,
  ) {
    return _PannerNode_refDistance(
      nodeId,
    );
  }

  late final _PannerNode_refDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_refDistance>>(
          'PannerNode_refDistance');
  late final _dart_PannerNode_refDistance _PannerNode_refDistance =
      _PannerNode_refDistance_ptr.asFunction<_dart_PannerNode_refDistance>();

  void PannerNode_setRefDistance(
    int nodeId,
    double refDistance,
  ) {
    return _PannerNode_setRefDistance(
      nodeId,
      refDistance,
    );
  }

  late final _PannerNode_setRefDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setRefDistance>>(
          'PannerNode_setRefDistance');
  late final _dart_PannerNode_setRefDistance _PannerNode_setRefDistance =
      _PannerNode_setRefDistance_ptr.asFunction<
          _dart_PannerNode_setRefDistance>();

  double PannerNode_maxDistance(
    int nodeId,
  ) {
    return _PannerNode_maxDistance(
      nodeId,
    );
  }

  late final _PannerNode_maxDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_maxDistance>>(
          'PannerNode_maxDistance');
  late final _dart_PannerNode_maxDistance _PannerNode_maxDistance =
      _PannerNode_maxDistance_ptr.asFunction<_dart_PannerNode_maxDistance>();

  void PannerNode_setMaxDistance(
    int nodeId,
    double maxDistance,
  ) {
    return _PannerNode_setMaxDistance(
      nodeId,
      maxDistance,
    );
  }

  late final _PannerNode_setMaxDistance_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setMaxDistance>>(
          'PannerNode_setMaxDistance');
  late final _dart_PannerNode_setMaxDistance _PannerNode_setMaxDistance =
      _PannerNode_setMaxDistance_ptr.asFunction<
          _dart_PannerNode_setMaxDistance>();

  double PannerNode_rolloffFactor(
    int nodeId,
  ) {
    return _PannerNode_rolloffFactor(
      nodeId,
    );
  }

  late final _PannerNode_rolloffFactor_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_rolloffFactor>>(
          'PannerNode_rolloffFactor');
  late final _dart_PannerNode_rolloffFactor _PannerNode_rolloffFactor =
      _PannerNode_rolloffFactor_ptr.asFunction<
          _dart_PannerNode_rolloffFactor>();

  void PannerNode_setRolloffFactor(
    int nodeId,
    double rolloffFactor,
  ) {
    return _PannerNode_setRolloffFactor(
      nodeId,
      rolloffFactor,
    );
  }

  late final _PannerNode_setRolloffFactor_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setRolloffFactor>>(
          'PannerNode_setRolloffFactor');
  late final _dart_PannerNode_setRolloffFactor _PannerNode_setRolloffFactor =
      _PannerNode_setRolloffFactor_ptr.asFunction<
          _dart_PannerNode_setRolloffFactor>();

  double PannerNode_coneInnerAngle(
    int nodeId,
  ) {
    return _PannerNode_coneInnerAngle(
      nodeId,
    );
  }

  late final _PannerNode_coneInnerAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneInnerAngle>>(
          'PannerNode_coneInnerAngle');
  late final _dart_PannerNode_coneInnerAngle _PannerNode_coneInnerAngle =
      _PannerNode_coneInnerAngle_ptr.asFunction<
          _dart_PannerNode_coneInnerAngle>();

  void PannerNode_setConeInnerAngle(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeInnerAngle(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeInnerAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeInnerAngle>>(
          'PannerNode_setConeInnerAngle');
  late final _dart_PannerNode_setConeInnerAngle _PannerNode_setConeInnerAngle =
      _PannerNode_setConeInnerAngle_ptr.asFunction<
          _dart_PannerNode_setConeInnerAngle>();

  double PannerNode_coneOuterAngle(
    int nodeId,
  ) {
    return _PannerNode_coneOuterAngle(
      nodeId,
    );
  }

  late final _PannerNode_coneOuterAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneOuterAngle>>(
          'PannerNode_coneOuterAngle');
  late final _dart_PannerNode_coneOuterAngle _PannerNode_coneOuterAngle =
      _PannerNode_coneOuterAngle_ptr.asFunction<
          _dart_PannerNode_coneOuterAngle>();

  void PannerNode_setConeOuterAngle(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeOuterAngle(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeOuterAngle_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeOuterAngle>>(
          'PannerNode_setConeOuterAngle');
  late final _dart_PannerNode_setConeOuterAngle _PannerNode_setConeOuterAngle =
      _PannerNode_setConeOuterAngle_ptr.asFunction<
          _dart_PannerNode_setConeOuterAngle>();

  double PannerNode_coneOuterGain(
    int nodeId,
  ) {
    return _PannerNode_coneOuterGain(
      nodeId,
    );
  }

  late final _PannerNode_coneOuterGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_coneOuterGain>>(
          'PannerNode_coneOuterGain');
  late final _dart_PannerNode_coneOuterGain _PannerNode_coneOuterGain =
      _PannerNode_coneOuterGain_ptr.asFunction<
          _dart_PannerNode_coneOuterGain>();

  void PannerNode_setConeOuterGain(
    int nodeId,
    double angle,
  ) {
    return _PannerNode_setConeOuterGain(
      nodeId,
      angle,
    );
  }

  late final _PannerNode_setConeOuterGain_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_setConeOuterGain>>(
          'PannerNode_setConeOuterGain');
  late final _dart_PannerNode_setConeOuterGain _PannerNode_setConeOuterGain =
      _PannerNode_setConeOuterGain_ptr.asFunction<
          _dart_PannerNode_setConeOuterGain>();

  void PannerNode_getAzimuthElevation(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Double> outAzimuth,
    ffi.Pointer<ffi.Double> outElevation,
  ) {
    return _PannerNode_getAzimuthElevation(
      nodeId,
      context,
      outAzimuth,
      outElevation,
    );
  }

  late final _PannerNode_getAzimuthElevation_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_getAzimuthElevation>>(
          'PannerNode_getAzimuthElevation');
  late final _dart_PannerNode_getAzimuthElevation
      _PannerNode_getAzimuthElevation = _PannerNode_getAzimuthElevation_ptr
          .asFunction<_dart_PannerNode_getAzimuthElevation>();

  void PannerNode_dopplerRate(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _PannerNode_dopplerRate(
      nodeId,
      context,
    );
  }

  late final _PannerNode_dopplerRate_ptr =
      _lookup<ffi.NativeFunction<_c_PannerNode_dopplerRate>>(
          'PannerNode_dopplerRate');
  late final _dart_PannerNode_dopplerRate _PannerNode_dopplerRate =
      _PannerNode_dopplerRate_ptr.asFunction<_dart_PannerNode_dopplerRate>();

  /// ////////////////////////
  /// ChannelSplitterNode ///
  /// ////////////////////////
  int createChannelSplitterNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createChannelSplitterNode(
      context,
    );
  }

  late final _createChannelSplitterNode_ptr =
      _lookup<ffi.NativeFunction<_c_createChannelSplitterNode>>(
          'createChannelSplitterNode');
  late final _dart_createChannelSplitterNode _createChannelSplitterNode =
      _createChannelSplitterNode_ptr
          .asFunction<_dart_createChannelSplitterNode>();

  void ChannelSplitterNode_addOutputs(
    int nodeId,
    int n,
  ) {
    return _ChannelSplitterNode_addOutputs(
      nodeId,
      n,
    );
  }

  late final _ChannelSplitterNode_addOutputs_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelSplitterNode_addOutputs>>(
          'ChannelSplitterNode_addOutputs');
  late final _dart_ChannelSplitterNode_addOutputs
      _ChannelSplitterNode_addOutputs = _ChannelSplitterNode_addOutputs_ptr
          .asFunction<_dart_ChannelSplitterNode_addOutputs>();

  /// //////////////////////
  /// ChannelMergerNode ///
  /// //////////////////////
  int createChannelMergerNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createChannelMergerNode(
      context,
    );
  }

  late final _createChannelMergerNode_ptr =
      _lookup<ffi.NativeFunction<_c_createChannelMergerNode>>(
          'createChannelMergerNode');
  late final _dart_createChannelMergerNode _createChannelMergerNode =
      _createChannelMergerNode_ptr.asFunction<_dart_createChannelMergerNode>();

  void ChannelMergerNode_addInputs(
    int nodeId,
    int n,
  ) {
    return _ChannelMergerNode_addInputs(
      nodeId,
      n,
    );
  }

  late final _ChannelMergerNode_addInputs_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelMergerNode_addInputs>>(
          'ChannelMergerNode_addInputs');
  late final _dart_ChannelMergerNode_addInputs _ChannelMergerNode_addInputs =
      _ChannelMergerNode_addInputs_ptr.asFunction<
          _dart_ChannelMergerNode_addInputs>();

  void ChannelMergerNode_setOutputChannelCount(
    int nodeId,
    int n,
  ) {
    return _ChannelMergerNode_setOutputChannelCount(
      nodeId,
      n,
    );
  }

  late final _ChannelMergerNode_setOutputChannelCount_ptr =
      _lookup<ffi.NativeFunction<_c_ChannelMergerNode_setOutputChannelCount>>(
          'ChannelMergerNode_setOutputChannelCount');
  late final _dart_ChannelMergerNode_setOutputChannelCount
      _ChannelMergerNode_setOutputChannelCount =
      _ChannelMergerNode_setOutputChannelCount_ptr.asFunction<
          _dart_ChannelMergerNode_setOutputChannelCount>();

  /// ////////////////////////////
  /// AudioHardwareDeviceNode ///
  /// ////////////////////////////
  int createAudioHardwareDeviceNode(
    ffi.Pointer<ffi.Void> context,
    AudioStreamConfig outputConfig,
    AudioStreamConfig inputConfig,
  ) {
    return _createAudioHardwareDeviceNode(
      context,
      outputConfig,
      inputConfig,
    );
  }

  late final _createAudioHardwareDeviceNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioHardwareDeviceNode>>(
          'createAudioHardwareDeviceNode');
  late final _dart_createAudioHardwareDeviceNode
      _createAudioHardwareDeviceNode = _createAudioHardwareDeviceNode_ptr
          .asFunction<_dart_createAudioHardwareDeviceNode>();

  void AudioHardwareDeviceNode_start(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_start(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_start>>(
          'AudioHardwareDeviceNode_start');
  late final _dart_AudioHardwareDeviceNode_start
      _AudioHardwareDeviceNode_start = _AudioHardwareDeviceNode_start_ptr
          .asFunction<_dart_AudioHardwareDeviceNode_start>();

  void AudioHardwareDeviceNode_stop(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_stop(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_stop_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_stop>>(
          'AudioHardwareDeviceNode_stop');
  late final _dart_AudioHardwareDeviceNode_stop _AudioHardwareDeviceNode_stop =
      _AudioHardwareDeviceNode_stop_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_stop>();

  int AudioHardwareDeviceNode_isRunning(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_isRunning(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_isRunning_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_isRunning>>(
          'AudioHardwareDeviceNode_isRunning');
  late final _dart_AudioHardwareDeviceNode_isRunning
      _AudioHardwareDeviceNode_isRunning =
      _AudioHardwareDeviceNode_isRunning_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_isRunning>();

  AudioStreamConfig AudioHardwareDeviceNode_getOutputConfig(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_getOutputConfig(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_getOutputConfig_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_getOutputConfig>>(
          'AudioHardwareDeviceNode_getOutputConfig');
  late final _dart_AudioHardwareDeviceNode_getOutputConfig
      _AudioHardwareDeviceNode_getOutputConfig =
      _AudioHardwareDeviceNode_getOutputConfig_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_getOutputConfig>();

  AudioStreamConfig AudioHardwareDeviceNode_getInputConfig(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_getInputConfig(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_getInputConfig_ptr =
      _lookup<ffi.NativeFunction<_c_AudioHardwareDeviceNode_getInputConfig>>(
          'AudioHardwareDeviceNode_getInputConfig');
  late final _dart_AudioHardwareDeviceNode_getInputConfig
      _AudioHardwareDeviceNode_getInputConfig =
      _AudioHardwareDeviceNode_getInputConfig_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_getInputConfig>();

  AudioStreamConfig createAudioStreamConfig(
    int device_index,
    int desired_channels,
    double desired_samplerate,
  ) {
    return _createAudioStreamConfig(
      device_index,
      desired_channels,
      desired_samplerate,
    );
  }

  late final _createAudioStreamConfig_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioStreamConfig>>(
          'createAudioStreamConfig');
  late final _dart_createAudioStreamConfig _createAudioStreamConfig =
      _createAudioStreamConfig_ptr.asFunction<_dart_createAudioStreamConfig>();

  void AudioHardwareDeviceNode_backendReinitialize(
    int nodeId,
  ) {
    return _AudioHardwareDeviceNode_backendReinitialize(
      nodeId,
    );
  }

  late final _AudioHardwareDeviceNode_backendReinitialize_ptr = _lookup<
          ffi.NativeFunction<_c_AudioHardwareDeviceNode_backendReinitialize>>(
      'AudioHardwareDeviceNode_backendReinitialize');
  late final _dart_AudioHardwareDeviceNode_backendReinitialize
      _AudioHardwareDeviceNode_backendReinitialize =
      _AudioHardwareDeviceNode_backendReinitialize_ptr.asFunction<
          _dart_AudioHardwareDeviceNode_backendReinitialize>();

  /// ///////////////////////////
  /// DynamicsCompressorNode ///
  /// ///////////////////////////
  int createDynamicsCompressorNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createDynamicsCompressorNode(
      context,
    );
  }

  late final _createDynamicsCompressorNode_ptr =
      _lookup<ffi.NativeFunction<_c_createDynamicsCompressorNode>>(
          'createDynamicsCompressorNode');
  late final _dart_createDynamicsCompressorNode _createDynamicsCompressorNode =
      _createDynamicsCompressorNode_ptr
          .asFunction<_dart_createDynamicsCompressorNode>();

  int DynamicsCompressorNode_threshold(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_threshold(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_threshold_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_threshold>>(
          'DynamicsCompressorNode_threshold');
  late final _dart_DynamicsCompressorNode_threshold
      _DynamicsCompressorNode_threshold = _DynamicsCompressorNode_threshold_ptr
          .asFunction<_dart_DynamicsCompressorNode_threshold>();

  int DynamicsCompressorNode_knee(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_knee(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_knee_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_knee>>(
          'DynamicsCompressorNode_knee');
  late final _dart_DynamicsCompressorNode_knee _DynamicsCompressorNode_knee =
      _DynamicsCompressorNode_knee_ptr.asFunction<
          _dart_DynamicsCompressorNode_knee>();

  int DynamicsCompressorNode_ratio(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_ratio(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_ratio_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_ratio>>(
          'DynamicsCompressorNode_ratio');
  late final _dart_DynamicsCompressorNode_ratio _DynamicsCompressorNode_ratio =
      _DynamicsCompressorNode_ratio_ptr.asFunction<
          _dart_DynamicsCompressorNode_ratio>();

  int DynamicsCompressorNode_attack(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_attack(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_attack_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_attack>>(
          'DynamicsCompressorNode_attack');
  late final _dart_DynamicsCompressorNode_attack
      _DynamicsCompressorNode_attack = _DynamicsCompressorNode_attack_ptr
          .asFunction<_dart_DynamicsCompressorNode_attack>();

  int DynamicsCompressorNode_release(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_release(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_release_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_release>>(
          'DynamicsCompressorNode_release');
  late final _dart_DynamicsCompressorNode_release
      _DynamicsCompressorNode_release = _DynamicsCompressorNode_release_ptr
          .asFunction<_dart_DynamicsCompressorNode_release>();

  int DynamicsCompressorNode_reduction(
    int nodeId,
  ) {
    return _DynamicsCompressorNode_reduction(
      nodeId,
    );
  }

  late final _DynamicsCompressorNode_reduction_ptr =
      _lookup<ffi.NativeFunction<_c_DynamicsCompressorNode_reduction>>(
          'DynamicsCompressorNode_reduction');
  late final _dart_DynamicsCompressorNode_reduction
      _DynamicsCompressorNode_reduction = _DynamicsCompressorNode_reduction_ptr
          .asFunction<_dart_DynamicsCompressorNode_reduction>();

  /// /////////////
  /// ADSRNode ///
  /// /////////////
  int createADSRNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createADSRNode(
      context,
    );
  }

  late final _createADSRNode_ptr =
      _lookup<ffi.NativeFunction<_c_createADSRNode>>('createADSRNode');
  late final _dart_createADSRNode _createADSRNode =
      _createADSRNode_ptr.asFunction<_dart_createADSRNode>();

  int ADSRNode_finished(
    int nodeId,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _ADSRNode_finished(
      nodeId,
      context,
    );
  }

  late final _ADSRNode_finished_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_finished>>('ADSRNode_finished');
  late final _dart_ADSRNode_finished _ADSRNode_finished =
      _ADSRNode_finished_ptr.asFunction<_dart_ADSRNode_finished>();

  void ADSRNode_set(
    int nodeId,
    double attack_time,
    double attack_level,
    double decay_time,
    double sustain_time,
    double sustain_level,
    double release_time,
  ) {
    return _ADSRNode_set(
      nodeId,
      attack_time,
      attack_level,
      decay_time,
      sustain_time,
      sustain_level,
      release_time,
    );
  }

  late final _ADSRNode_set_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_set>>('ADSRNode_set');
  late final _dart_ADSRNode_set _ADSRNode_set =
      _ADSRNode_set_ptr.asFunction<_dart_ADSRNode_set>();

  int ADSRNode_gate(
    int nodeId,
  ) {
    return _ADSRNode_gate(
      nodeId,
    );
  }

  late final _ADSRNode_gate_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_gate>>('ADSRNode_gate');
  late final _dart_ADSRNode_gate _ADSRNode_gate =
      _ADSRNode_gate_ptr.asFunction<_dart_ADSRNode_gate>();

  int ADSRNode_oneShot(
    int nodeId,
  ) {
    return _ADSRNode_oneShot(
      nodeId,
    );
  }

  late final _ADSRNode_oneShot_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_oneShot>>('ADSRNode_oneShot');
  late final _dart_ADSRNode_oneShot _ADSRNode_oneShot =
      _ADSRNode_oneShot_ptr.asFunction<_dart_ADSRNode_oneShot>();

  int ADSRNode_attackTime(
    int nodeId,
  ) {
    return _ADSRNode_attackTime(
      nodeId,
    );
  }

  late final _ADSRNode_attackTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_attackTime>>(
          'ADSRNode_attackTime');
  late final _dart_ADSRNode_attackTime _ADSRNode_attackTime =
      _ADSRNode_attackTime_ptr.asFunction<_dart_ADSRNode_attackTime>();

  int ADSRNode_attackLevel(
    int nodeId,
  ) {
    return _ADSRNode_attackLevel(
      nodeId,
    );
  }

  late final _ADSRNode_attackLevel_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_attackLevel>>(
          'ADSRNode_attackLevel');
  late final _dart_ADSRNode_attackLevel _ADSRNode_attackLevel =
      _ADSRNode_attackLevel_ptr.asFunction<_dart_ADSRNode_attackLevel>();

  int ADSRNode_decayTime(
    int nodeId,
  ) {
    return _ADSRNode_decayTime(
      nodeId,
    );
  }

  late final _ADSRNode_decayTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_decayTime>>('ADSRNode_decayTime');
  late final _dart_ADSRNode_decayTime _ADSRNode_decayTime =
      _ADSRNode_decayTime_ptr.asFunction<_dart_ADSRNode_decayTime>();

  int ADSRNode_sustainTime(
    int nodeId,
  ) {
    return _ADSRNode_sustainTime(
      nodeId,
    );
  }

  late final _ADSRNode_sustainTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_sustainTime>>(
          'ADSRNode_sustainTime');
  late final _dart_ADSRNode_sustainTime _ADSRNode_sustainTime =
      _ADSRNode_sustainTime_ptr.asFunction<_dart_ADSRNode_sustainTime>();

  int ADSRNode_sustainLevel(
    int nodeId,
  ) {
    return _ADSRNode_sustainLevel(
      nodeId,
    );
  }

  late final _ADSRNode_sustainLevel_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_sustainLevel>>(
          'ADSRNode_sustainLevel');
  late final _dart_ADSRNode_sustainLevel _ADSRNode_sustainLevel =
      _ADSRNode_sustainLevel_ptr.asFunction<_dart_ADSRNode_sustainLevel>();

  int ADSRNode_releaseTime(
    int nodeId,
  ) {
    return _ADSRNode_releaseTime(
      nodeId,
    );
  }

  late final _ADSRNode_releaseTime_ptr =
      _lookup<ffi.NativeFunction<_c_ADSRNode_releaseTime>>(
          'ADSRNode_releaseTime');
  late final _dart_ADSRNode_releaseTime _ADSRNode_releaseTime =
      _ADSRNode_releaseTime_ptr.asFunction<_dart_ADSRNode_releaseTime>();

  /// ///////////////////
  /// WaveShaperNode ///
  /// ///////////////////
  int createWaveShaperNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createWaveShaperNode(
      context,
    );
  }

  late final _createWaveShaperNode_ptr =
      _lookup<ffi.NativeFunction<_c_createWaveShaperNode>>(
          'createWaveShaperNode');
  late final _dart_createWaveShaperNode _createWaveShaperNode =
      _createWaveShaperNode_ptr.asFunction<_dart_createWaveShaperNode>();

  void WaveShaperNode_setCurve(
    int nodeId,
    int curveLen,
    ffi.Pointer<ffi.Float> curve,
  ) {
    return _WaveShaperNode_setCurve(
      nodeId,
      curveLen,
      curve,
    );
  }

  late final _WaveShaperNode_setCurve_ptr =
      _lookup<ffi.NativeFunction<_c_WaveShaperNode_setCurve>>(
          'WaveShaperNode_setCurve');
  late final _dart_WaveShaperNode_setCurve _WaveShaperNode_setCurve =
      _WaveShaperNode_setCurve_ptr.asFunction<_dart_WaveShaperNode_setCurve>();

  /// //////////////
  /// NoiseNode ///
  /// //////////////
  int createNoiseNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createNoiseNode(
      context,
    );
  }

  late final _createNoiseNode_ptr =
      _lookup<ffi.NativeFunction<_c_createNoiseNode>>('createNoiseNode');
  late final _dart_createNoiseNode _createNoiseNode =
      _createNoiseNode_ptr.asFunction<_dart_createNoiseNode>();

  int NoiseNode_type(
    int nodeId,
  ) {
    return _NoiseNode_type(
      nodeId,
    );
  }

  late final _NoiseNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_NoiseNode_type>>('NoiseNode_type');
  late final _dart_NoiseNode_type _NoiseNode_type =
      _NoiseNode_type_ptr.asFunction<_dart_NoiseNode_type>();

  void NoiseNode_setType(
    int nodeId,
    int type,
  ) {
    return _NoiseNode_setType(
      nodeId,
      type,
    );
  }

  late final _NoiseNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_NoiseNode_setType>>('NoiseNode_setType');
  late final _dart_NoiseNode_setType _NoiseNode_setType =
      _NoiseNode_setType_ptr.asFunction<_dart_NoiseNode_setType>();

  /// /////////////////
  /// PolyBLEPNode ///
  /// /////////////////
  int createPolyBLEPNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createPolyBLEPNode(
      context,
    );
  }

  late final _createPolyBLEPNode_ptr =
      _lookup<ffi.NativeFunction<_c_createPolyBLEPNode>>('createPolyBLEPNode');
  late final _dart_createPolyBLEPNode _createPolyBLEPNode =
      _createPolyBLEPNode_ptr.asFunction<_dart_createPolyBLEPNode>();

  int PolyBLEPNode_type(
    int nodeId,
  ) {
    return _PolyBLEPNode_type(
      nodeId,
    );
  }

  late final _PolyBLEPNode_type_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_type>>('PolyBLEPNode_type');
  late final _dart_PolyBLEPNode_type _PolyBLEPNode_type =
      _PolyBLEPNode_type_ptr.asFunction<_dart_PolyBLEPNode_type>();

  void PolyBLEPNode_setType(
    int nodeId,
    int type,
  ) {
    return _PolyBLEPNode_setType(
      nodeId,
      type,
    );
  }

  late final _PolyBLEPNode_setType_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_setType>>(
          'PolyBLEPNode_setType');
  late final _dart_PolyBLEPNode_setType _PolyBLEPNode_setType =
      _PolyBLEPNode_setType_ptr.asFunction<_dart_PolyBLEPNode_setType>();

  int PolyBLEPNode_amplitude(
    int nodeId,
  ) {
    return _PolyBLEPNode_amplitude(
      nodeId,
    );
  }

  late final _PolyBLEPNode_amplitude_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_amplitude>>(
          'PolyBLEPNode_amplitude');
  late final _dart_PolyBLEPNode_amplitude _PolyBLEPNode_amplitude =
      _PolyBLEPNode_amplitude_ptr.asFunction<_dart_PolyBLEPNode_amplitude>();

  int PolyBLEPNode_frequency(
    int nodeId,
  ) {
    return _PolyBLEPNode_frequency(
      nodeId,
    );
  }

  late final _PolyBLEPNode_frequency_ptr =
      _lookup<ffi.NativeFunction<_c_PolyBLEPNode_frequency>>(
          'PolyBLEPNode_frequency');
  late final _dart_PolyBLEPNode_frequency _PolyBLEPNode_frequency =
      _PolyBLEPNode_frequency_ptr.asFunction<_dart_PolyBLEPNode_frequency>();

  /// //////////////
  /// DelayNode ///
  /// //////////////
  int createDelayNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createDelayNode(
      context,
    );
  }

  late final _createDelayNode_ptr =
      _lookup<ffi.NativeFunction<_c_createDelayNode>>('createDelayNode');
  late final _dart_createDelayNode _createDelayNode =
      _createDelayNode_ptr.asFunction<_dart_createDelayNode>();

  int DelayNode_delayTime(
    int nodeId,
  ) {
    return _DelayNode_delayTime(
      nodeId,
    );
  }

  late final _DelayNode_delayTime_ptr =
      _lookup<ffi.NativeFunction<_c_DelayNode_delayTime>>(
          'DelayNode_delayTime');
  late final _dart_DelayNode_delayTime _DelayNode_delayTime =
      _DelayNode_delayTime_ptr.asFunction<_dart_DelayNode_delayTime>();

  /// /////////////////
  /// BPMDelayNode ///
  /// /////////////////
  int createBPMDelayNode(
    ffi.Pointer<ffi.Void> context,
    double tempo,
  ) {
    return _createBPMDelayNode(
      context,
      tempo,
    );
  }

  late final _createBPMDelayNode_ptr =
      _lookup<ffi.NativeFunction<_c_createBPMDelayNode>>('createBPMDelayNode');
  late final _dart_createBPMDelayNode _createBPMDelayNode =
      _createBPMDelayNode_ptr.asFunction<_dart_createBPMDelayNode>();

  int BPMDelayNode_setTempo(
    int nodeId,
    double newTempo,
  ) {
    return _BPMDelayNode_setTempo(
      nodeId,
      newTempo,
    );
  }

  late final _BPMDelayNode_setTempo_ptr =
      _lookup<ffi.NativeFunction<_c_BPMDelayNode_setTempo>>(
          'BPMDelayNode_setTempo');
  late final _dart_BPMDelayNode_setTempo _BPMDelayNode_setTempo =
      _BPMDelayNode_setTempo_ptr.asFunction<_dart_BPMDelayNode_setTempo>();

  int BPMDelayNode_setDelayIndex(
    int nodeId,
    int value,
  ) {
    return _BPMDelayNode_setDelayIndex(
      nodeId,
      value,
    );
  }

  late final _BPMDelayNode_setDelayIndex_ptr =
      _lookup<ffi.NativeFunction<_c_BPMDelayNode_setDelayIndex>>(
          'BPMDelayNode_setDelayIndex');
  late final _dart_BPMDelayNode_setDelayIndex _BPMDelayNode_setDelayIndex =
      _BPMDelayNode_setDelayIndex_ptr.asFunction<
          _dart_BPMDelayNode_setDelayIndex>();

  /// //////////////////
  /// ConvolverNode ///
  /// //////////////////
  int createConvolverNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createConvolverNode(
      context,
    );
  }

  late final _createConvolverNode_ptr =
      _lookup<ffi.NativeFunction<_c_createConvolverNode>>(
          'createConvolverNode');
  late final _dart_createConvolverNode _createConvolverNode =
      _createConvolverNode_ptr.asFunction<_dart_createConvolverNode>();

  int ConvolverNode_normalize(
    int nodeId,
  ) {
    return _ConvolverNode_normalize(
      nodeId,
    );
  }

  late final _ConvolverNode_normalize_ptr =
      _lookup<ffi.NativeFunction<_c_ConvolverNode_normalize>>(
          'ConvolverNode_normalize');
  late final _dart_ConvolverNode_normalize _ConvolverNode_normalize =
      _ConvolverNode_normalize_ptr.asFunction<_dart_ConvolverNode_normalize>();

  void ConvolverNode_setNormalize(
    int nodeId,
    int newN,
  ) {
    return _ConvolverNode_setNormalize(
      nodeId,
      newN,
    );
  }

  late final _ConvolverNode_setNormalize_ptr =
      _lookup<ffi.NativeFunction<_c_ConvolverNode_setNormalize>>(
          'ConvolverNode_setNormalize');
  late final _dart_ConvolverNode_setNormalize _ConvolverNode_setNormalize =
      _ConvolverNode_setNormalize_ptr.asFunction<
          _dart_ConvolverNode_setNormalize>();

  void ConvolverNode_setImpulse(
    int nodeId,
    int busId,
  ) {
    return _ConvolverNode_setImpulse(
      nodeId,
      busId,
    );
  }

  late final _ConvolverNode_setImpulse_ptr =
      _lookup<ffi.NativeFunction<_c_ConvolverNode_setImpulse>>(
          'ConvolverNode_setImpulse');
  late final _dart_ConvolverNode_setImpulse _ConvolverNode_setImpulse =
      _ConvolverNode_setImpulse_ptr.asFunction<
          _dart_ConvolverNode_setImpulse>();

  /// /////////////////////
  /// StereoPannerNode ///
  /// /////////////////////
  int createStereoPannerNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createStereoPannerNode(
      context,
    );
  }

  late final _createStereoPannerNode_ptr =
      _lookup<ffi.NativeFunction<_c_createStereoPannerNode>>(
          'createStereoPannerNode');
  late final _dart_createStereoPannerNode _createStereoPannerNode =
      _createStereoPannerNode_ptr.asFunction<_dart_createStereoPannerNode>();

  int StereoPannerNode_pan(
    int nodeId,
  ) {
    return _StereoPannerNode_pan(
      nodeId,
    );
  }

  late final _StereoPannerNode_pan_ptr =
      _lookup<ffi.NativeFunction<_c_StereoPannerNode_pan>>(
          'StereoPannerNode_pan');
  late final _dart_StereoPannerNode_pan _StereoPannerNode_pan =
      _StereoPannerNode_pan_ptr.asFunction<_dart_StereoPannerNode_pan>();

  /// /////////////////////
  /// PowerMonitorNode ///
  /// /////////////////////
  int createPowerMonitorNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createPowerMonitorNode(
      context,
    );
  }

  late final _createPowerMonitorNode_ptr =
      _lookup<ffi.NativeFunction<_c_createPowerMonitorNode>>(
          'createPowerMonitorNode');
  late final _dart_createPowerMonitorNode _createPowerMonitorNode =
      _createPowerMonitorNode_ptr.asFunction<_dart_createPowerMonitorNode>();

  int PowerMonitorNode_windowSize(
    int nodeId,
  ) {
    return _PowerMonitorNode_windowSize(
      nodeId,
    );
  }

  late final _PowerMonitorNode_windowSize_ptr =
      _lookup<ffi.NativeFunction<_c_PowerMonitorNode_windowSize>>(
          'PowerMonitorNode_windowSize');
  late final _dart_PowerMonitorNode_windowSize _PowerMonitorNode_windowSize =
      _PowerMonitorNode_windowSize_ptr.asFunction<
          _dart_PowerMonitorNode_windowSize>();

  double PowerMonitorNode_db(
    int nodeId,
  ) {
    return _PowerMonitorNode_db(
      nodeId,
    );
  }

  late final _PowerMonitorNode_db_ptr =
      _lookup<ffi.NativeFunction<_c_PowerMonitorNode_db>>(
          'PowerMonitorNode_db');
  late final _dart_PowerMonitorNode_db _PowerMonitorNode_db =
      _PowerMonitorNode_db_ptr.asFunction<_dart_PowerMonitorNode_db>();

  void PowerMonitorNode_setWindowSize(
    int nodeId,
    int ws,
  ) {
    return _PowerMonitorNode_setWindowSize(
      nodeId,
      ws,
    );
  }

  late final _PowerMonitorNode_setWindowSize_ptr =
      _lookup<ffi.NativeFunction<_c_PowerMonitorNode_setWindowSize>>(
          'PowerMonitorNode_setWindowSize');
  late final _dart_PowerMonitorNode_setWindowSize
      _PowerMonitorNode_setWindowSize = _PowerMonitorNode_setWindowSize_ptr
          .asFunction<_dart_PowerMonitorNode_setWindowSize>();

  /// /////////////
  /// SfxrNode ///
  /// /////////////
  int createSfxrNode(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _createSfxrNode(
      context,
    );
  }

  late final _createSfxrNode_ptr =
      _lookup<ffi.NativeFunction<_c_createSfxrNode>>('createSfxrNode');
  late final _dart_createSfxrNode _createSfxrNode =
      _createSfxrNode_ptr.asFunction<_dart_createSfxrNode>();

  int SfxrNode_attackTime(
    int nodeId,
  ) {
    return _SfxrNode_attackTime(
      nodeId,
    );
  }

  late final _SfxrNode_attackTime_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_attackTime>>(
          'SfxrNode_attackTime');
  late final _dart_SfxrNode_attackTime _SfxrNode_attackTime =
      _SfxrNode_attackTime_ptr.asFunction<_dart_SfxrNode_attackTime>();

  int SfxrNode_sustainTime(
    int nodeId,
  ) {
    return _SfxrNode_sustainTime(
      nodeId,
    );
  }

  late final _SfxrNode_sustainTime_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_sustainTime>>(
          'SfxrNode_sustainTime');
  late final _dart_SfxrNode_sustainTime _SfxrNode_sustainTime =
      _SfxrNode_sustainTime_ptr.asFunction<_dart_SfxrNode_sustainTime>();

  int SfxrNode_sustainPunch(
    int nodeId,
  ) {
    return _SfxrNode_sustainPunch(
      nodeId,
    );
  }

  late final _SfxrNode_sustainPunch_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_sustainPunch>>(
          'SfxrNode_sustainPunch');
  late final _dart_SfxrNode_sustainPunch _SfxrNode_sustainPunch =
      _SfxrNode_sustainPunch_ptr.asFunction<_dart_SfxrNode_sustainPunch>();

  int SfxrNode_decayTime(
    int nodeId,
  ) {
    return _SfxrNode_decayTime(
      nodeId,
    );
  }

  late final _SfxrNode_decayTime_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_decayTime>>('SfxrNode_decayTime');
  late final _dart_SfxrNode_decayTime _SfxrNode_decayTime =
      _SfxrNode_decayTime_ptr.asFunction<_dart_SfxrNode_decayTime>();

  int SfxrNode_startFrequency(
    int nodeId,
  ) {
    return _SfxrNode_startFrequency(
      nodeId,
    );
  }

  late final _SfxrNode_startFrequency_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_startFrequency>>(
          'SfxrNode_startFrequency');
  late final _dart_SfxrNode_startFrequency _SfxrNode_startFrequency =
      _SfxrNode_startFrequency_ptr.asFunction<_dart_SfxrNode_startFrequency>();

  int SfxrNode_minFrequency(
    int nodeId,
  ) {
    return _SfxrNode_minFrequency(
      nodeId,
    );
  }

  late final _SfxrNode_minFrequency_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_minFrequency>>(
          'SfxrNode_minFrequency');
  late final _dart_SfxrNode_minFrequency _SfxrNode_minFrequency =
      _SfxrNode_minFrequency_ptr.asFunction<_dart_SfxrNode_minFrequency>();

  int SfxrNode_slide(
    int nodeId,
  ) {
    return _SfxrNode_slide(
      nodeId,
    );
  }

  late final _SfxrNode_slide_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_slide>>('SfxrNode_slide');
  late final _dart_SfxrNode_slide _SfxrNode_slide =
      _SfxrNode_slide_ptr.asFunction<_dart_SfxrNode_slide>();

  int SfxrNode_deltaSlide(
    int nodeId,
  ) {
    return _SfxrNode_deltaSlide(
      nodeId,
    );
  }

  late final _SfxrNode_deltaSlide_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_deltaSlide>>(
          'SfxrNode_deltaSlide');
  late final _dart_SfxrNode_deltaSlide _SfxrNode_deltaSlide =
      _SfxrNode_deltaSlide_ptr.asFunction<_dart_SfxrNode_deltaSlide>();

  int SfxrNode_vibratoDepth(
    int nodeId,
  ) {
    return _SfxrNode_vibratoDepth(
      nodeId,
    );
  }

  late final _SfxrNode_vibratoDepth_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_vibratoDepth>>(
          'SfxrNode_vibratoDepth');
  late final _dart_SfxrNode_vibratoDepth _SfxrNode_vibratoDepth =
      _SfxrNode_vibratoDepth_ptr.asFunction<_dart_SfxrNode_vibratoDepth>();

  int SfxrNode_vibratoSpeed(
    int nodeId,
  ) {
    return _SfxrNode_vibratoSpeed(
      nodeId,
    );
  }

  late final _SfxrNode_vibratoSpeed_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_vibratoSpeed>>(
          'SfxrNode_vibratoSpeed');
  late final _dart_SfxrNode_vibratoSpeed _SfxrNode_vibratoSpeed =
      _SfxrNode_vibratoSpeed_ptr.asFunction<_dart_SfxrNode_vibratoSpeed>();

  int SfxrNode_changeAmount(
    int nodeId,
  ) {
    return _SfxrNode_changeAmount(
      nodeId,
    );
  }

  late final _SfxrNode_changeAmount_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_changeAmount>>(
          'SfxrNode_changeAmount');
  late final _dart_SfxrNode_changeAmount _SfxrNode_changeAmount =
      _SfxrNode_changeAmount_ptr.asFunction<_dart_SfxrNode_changeAmount>();

  int SfxrNode_changeSpeed(
    int nodeId,
  ) {
    return _SfxrNode_changeSpeed(
      nodeId,
    );
  }

  late final _SfxrNode_changeSpeed_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_changeSpeed>>(
          'SfxrNode_changeSpeed');
  late final _dart_SfxrNode_changeSpeed _SfxrNode_changeSpeed =
      _SfxrNode_changeSpeed_ptr.asFunction<_dart_SfxrNode_changeSpeed>();

  int SfxrNode_squareDuty(
    int nodeId,
  ) {
    return _SfxrNode_squareDuty(
      nodeId,
    );
  }

  late final _SfxrNode_squareDuty_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_squareDuty>>(
          'SfxrNode_squareDuty');
  late final _dart_SfxrNode_squareDuty _SfxrNode_squareDuty =
      _SfxrNode_squareDuty_ptr.asFunction<_dart_SfxrNode_squareDuty>();

  int SfxrNode_dutySweep(
    int nodeId,
  ) {
    return _SfxrNode_dutySweep(
      nodeId,
    );
  }

  late final _SfxrNode_dutySweep_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_dutySweep>>('SfxrNode_dutySweep');
  late final _dart_SfxrNode_dutySweep _SfxrNode_dutySweep =
      _SfxrNode_dutySweep_ptr.asFunction<_dart_SfxrNode_dutySweep>();

  int SfxrNode_repeatSpeed(
    int nodeId,
  ) {
    return _SfxrNode_repeatSpeed(
      nodeId,
    );
  }

  late final _SfxrNode_repeatSpeed_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_repeatSpeed>>(
          'SfxrNode_repeatSpeed');
  late final _dart_SfxrNode_repeatSpeed _SfxrNode_repeatSpeed =
      _SfxrNode_repeatSpeed_ptr.asFunction<_dart_SfxrNode_repeatSpeed>();

  int SfxrNode_phaserOffset(
    int nodeId,
  ) {
    return _SfxrNode_phaserOffset(
      nodeId,
    );
  }

  late final _SfxrNode_phaserOffset_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_phaserOffset>>(
          'SfxrNode_phaserOffset');
  late final _dart_SfxrNode_phaserOffset _SfxrNode_phaserOffset =
      _SfxrNode_phaserOffset_ptr.asFunction<_dart_SfxrNode_phaserOffset>();

  int SfxrNode_phaserSweep(
    int nodeId,
  ) {
    return _SfxrNode_phaserSweep(
      nodeId,
    );
  }

  late final _SfxrNode_phaserSweep_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_phaserSweep>>(
          'SfxrNode_phaserSweep');
  late final _dart_SfxrNode_phaserSweep _SfxrNode_phaserSweep =
      _SfxrNode_phaserSweep_ptr.asFunction<_dart_SfxrNode_phaserSweep>();

  int SfxrNode_lpFilterCutoff(
    int nodeId,
  ) {
    return _SfxrNode_lpFilterCutoff(
      nodeId,
    );
  }

  late final _SfxrNode_lpFilterCutoff_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_lpFilterCutoff>>(
          'SfxrNode_lpFilterCutoff');
  late final _dart_SfxrNode_lpFilterCutoff _SfxrNode_lpFilterCutoff =
      _SfxrNode_lpFilterCutoff_ptr.asFunction<_dart_SfxrNode_lpFilterCutoff>();

  int SfxrNode_lpFilterCutoffSweep(
    int nodeId,
  ) {
    return _SfxrNode_lpFilterCutoffSweep(
      nodeId,
    );
  }

  late final _SfxrNode_lpFilterCutoffSweep_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_lpFilterCutoffSweep>>(
          'SfxrNode_lpFilterCutoffSweep');
  late final _dart_SfxrNode_lpFilterCutoffSweep _SfxrNode_lpFilterCutoffSweep =
      _SfxrNode_lpFilterCutoffSweep_ptr.asFunction<
          _dart_SfxrNode_lpFilterCutoffSweep>();

  int SfxrNode_lpFiterResonance(
    int nodeId,
  ) {
    return _SfxrNode_lpFiterResonance(
      nodeId,
    );
  }

  late final _SfxrNode_lpFiterResonance_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_lpFiterResonance>>(
          'SfxrNode_lpFiterResonance');
  late final _dart_SfxrNode_lpFiterResonance _SfxrNode_lpFiterResonance =
      _SfxrNode_lpFiterResonance_ptr.asFunction<
          _dart_SfxrNode_lpFiterResonance>();

  int SfxrNode_hpFilterCutoff(
    int nodeId,
  ) {
    return _SfxrNode_hpFilterCutoff(
      nodeId,
    );
  }

  late final _SfxrNode_hpFilterCutoff_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_hpFilterCutoff>>(
          'SfxrNode_hpFilterCutoff');
  late final _dart_SfxrNode_hpFilterCutoff _SfxrNode_hpFilterCutoff =
      _SfxrNode_hpFilterCutoff_ptr.asFunction<_dart_SfxrNode_hpFilterCutoff>();

  int SfxrNode_hpFilterCutoffSweep(
    int nodeId,
  ) {
    return _SfxrNode_hpFilterCutoffSweep(
      nodeId,
    );
  }

  late final _SfxrNode_hpFilterCutoffSweep_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_hpFilterCutoffSweep>>(
          'SfxrNode_hpFilterCutoffSweep');
  late final _dart_SfxrNode_hpFilterCutoffSweep _SfxrNode_hpFilterCutoffSweep =
      _SfxrNode_hpFilterCutoffSweep_ptr.asFunction<
          _dart_SfxrNode_hpFilterCutoffSweep>();

  void SfxrNode_setStartFrequencyInHz(
    int nodeId,
    double value,
  ) {
    return _SfxrNode_setStartFrequencyInHz(
      nodeId,
      value,
    );
  }

  late final _SfxrNode_setStartFrequencyInHz_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_setStartFrequencyInHz>>(
          'SfxrNode_setStartFrequencyInHz');
  late final _dart_SfxrNode_setStartFrequencyInHz
      _SfxrNode_setStartFrequencyInHz = _SfxrNode_setStartFrequencyInHz_ptr
          .asFunction<_dart_SfxrNode_setStartFrequencyInHz>();

  void SfxrNode_setVibratoSpeedInHz(
    int nodeId,
    double value,
  ) {
    return _SfxrNode_setVibratoSpeedInHz(
      nodeId,
      value,
    );
  }

  late final _SfxrNode_setVibratoSpeedInHz_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_setVibratoSpeedInHz>>(
          'SfxrNode_setVibratoSpeedInHz');
  late final _dart_SfxrNode_setVibratoSpeedInHz _SfxrNode_setVibratoSpeedInHz =
      _SfxrNode_setVibratoSpeedInHz_ptr.asFunction<
          _dart_SfxrNode_setVibratoSpeedInHz>();

  double SfxrNode_envelopeTimeInSeconds(
    int nodeId,
    double sfxrEnvTime,
  ) {
    return _SfxrNode_envelopeTimeInSeconds(
      nodeId,
      sfxrEnvTime,
    );
  }

  late final _SfxrNode_envelopeTimeInSeconds_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_envelopeTimeInSeconds>>(
          'SfxrNode_envelopeTimeInSeconds');
  late final _dart_SfxrNode_envelopeTimeInSeconds
      _SfxrNode_envelopeTimeInSeconds = _SfxrNode_envelopeTimeInSeconds_ptr
          .asFunction<_dart_SfxrNode_envelopeTimeInSeconds>();

  double SfxrNode_envelopeTimeInSfxrUnits(
    int nodeId,
    double t,
  ) {
    return _SfxrNode_envelopeTimeInSfxrUnits(
      nodeId,
      t,
    );
  }

  late final _SfxrNode_envelopeTimeInSfxrUnits_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_envelopeTimeInSfxrUnits>>(
          'SfxrNode_envelopeTimeInSfxrUnits');
  late final _dart_SfxrNode_envelopeTimeInSfxrUnits
      _SfxrNode_envelopeTimeInSfxrUnits = _SfxrNode_envelopeTimeInSfxrUnits_ptr
          .asFunction<_dart_SfxrNode_envelopeTimeInSfxrUnits>();

  double SfxrNode_frequencyInSfxrUnits(
    int nodeId,
    double hz,
  ) {
    return _SfxrNode_frequencyInSfxrUnits(
      nodeId,
      hz,
    );
  }

  late final _SfxrNode_frequencyInSfxrUnits_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_frequencyInSfxrUnits>>(
          'SfxrNode_frequencyInSfxrUnits');
  late final _dart_SfxrNode_frequencyInSfxrUnits
      _SfxrNode_frequencyInSfxrUnits = _SfxrNode_frequencyInSfxrUnits_ptr
          .asFunction<_dart_SfxrNode_frequencyInSfxrUnits>();

  double SfxrNode_frequencyInHz(
    int nodeId,
    double sfxr,
  ) {
    return _SfxrNode_frequencyInHz(
      nodeId,
      sfxr,
    );
  }

  late final _SfxrNode_frequencyInHz_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_frequencyInHz>>(
          'SfxrNode_frequencyInHz');
  late final _dart_SfxrNode_frequencyInHz _SfxrNode_frequencyInHz =
      _SfxrNode_frequencyInHz_ptr.asFunction<_dart_SfxrNode_frequencyInHz>();

  double SfxrNode_vibratoInSfxrUnits(
    int nodeId,
    double hz,
  ) {
    return _SfxrNode_vibratoInSfxrUnits(
      nodeId,
      hz,
    );
  }

  late final _SfxrNode_vibratoInSfxrUnits_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_vibratoInSfxrUnits>>(
          'SfxrNode_vibratoInSfxrUnits');
  late final _dart_SfxrNode_vibratoInSfxrUnits _SfxrNode_vibratoInSfxrUnits =
      _SfxrNode_vibratoInSfxrUnits_ptr.asFunction<
          _dart_SfxrNode_vibratoInSfxrUnits>();

  double SfxrNode_vibratoInHz(
    int nodeId,
    double sfxr,
  ) {
    return _SfxrNode_vibratoInHz(
      nodeId,
      sfxr,
    );
  }

  late final _SfxrNode_vibratoInHz_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_vibratoInHz>>(
          'SfxrNode_vibratoInHz');
  late final _dart_SfxrNode_vibratoInHz _SfxrNode_vibratoInHz =
      _SfxrNode_vibratoInHz_ptr.asFunction<_dart_SfxrNode_vibratoInHz>();

  double SfxrNode_filterFreqInHz(
    int nodeId,
    double sfxr,
  ) {
    return _SfxrNode_filterFreqInHz(
      nodeId,
      sfxr,
    );
  }

  late final _SfxrNode_filterFreqInHz_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_filterFreqInHz>>(
          'SfxrNode_filterFreqInHz');
  late final _dart_SfxrNode_filterFreqInHz _SfxrNode_filterFreqInHz =
      _SfxrNode_filterFreqInHz_ptr.asFunction<_dart_SfxrNode_filterFreqInHz>();

  double SfxrNode_filterFreqInSfxrUnits(
    int nodeId,
    double hz,
  ) {
    return _SfxrNode_filterFreqInSfxrUnits(
      nodeId,
      hz,
    );
  }

  late final _SfxrNode_filterFreqInSfxrUnits_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_filterFreqInSfxrUnits>>(
          'SfxrNode_filterFreqInSfxrUnits');
  late final _dart_SfxrNode_filterFreqInSfxrUnits
      _SfxrNode_filterFreqInSfxrUnits = _SfxrNode_filterFreqInSfxrUnits_ptr
          .asFunction<_dart_SfxrNode_filterFreqInSfxrUnits>();

  void SfxrNode_setDefaultBeep(
    int nodeId,
  ) {
    return _SfxrNode_setDefaultBeep(
      nodeId,
    );
  }

  late final _SfxrNode_setDefaultBeep_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_setDefaultBeep>>(
          'SfxrNode_setDefaultBeep');
  late final _dart_SfxrNode_setDefaultBeep _SfxrNode_setDefaultBeep =
      _SfxrNode_setDefaultBeep_ptr.asFunction<_dart_SfxrNode_setDefaultBeep>();

  void SfxrNode_coin(
    int nodeId,
  ) {
    return _SfxrNode_coin(
      nodeId,
    );
  }

  late final _SfxrNode_coin_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_coin>>('SfxrNode_coin');
  late final _dart_SfxrNode_coin _SfxrNode_coin =
      _SfxrNode_coin_ptr.asFunction<_dart_SfxrNode_coin>();

  void SfxrNode_laser(
    int nodeId,
  ) {
    return _SfxrNode_laser(
      nodeId,
    );
  }

  late final _SfxrNode_laser_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_laser>>('SfxrNode_laser');
  late final _dart_SfxrNode_laser _SfxrNode_laser =
      _SfxrNode_laser_ptr.asFunction<_dart_SfxrNode_laser>();

  void SfxrNode_explosion(
    int nodeId,
  ) {
    return _SfxrNode_explosion(
      nodeId,
    );
  }

  late final _SfxrNode_explosion_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_explosion>>('SfxrNode_explosion');
  late final _dart_SfxrNode_explosion _SfxrNode_explosion =
      _SfxrNode_explosion_ptr.asFunction<_dart_SfxrNode_explosion>();

  void SfxrNode_powerUp(
    int nodeId,
  ) {
    return _SfxrNode_powerUp(
      nodeId,
    );
  }

  late final _SfxrNode_powerUp_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_powerUp>>('SfxrNode_powerUp');
  late final _dart_SfxrNode_powerUp _SfxrNode_powerUp =
      _SfxrNode_powerUp_ptr.asFunction<_dart_SfxrNode_powerUp>();

  void SfxrNode_hit(
    int nodeId,
  ) {
    return _SfxrNode_hit(
      nodeId,
    );
  }

  late final _SfxrNode_hit_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_hit>>('SfxrNode_hit');
  late final _dart_SfxrNode_hit _SfxrNode_hit =
      _SfxrNode_hit_ptr.asFunction<_dart_SfxrNode_hit>();

  void SfxrNode_jump(
    int nodeId,
  ) {
    return _SfxrNode_jump(
      nodeId,
    );
  }

  late final _SfxrNode_jump_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_jump>>('SfxrNode_jump');
  late final _dart_SfxrNode_jump _SfxrNode_jump =
      _SfxrNode_jump_ptr.asFunction<_dart_SfxrNode_jump>();

  void SfxrNode_select(
    int nodeId,
  ) {
    return _SfxrNode_select(
      nodeId,
    );
  }

  late final _SfxrNode_select_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_select>>('SfxrNode_select');
  late final _dart_SfxrNode_select _SfxrNode_select =
      _SfxrNode_select_ptr.asFunction<_dart_SfxrNode_select>();

  void SfxrNode_mutate(
    int nodeId,
  ) {
    return _SfxrNode_mutate(
      nodeId,
    );
  }

  late final _SfxrNode_mutate_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_mutate>>('SfxrNode_mutate');
  late final _dart_SfxrNode_mutate _SfxrNode_mutate =
      _SfxrNode_mutate_ptr.asFunction<_dart_SfxrNode_mutate>();

  void SfxrNode_randomize(
    int nodeId,
  ) {
    return _SfxrNode_randomize(
      nodeId,
    );
  }

  late final _SfxrNode_randomize_ptr =
      _lookup<ffi.NativeFunction<_c_SfxrNode_randomize>>('SfxrNode_randomize');
  late final _dart_SfxrNode_randomize _SfxrNode_randomize =
      _SfxrNode_randomize_ptr.asFunction<_dart_SfxrNode_randomize>();

  /// /////////////////
  /// AudioSetting ///
  /// /////////////////
  ffi.Pointer<ffi.Int8> AudioSetting_name(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_name(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_name_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_name>>('AudioSetting_name');
  late final _dart_AudioSetting_name _AudioSetting_name =
      _AudioSetting_name_ptr.asFunction<_dart_AudioSetting_name>();

  ffi.Pointer<ffi.Int8> AudioSetting_shortName(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_shortName(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_shortName_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_shortName>>(
          'AudioSetting_shortName');
  late final _dart_AudioSetting_shortName _AudioSetting_shortName =
      _AudioSetting_shortName_ptr.asFunction<_dart_AudioSetting_shortName>();

  int AudioSetting_type(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_type(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_type_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_type>>('AudioSetting_type');
  late final _dart_AudioSetting_type _AudioSetting_type =
      _AudioSetting_type_ptr.asFunction<_dart_AudioSetting_type>();

  int AudioSetting_valueBool(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_valueBool(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_valueBool_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_valueBool>>(
          'AudioSetting_valueBool');
  late final _dart_AudioSetting_valueBool _AudioSetting_valueBool =
      _AudioSetting_valueBool_ptr.asFunction<_dart_AudioSetting_valueBool>();

  double AudioSetting_valueFloat(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_valueFloat(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_valueFloat_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_valueFloat>>(
          'AudioSetting_valueFloat');
  late final _dart_AudioSetting_valueFloat _AudioSetting_valueFloat =
      _AudioSetting_valueFloat_ptr.asFunction<_dart_AudioSetting_valueFloat>();

  int AudioSetting_valueUint32(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_valueUint32(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_valueUint32_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_valueUint32>>(
          'AudioSetting_valueUint32');
  late final _dart_AudioSetting_valueUint32 _AudioSetting_valueUint32 =
      _AudioSetting_valueUint32_ptr.asFunction<
          _dart_AudioSetting_valueUint32>();

  int AudioSetting_valueBus(
    int nodeId,
    int settingIndex,
  ) {
    return _AudioSetting_valueBus(
      nodeId,
      settingIndex,
    );
  }

  late final _AudioSetting_valueBus_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_valueBus>>(
          'AudioSetting_valueBus');
  late final _dart_AudioSetting_valueBus _AudioSetting_valueBus =
      _AudioSetting_valueBus_ptr.asFunction<_dart_AudioSetting_valueBus>();

  void AudioSetting_setBool(
    int nodeId,
    int settingIndex,
    int v,
    int notify,
  ) {
    return _AudioSetting_setBool(
      nodeId,
      settingIndex,
      v,
      notify,
    );
  }

  late final _AudioSetting_setBool_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_setBool>>(
          'AudioSetting_setBool');
  late final _dart_AudioSetting_setBool _AudioSetting_setBool =
      _AudioSetting_setBool_ptr.asFunction<_dart_AudioSetting_setBool>();

  void AudioSetting_setFloat(
    int nodeId,
    int settingIndex,
    double v,
    int notify,
  ) {
    return _AudioSetting_setFloat(
      nodeId,
      settingIndex,
      v,
      notify,
    );
  }

  late final _AudioSetting_setFloat_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_setFloat>>(
          'AudioSetting_setFloat');
  late final _dart_AudioSetting_setFloat _AudioSetting_setFloat =
      _AudioSetting_setFloat_ptr.asFunction<_dart_AudioSetting_setFloat>();

  void AudioSetting_setUint32(
    int nodeId,
    int settingIndex,
    int v,
    int notify,
  ) {
    return _AudioSetting_setUint32(
      nodeId,
      settingIndex,
      v,
      notify,
    );
  }

  late final _AudioSetting_setUint32_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_setUint32>>(
          'AudioSetting_setUint32');
  late final _dart_AudioSetting_setUint32 _AudioSetting_setUint32 =
      _AudioSetting_setUint32_ptr.asFunction<_dart_AudioSetting_setUint32>();

  void AudioSetting_setEnumeration(
    int nodeId,
    int settingIndex,
    int v,
    int notify,
  ) {
    return _AudioSetting_setEnumeration(
      nodeId,
      settingIndex,
      v,
      notify,
    );
  }

  late final _AudioSetting_setEnumeration_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_setEnumeration>>(
          'AudioSetting_setEnumeration');
  late final _dart_AudioSetting_setEnumeration _AudioSetting_setEnumeration =
      _AudioSetting_setEnumeration_ptr.asFunction<
          _dart_AudioSetting_setEnumeration>();

  void AudioSetting_setString(
    int nodeId,
    int settingIndex,
    ffi.Pointer<ffi.Int8> v,
    int notify,
  ) {
    return _AudioSetting_setString(
      nodeId,
      settingIndex,
      v,
      notify,
    );
  }

  late final _AudioSetting_setString_ptr =
      _lookup<ffi.NativeFunction<_c_AudioSetting_setString>>(
          'AudioSetting_setString');
  late final _dart_AudioSetting_setString _AudioSetting_setString =
      _AudioSetting_setString_ptr.asFunction<_dart_AudioSetting_setString>();
}

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

class CharArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> string;

  @ffi.Int32()
  external int len;
}

class FloatArray extends ffi.Struct {
  external ffi.Pointer<ffi.Float> array;

  @ffi.Int32()
  external int len;
}

class IntArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> array;

  @ffi.Int32()
  external int len;
}

class AudioDeviceInfoBridge extends ffi.Struct {
  @ffi.Int32()
  external int index;

  external ffi.Pointer<ffi.Int8> identifier;

  @ffi.Int32()
  external int identifier_len;

  @ffi.Int32()
  external int num_output_channels;

  @ffi.Int32()
  external int num_input_channels;

  external FloatArray supported_samplerates;

  @ffi.Float()
  external double nominal_samplerate;

  @ffi.Int32()
  external int is_default_output;

  @ffi.Int32()
  external int is_default_input;
}

class AudioDeviceInfoList extends ffi.Struct {
  external ffi.Pointer<AudioDeviceInfoBridge> audioDeviceList;

  @ffi.Int32()
  external int length;
}

class AudioStreamConfig extends ffi.Struct {
  @ffi.Int32()
  external int device_index;

  @ffi.Uint32()
  external int desired_channels;

  @ffi.Float()
  external double desired_samplerate;
}

class AudioDeviceIndex extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  @ffi.Int32()
  external int valid;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int __bool_true_false_are_defined = 1;

const int false_1 = 0;

const int true_1 = 1;

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef _c__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef _c__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef _c__errno = ffi.Pointer<ffi.Int32> Function();

typedef _dart__errno = ffi.Pointer<ffi.Int32> Function();

typedef _c__set_errno = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_errno = int Function(
  int _Value,
);

typedef _c__get_errno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _dart__get_errno = int Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _c___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef _dart___doserrno = ffi.Pointer<ffi.Uint64> Function();

typedef _c__set_doserrno = ffi.Int32 Function(
  ffi.Uint64 _Value,
);

typedef _dart__set_doserrno = int Function(
  int _Value,
);

typedef _c__get_doserrno = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef _dart__get_doserrno = int Function(
  ffi.Pointer<ffi.Uint64> _Value,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Buf,
  int _Val,
  int _MaxCount,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Uint64 _Size,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Size,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  int _Val,
  int _Size,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Val,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Val,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Int32 _Ch,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  int _Ch,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _SubStr,
);

typedef _c_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcschr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef _c_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Uint16 _Ch,
);

typedef _dart_wcsrchr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  int _Ch,
);

typedef _c_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef _dart_wcsstr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Str,
  ffi.Pointer<ffi.Uint16> _SubStr,
);

typedef _c__memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart__memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c__memicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__memicmp_l = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _Size,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _Size,
);

typedef _c_memicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  ffi.Uint64 _Size,
);

typedef _dart_memicmp = int Function(
  ffi.Pointer<ffi.Void> _Buf1,
  ffi.Pointer<ffi.Void> _Buf2,
  int _Size,
);

typedef _c_wcscat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcsncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncat_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcsncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncpy_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok_s = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _c__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _dart_wcscpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
);

typedef _c_wcscspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcscspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcslen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslen = int Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnlen = int Function(
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncat = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef _c_wcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsncmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_wcsncpy = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _Count,
);

typedef _c_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcspbrk = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcsspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _dart_wcsspn = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Control,
);

typedef _c_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _dart_wcstok = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<ffi.Uint16> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Uint16>> _Context,
);

typedef _c__wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror = ffi.Pointer<ffi.Uint16> Function(
  int _ErrorNumber,
);

typedef _c__wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Int32 _ErrorNumber,
);

typedef _dart__wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  int _ErrorNumber,
);

typedef _c___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart___wcserror = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c___wcserror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _dart___wcserror_s = int Function(
  ffi.Pointer<ffi.Uint16> _Buffer,
  int _SizeInWords,
  ffi.Pointer<ffi.Uint16> _ErrorMessage,
);

typedef _c__wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcsicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicmp_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
  int _MaxCount,
);

typedef _c__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef _c__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcsset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Uint64 _SizeInWords,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset_s = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  int _SizeInWords,
  int _Value,
);

typedef _c__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart__wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef _c__wcslwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
);

typedef _dart__wcslwr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
);

typedef _c__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcslwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _SizeInWords,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcslwr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
);

typedef _dart__wcsupr_s = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
);

typedef _c__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart__wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c__wcsupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_s_l = int Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsupr_l = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcsxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsxfrm = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
);

typedef _c__wcsxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsxfrm_l = int Function(
  ffi.Pointer<ffi.Uint16> _Destination,
  ffi.Pointer<ffi.Uint16> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcscoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcscoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcscoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcscoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart__wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c__wcsicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsncoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsncoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__wcsnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__wcsnicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c__wcsnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__wcsnicoll_l = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsdup = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_wcsnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnicmp = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
  int _MaxCount,
);

typedef _c_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_wcsnset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
  int _MaxCount,
);

typedef _c_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsrev = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  ffi.Uint16 _Value,
);

typedef _dart_wcsset = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
  int _Value,
);

typedef _c_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcslwr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _dart_wcsupr = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> _String,
);

typedef _c_wcsicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _dart_wcsicoll = int Function(
  ffi.Pointer<ffi.Uint16> _String1,
  ffi.Pointer<ffi.Uint16> _String2,
);

typedef _c_strcpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _ErrorNumber,
);

typedef _dart_strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  int _ErrorNumber,
);

typedef _c_strncat_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncat_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c_strncpy_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncpy_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef _dart_strtok_s = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
);

typedef _c__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  ffi.Int32 _Val,
  ffi.Uint64 _MaxCount,
);

typedef _dart__memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> _Dst,
  ffi.Pointer<ffi.Void> _Src,
  int _Val,
  int _MaxCount,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
);

typedef _c__strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _dart__strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Source,
);

typedef _c__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _c__strerror_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  ffi.Uint64 _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _dart__strerror_s = int Function(
  ffi.Pointer<ffi.Int8> _Buffer,
  int _SizeInBytes,
  ffi.Pointer<ffi.Int8> _ErrorMessage,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 _ErrorMessage,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int _ErrorMessage,
);

typedef _c__stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__stricoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart__stricoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c__stricoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__stricmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__stricmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _c__strlwr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strlwr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef _c__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__strlwr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strlwr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> _Str1,
  ffi.Pointer<ffi.Int8> _Str2,
  int _MaxCount,
);

typedef _c__strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strnicmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicmp_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strnicoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnicoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strnicoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strnicoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strncoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strncoll = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c__strncoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strncoll_l = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c___strncnt = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Count,
);

typedef _dart___strncnt = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Count,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _Count,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _Count,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _MaxCount,
);

typedef _c__strnset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _SizeInBytes,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart__strnset_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _SizeInBytes,
  int _Value,
  int _MaxCount,
);

typedef _c__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
  ffi.Uint64 _Count,
);

typedef _dart__strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
  int _Count,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _dart__strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Str,
);

typedef _c__strset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Uint64 _DestinationSize,
  ffi.Int32 _Value,
);

typedef _dart__strset_s = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _DestinationSize,
  int _Value,
);

typedef _c__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Int32 _Value,
);

typedef _dart__strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _Destination,
  int _Value,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> _Str,
  ffi.Pointer<ffi.Int8> _Control,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<ffi.Int8> _Delimiter,
);

typedef _c__strupr_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
);

typedef _dart__strupr_s = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
);

typedef _c__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart__strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c__strupr_s_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Uint64 _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_s_l = int Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Size,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strupr_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
);

typedef _c__strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  ffi.Uint64 _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _dart__strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> _Destination,
  ffi.Pointer<ffi.Int8> _Source,
  int _MaxCount,
  ffi.Pointer<__crt_locale_pointers> _Locale,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strcmpi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_strcmpi = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_stricmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _dart_stricmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
);

typedef _c_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strlwr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strnicmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnicmp = int Function(
  ffi.Pointer<ffi.Int8> _String1,
  ffi.Pointer<ffi.Int8> _String2,
  int _MaxCount,
);

typedef _c_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
  ffi.Uint64 _MaxCount,
);

typedef _dart_strnset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
  int _MaxCount,
);

typedef _c_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strrev = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  ffi.Int32 _Value,
);

typedef _dart_strset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
  int _Value,
);

typedef _c_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _dart_strupr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> _String,
);

typedef _c_labSound_MakeAudioDeviceList = AudioDeviceInfoList Function();

typedef _dart_labSound_MakeAudioDeviceList = AudioDeviceInfoList Function();

typedef _c_labSound_GetDefaultOutputAudioDeviceIndex = AudioDeviceIndex
    Function();

typedef _dart_labSound_GetDefaultOutputAudioDeviceIndex = AudioDeviceIndex
    Function();

typedef _c_labSound_GetDefaultInputAudioDeviceIndex = AudioDeviceIndex
    Function();

typedef _dart_labSound_GetDefaultInputAudioDeviceIndex = AudioDeviceIndex
    Function();

typedef _c_labSound_MakeAudioHardwareInputNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_labSound_MakeAudioHardwareInputNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_labSound_GetDefaultInputAudioDeviceConfiguration = AudioStreamConfig
    Function();

typedef _dart_labSound_GetDefaultInputAudioDeviceConfiguration
    = AudioStreamConfig Function();

typedef _c_labSound_GetDefaultOutputAudioDeviceConfiguration = AudioStreamConfig
    Function();

typedef _dart_labSound_GetDefaultOutputAudioDeviceConfiguration
    = AudioStreamConfig Function();

typedef _c_InitDartApiDL = ffi.IntPtr Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_registerDecodeAudioSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerDecodeAudioSendPort = void Function(
  int sendPort,
);

typedef _c_registerAudioSampleOnEndedSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerAudioSampleOnEndedSendPort = void Function(
  int sendPort,
);

typedef _c_registerOfflineRenderCompleteSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerOfflineRenderCompleteSendPort = void Function(
  int sendPort,
);

typedef _c_createRealtimeAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _dart_createRealtimeAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _c_createOfflineAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  ffi.Double recordTimeMilliseconds,
);

typedef _dart_createOfflineAudioContext = ffi.Pointer<ffi.Void> Function(
  AudioStreamConfig outputConfig,
  double recordTimeMilliseconds,
);

typedef _c_AudioContext_startOfflineRendering = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_startOfflineRendering = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_makeAudioHardwareInputNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_makeAudioHardwareInputNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_addAutomaticPullNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_addAutomaticPullNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_removeAutomaticPullNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_removeAutomaticPullNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_processAutomaticPullNodes = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 framesToProcess,
);

typedef _dart_AudioContext_processAutomaticPullNodes = void Function(
  ffi.Pointer<ffi.Void> context,
  int framesToProcess,
);

typedef _c_AudioContext_handlePreRenderTasks = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_handlePreRenderTasks = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_handlePostRenderTasks = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_handlePostRenderTasks = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_synchronizeConnections = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 timeOut_ms,
);

typedef _dart_AudioContext_synchronizeConnections = void Function(
  ffi.Pointer<ffi.Void> context,
  int timeOut_ms,
);

typedef _c_AudioContext_suspend = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_suspend = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_resume = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_resume = void Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_currentTime = ffi.Double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_currentTime = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_predictedCurrentTime = ffi.Double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_predictedCurrentTime = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_sampleRate = ffi.Float Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_sampleRate = double Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isInitialized = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_isInitialized = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isConnected = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destinationIndex,
  ffi.Int32 sourceIndex,
);

typedef _dart_AudioContext_isConnected = int Function(
  ffi.Pointer<ffi.Void> context,
  int destinationIndex,
  int sourceIndex,
);

typedef _c_AudioContext_setDeviceNode = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_setDeviceNode = void Function(
  ffi.Pointer<ffi.Void> context,
  int nodeId,
);

typedef _c_AudioContext_device = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_device = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_isOfflineContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_isOfflineContext = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_currentSampleFrame = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioContext_currentSampleFrame = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioContext_connect = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destination,
  ffi.Int32 source,
  ffi.Int32 destIdx,
  ffi.Int32 srcIdx,
);

typedef _dart_AudioContext_connect = void Function(
  ffi.Pointer<ffi.Void> context,
  int destination,
  int source,
  int destIdx,
  int srcIdx,
);

typedef _c_AudioContext_disconnect = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destination,
  ffi.Int32 source,
  ffi.Int32 destIdx,
  ffi.Int32 srcIdx,
);

typedef _dart_AudioContext_disconnect = void Function(
  ffi.Pointer<ffi.Void> context,
  int destination,
  int source,
  int destIdx,
  int srcIdx,
);

typedef _c_AudioContext_disconnectCompletely = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 node,
  ffi.Int32 destIdx,
);

typedef _dart_AudioContext_disconnectCompletely = void Function(
  ffi.Pointer<ffi.Void> context,
  int node,
  int destIdx,
);

typedef _c_AudioContext_connectParam = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 paramNodeId,
  ffi.Int32 paramId,
  ffi.Int32 driverNodeId,
  ffi.Int32 index,
);

typedef _dart_AudioContext_connectParam = void Function(
  ffi.Pointer<ffi.Void> context,
  int paramNodeId,
  int paramId,
  int driverNodeId,
  int index,
);

typedef _c_AudioContext_connectParamByName = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 destinationNodeId,
  ffi.Pointer<ffi.Int8> parameterName,
  ffi.Int32 driverNodeId,
  ffi.Int32 index,
);

typedef _dart_AudioContext_connectParamByName = void Function(
  ffi.Pointer<ffi.Void> context,
  int destinationNodeId,
  ffi.Pointer<ffi.Int8> parameterName,
  int driverNodeId,
  int index,
);

typedef _c_AudioContext_disconnectParam = ffi.Void Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 paramNodeId,
  ffi.Int32 paramId,
  ffi.Int32 driverNodeId,
  ffi.Int32 index,
);

typedef _dart_AudioContext_disconnectParam = void Function(
  ffi.Pointer<ffi.Void> context,
  int paramNodeId,
  int paramId,
  int driverNodeId,
  int index,
);

typedef _c_AudioContext_releaseContext = ffi.Void Function(
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_AudioContext_releaseContext = void Function(
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_AudioParam_value = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_value = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
);

typedef _dart_AudioParam_setValue = void Function(
  int nodeId,
  int paramIndex,
  double value,
);

typedef _c_AudioParam_finalValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioParam_finalValue = double Function(
  int nodeId,
  int paramIndex,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioParam_setValueCurveAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Pointer<ffi.Float> curve,
  ffi.Float time,
  ffi.Float duration,
);

typedef _dart_AudioParam_setValueCurveAtTime = void Function(
  int nodeId,
  int paramIndex,
  ffi.Pointer<ffi.Float> curve,
  double time,
  double duration,
);

typedef _c_AudioParam_cancelScheduledValues = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float startTime,
);

typedef _dart_AudioParam_cancelScheduledValues = void Function(
  int nodeId,
  int paramIndex,
  double startTime,
);

typedef _c_AudioParam_setValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_setValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_exponentialRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_exponentialRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_linearRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_linearRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_setTargetAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float target,
  ffi.Float time,
  ffi.Float timeConstant,
);

typedef _dart_AudioParam_setTargetAtTime = void Function(
  int nodeId,
  int paramIndex,
  double target,
  double time,
  double timeConstant,
);

typedef _c_AudioParam_minValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_minValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_maxValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_maxValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_defaultValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_defaultValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_resetSmoothedValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_resetSmoothedValue = void Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setSmoothingConstant = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Double k,
);

typedef _dart_AudioParam_setSmoothingConstant = void Function(
  int nodeId,
  int paramIndex,
  double k,
);

typedef _c_AudioParam_hasSampleAccurateValues = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_hasSampleAccurateValues = int Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioNode_initialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_initialize = void Function(
  int nodeId,
);

typedef _c_AudioNode_uninitialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_uninitialize = void Function(
  int nodeId,
);

typedef _c_AudioNode_isScheduledNode = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_isScheduledNode = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfInputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfInputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfOutputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfOutputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_channelCount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_channelCount = int Function(
  int nodeId,
);

typedef _c_AudioNode_reset = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_AudioNode_reset = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_AudioNode_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_name = ffi.Pointer<ffi.Int8> Function(
  int nodeId,
);

typedef _c_releaseNode = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_releaseNode = void Function(
  int nodeId,
);

typedef _c_hasNode = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_hasNode = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_isPlayingOrScheduled = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_isPlayingOrScheduled = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_stop = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_stop = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_hasFinished = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_hasFinished = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_startWhen = ffi.Uint64 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_startWhen = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_start = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_playbackState = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_playbackState = int Function(
  int nodeId,
);

typedef _c_createAudioSampleNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createAudioSampleNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_SampledAudioNode_setBus = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 busIndex,
);

typedef _dart_SampledAudioNode_setBus = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  int busIndex,
);

typedef _c_SampledAudioNode_schedule = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
);

typedef _dart_SampledAudioNode_schedule = void Function(
  int nodeId,
  double when,
);

typedef _c_SampledAudioNode_schedule2 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule2 = void Function(
  int nodeId,
  double when,
  int loopCount,
);

typedef _c_SampledAudioNode_schedule3 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule3 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  int loopCount,
);

typedef _c_SampledAudioNode_schedule4 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule4 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
  int loopCount,
);

typedef _c_SampledAudioNode_clearSchedules = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SampledAudioNode_clearSchedules = void Function(
  int nodeId,
);

typedef _c_SampledAudioNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
);

typedef _dart_SampledAudioNode_start = void Function(
  int nodeId,
  double when,
);

typedef _c_SampledAudioNode_start2 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start2 = void Function(
  int nodeId,
  double when,
  int loopCount,
);

typedef _c_SampledAudioNode_start3 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start3 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  int loopCount,
);

typedef _c_SampledAudioNode_start4 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_start4 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
  int loopCount,
);

typedef _c_SampledAudioNode_getCursor = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_getCursor = int Function(
  int index,
);

typedef _c_SampledAudioNode_playbackRate = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_playbackRate = int Function(
  int index,
);

typedef _c_SampledAudioNode_detune = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_detune = int Function(
  int index,
);

typedef _c_makeBusFromFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 mixToMono,
  ffi.Float targetSampleRate,
);

typedef _dart_makeBusFromFile = int Function(
  ffi.Pointer<ffi.Int8> file,
  int mixToMono,
  double targetSampleRate,
);

typedef _c_makeBusFromMemory = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 bufferLen,
  ffi.Pointer<ffi.Int8> extension_1,
  ffi.Int32 mixToMono,
);

typedef _dart_makeBusFromMemory = int Function(
  ffi.Pointer<ffi.Uint8> buffer,
  int bufferLen,
  ffi.Pointer<ffi.Int8> extension_1,
  int mixToMono,
);

typedef _c_audioBusHasCheck = ffi.Int32 Function(
  ffi.Int32 busId,
);

typedef _dart_audioBusHasCheck = int Function(
  int busId,
);

typedef _c_AudioBus_numberOfChannels = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_numberOfChannels = int Function(
  int busIndex,
);

typedef _c_AudioBus_length = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_length = int Function(
  int busIndex,
);

typedef _c_AudioBus_sampleRate = ffi.Float Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_sampleRate = double Function(
  int busIndex,
);

typedef _c_AudioBus_setSampleRate = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float sampleRate,
);

typedef _dart_AudioBus_setSampleRate = void Function(
  int busIndex,
  double sampleRate,
);

typedef _c_AudioBus_zero = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_zero = void Function(
  int busIndex,
);

typedef _c_AudioBus_clearSilentFlag = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_clearSilentFlag = void Function(
  int busIndex,
);

typedef _c_AudioBus_scale = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float scale,
);

typedef _dart_AudioBus_scale = void Function(
  int busIndex,
  double scale,
);

typedef _c_AudioBus_reset = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_reset = void Function(
  int busIndex,
);

typedef _c_AudioBus_isSilent = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isSilent = int Function(
  int busIndex,
);

typedef _c_AudioBus_isFirstTime = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isFirstTime = int Function(
  int busIndex,
);

typedef _c_releaseAudioBus = ffi.Void Function(
  ffi.Int32 index,
);

typedef _dart_releaseAudioBus = void Function(
  int index,
);

typedef _c_createGain = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createGain = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_GainNode_gain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_GainNode_gain = int Function(
  int nodeId,
);

typedef _c_createRecorderNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 channelCount,
);

typedef _dart_createRecorderNode = int Function(
  ffi.Pointer<ffi.Void> context,
  int channelCount,
);

typedef _c_createRecorderNodeByConfig = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
);

typedef _dart_createRecorderNodeByConfig = int Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
);

typedef _c_RecorderNode_startRecording = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_startRecording = void Function(
  int nodeId,
);

typedef _c_RecorderNode_stopRecording = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_stopRecording = void Function(
  int nodeId,
);

typedef _c_RecorderNode_recordedLengthInSeconds = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_RecorderNode_recordedLengthInSeconds = double Function(
  int nodeId,
);

typedef _c_RecorderNode_createBusFromRecording = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 mixToMono,
);

typedef _dart_RecorderNode_createBusFromRecording = int Function(
  int nodeId,
  int mixToMono,
);

typedef _c_RecorderNode_writeRecordingToWav = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 mixToMono,
);

typedef _dart_RecorderNode_writeRecordingToWav = int Function(
  int nodeId,
  ffi.Pointer<ffi.Int8> file,
  int mixToMono,
);

typedef _c_createAnalyserNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createAnalyserNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_createAnalyserNodeFftSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 fftSize,
);

typedef _dart_createAnalyserNodeFftSize = int Function(
  ffi.Pointer<ffi.Void> context,
  int fftSize,
);

typedef _c_AnalyserNode_setFftSize = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Int32 fftSize,
);

typedef _dart_AnalyserNode_setFftSize = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  int fftSize,
);

typedef _c_AnalyserNode_fftSize = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_fftSize = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_frequencyBinCount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_frequencyBinCount = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setMinDecibels = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMinDecibels = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_minDecibels = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_minDecibels = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setMaxDecibels = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMaxDecibels = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_maxDecibels = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_maxDecibels = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_setSmoothingTimeConstant = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setSmoothingTimeConstant = void Function(
  int nodeId,
  double k,
);

typedef _c_AnalyserNode_smoothingTimeConstant = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AnalyserNode_smoothingTimeConstant = int Function(
  int nodeId,
);

typedef _c_AnalyserNode_getFloatFrequencyData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _dart_AnalyserNode_getFloatFrequencyData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _c_AnalyserNode_getByteFrequencyData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Uint8> array,
  ffi.Int32 resample,
);

typedef _dart_AnalyserNode_getByteFrequencyData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Uint8> array,
  int resample,
);

typedef _c_AnalyserNode_getFloatTimeDomainData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _dart_AnalyserNode_getFloatTimeDomainData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Float> array,
);

typedef _c_AnalyserNode_getByteTimeDomainData = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Uint8> array,
);

typedef _dart_AnalyserNode_getByteTimeDomainData = void Function(
  int nodeId,
  ffi.Pointer<ffi.Uint8> array,
);

typedef _c_createOscillatorNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createOscillatorNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_OscillatorNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_type = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_OscillatorNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_OscillatorNode_amplitude = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_amplitude = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_frequency = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_bias = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_bias = int Function(
  int nodeId,
);

typedef _c_OscillatorNode_detune = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_OscillatorNode_detune = int Function(
  int nodeId,
);

typedef _c_createBiquadFilterNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createBiquadFilterNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_BiquadFilterNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_type = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_BiquadFilterNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_BiquadFilterNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_frequency = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_q = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_q = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_gain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_gain = int Function(
  int nodeId,
);

typedef _c_BiquadFilterNode_detune = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_BiquadFilterNode_detune = int Function(
  int nodeId,
);

typedef _c_createPannerNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createPannerNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PannerNode_panningModel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_panningModel = int Function(
  int nodeId,
);

typedef _c_PannerNode_setPanningModel = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 m,
);

typedef _dart_PannerNode_setPanningModel = void Function(
  int nodeId,
  int m,
);

typedef _c_PannerNode_distanceModel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_distanceModel = int Function(
  int nodeId,
);

typedef _c_PannerNode_setDistanceModel = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 m,
);

typedef _dart_PannerNode_setDistanceModel = void Function(
  int nodeId,
  int m,
);

typedef _c_PannerNode_setPosition = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setPosition = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_positionX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionX = int Function(
  int nodeId,
);

typedef _c_PannerNode_positionY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionY = int Function(
  int nodeId,
);

typedef _c_PannerNode_positionZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_positionZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_setOrientation = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setOrientation = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_orientationX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationX = int Function(
  int nodeId,
);

typedef _c_PannerNode_orientationY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationY = int Function(
  int nodeId,
);

typedef _c_PannerNode_orientationZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_orientationZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_setVelocity = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float x,
  ffi.Float y,
  ffi.Float z,
);

typedef _dart_PannerNode_setVelocity = void Function(
  int nodeId,
  double x,
  double y,
  double z,
);

typedef _c_PannerNode_velocityX = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityX = int Function(
  int nodeId,
);

typedef _c_PannerNode_velocityY = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityY = int Function(
  int nodeId,
);

typedef _c_PannerNode_velocityZ = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_velocityZ = int Function(
  int nodeId,
);

typedef _c_PannerNode_distanceGain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_distanceGain = int Function(
  int nodeId,
);

typedef _c_PannerNode_coneGain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneGain = int Function(
  int nodeId,
);

typedef _c_PannerNode_refDistance = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_refDistance = double Function(
  int nodeId,
);

typedef _c_PannerNode_setRefDistance = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float refDistance,
);

typedef _dart_PannerNode_setRefDistance = void Function(
  int nodeId,
  double refDistance,
);

typedef _c_PannerNode_maxDistance = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_maxDistance = double Function(
  int nodeId,
);

typedef _c_PannerNode_setMaxDistance = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float maxDistance,
);

typedef _dart_PannerNode_setMaxDistance = void Function(
  int nodeId,
  double maxDistance,
);

typedef _c_PannerNode_rolloffFactor = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_rolloffFactor = double Function(
  int nodeId,
);

typedef _c_PannerNode_setRolloffFactor = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float rolloffFactor,
);

typedef _dart_PannerNode_setRolloffFactor = void Function(
  int nodeId,
  double rolloffFactor,
);

typedef _c_PannerNode_coneInnerAngle = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneInnerAngle = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeInnerAngle = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeInnerAngle = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_coneOuterAngle = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneOuterAngle = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeOuterAngle = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeOuterAngle = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_coneOuterGain = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PannerNode_coneOuterGain = double Function(
  int nodeId,
);

typedef _c_PannerNode_setConeOuterGain = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float angle,
);

typedef _dart_PannerNode_setConeOuterGain = void Function(
  int nodeId,
  double angle,
);

typedef _c_PannerNode_getAzimuthElevation = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ffi.Double> outAzimuth,
  ffi.Pointer<ffi.Double> outElevation,
);

typedef _dart_PannerNode_getAzimuthElevation = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
  ffi.Pointer<ffi.Double> outAzimuth,
  ffi.Pointer<ffi.Double> outElevation,
);

typedef _c_PannerNode_dopplerRate = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_PannerNode_dopplerRate = void Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_createChannelSplitterNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createChannelSplitterNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ChannelSplitterNode_addOutputs = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelSplitterNode_addOutputs = void Function(
  int nodeId,
  int n,
);

typedef _c_createChannelMergerNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createChannelMergerNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ChannelMergerNode_addInputs = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelMergerNode_addInputs = void Function(
  int nodeId,
  int n,
);

typedef _c_ChannelMergerNode_setOutputChannelCount = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 n,
);

typedef _dart_ChannelMergerNode_setOutputChannelCount = void Function(
  int nodeId,
  int n,
);

typedef _c_createAudioHardwareDeviceNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _dart_createAudioHardwareDeviceNode = int Function(
  ffi.Pointer<ffi.Void> context,
  AudioStreamConfig outputConfig,
  AudioStreamConfig inputConfig,
);

typedef _c_AudioHardwareDeviceNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_start = void Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_stop = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_stop = void Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_isRunning = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_isRunning = int Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_getOutputConfig = AudioStreamConfig Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_getOutputConfig = AudioStreamConfig
    Function(
  int nodeId,
);

typedef _c_AudioHardwareDeviceNode_getInputConfig = AudioStreamConfig Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_getInputConfig = AudioStreamConfig
    Function(
  int nodeId,
);

typedef _c_createAudioStreamConfig = AudioStreamConfig Function(
  ffi.Int32 device_index,
  ffi.Uint32 desired_channels,
  ffi.Float desired_samplerate,
);

typedef _dart_createAudioStreamConfig = AudioStreamConfig Function(
  int device_index,
  int desired_channels,
  double desired_samplerate,
);

typedef _c_AudioHardwareDeviceNode_backendReinitialize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioHardwareDeviceNode_backendReinitialize = void Function(
  int nodeId,
);

typedef _c_createDynamicsCompressorNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createDynamicsCompressorNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_DynamicsCompressorNode_threshold = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_threshold = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_knee = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_knee = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_ratio = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_ratio = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_attack = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_attack = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_release = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_release = int Function(
  int nodeId,
);

typedef _c_DynamicsCompressorNode_reduction = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DynamicsCompressorNode_reduction = int Function(
  int nodeId,
);

typedef _c_createADSRNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createADSRNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ADSRNode_finished = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_ADSRNode_finished = int Function(
  int nodeId,
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ADSRNode_set = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float attack_time,
  ffi.Float attack_level,
  ffi.Float decay_time,
  ffi.Float sustain_time,
  ffi.Float sustain_level,
  ffi.Float release_time,
);

typedef _dart_ADSRNode_set = void Function(
  int nodeId,
  double attack_time,
  double attack_level,
  double decay_time,
  double sustain_time,
  double sustain_level,
  double release_time,
);

typedef _c_ADSRNode_gate = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_gate = int Function(
  int nodeId,
);

typedef _c_ADSRNode_oneShot = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_oneShot = int Function(
  int nodeId,
);

typedef _c_ADSRNode_attackTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_attackTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_attackLevel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_attackLevel = int Function(
  int nodeId,
);

typedef _c_ADSRNode_decayTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_decayTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_sustainTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_sustainTime = int Function(
  int nodeId,
);

typedef _c_ADSRNode_sustainLevel = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_sustainLevel = int Function(
  int nodeId,
);

typedef _c_ADSRNode_releaseTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ADSRNode_releaseTime = int Function(
  int nodeId,
);

typedef _c_createWaveShaperNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createWaveShaperNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_WaveShaperNode_setCurve = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 curveLen,
  ffi.Pointer<ffi.Float> curve,
);

typedef _dart_WaveShaperNode_setCurve = void Function(
  int nodeId,
  int curveLen,
  ffi.Pointer<ffi.Float> curve,
);

typedef _c_createNoiseNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createNoiseNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_NoiseNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_NoiseNode_type = int Function(
  int nodeId,
);

typedef _c_NoiseNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_NoiseNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_createPolyBLEPNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createPolyBLEPNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PolyBLEPNode_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_type = int Function(
  int nodeId,
);

typedef _c_PolyBLEPNode_setType = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 type,
);

typedef _dart_PolyBLEPNode_setType = void Function(
  int nodeId,
  int type,
);

typedef _c_PolyBLEPNode_amplitude = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_amplitude = int Function(
  int nodeId,
);

typedef _c_PolyBLEPNode_frequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PolyBLEPNode_frequency = int Function(
  int nodeId,
);

typedef _c_createDelayNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createDelayNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_DelayNode_delayTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_DelayNode_delayTime = int Function(
  int nodeId,
);

typedef _c_createBPMDelayNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
  ffi.Float tempo,
);

typedef _dart_createBPMDelayNode = int Function(
  ffi.Pointer<ffi.Void> context,
  double tempo,
);

typedef _c_BPMDelayNode_setTempo = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Float newTempo,
);

typedef _dart_BPMDelayNode_setTempo = int Function(
  int nodeId,
  double newTempo,
);

typedef _c_BPMDelayNode_setDelayIndex = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 value,
);

typedef _dart_BPMDelayNode_setDelayIndex = int Function(
  int nodeId,
  int value,
);

typedef _c_createConvolverNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createConvolverNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_ConvolverNode_normalize = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_ConvolverNode_normalize = int Function(
  int nodeId,
);

typedef _c_ConvolverNode_setNormalize = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 newN,
);

typedef _dart_ConvolverNode_setNormalize = void Function(
  int nodeId,
  int newN,
);

typedef _c_ConvolverNode_setImpulse = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 busId,
);

typedef _dart_ConvolverNode_setImpulse = void Function(
  int nodeId,
  int busId,
);

typedef _c_createStereoPannerNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createStereoPannerNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_StereoPannerNode_pan = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_StereoPannerNode_pan = int Function(
  int nodeId,
);

typedef _c_createPowerMonitorNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createPowerMonitorNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_PowerMonitorNode_windowSize = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_PowerMonitorNode_windowSize = int Function(
  int nodeId,
);

typedef _c_PowerMonitorNode_db = ffi.Float Function(
  ffi.Int32 nodeId,
);

typedef _dart_PowerMonitorNode_db = double Function(
  int nodeId,
);

typedef _c_PowerMonitorNode_setWindowSize = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 ws,
);

typedef _dart_PowerMonitorNode_setWindowSize = void Function(
  int nodeId,
  int ws,
);

typedef _c_createSfxrNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _dart_createSfxrNode = int Function(
  ffi.Pointer<ffi.Void> context,
);

typedef _c_SfxrNode_attackTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_attackTime = int Function(
  int nodeId,
);

typedef _c_SfxrNode_sustainTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_sustainTime = int Function(
  int nodeId,
);

typedef _c_SfxrNode_sustainPunch = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_sustainPunch = int Function(
  int nodeId,
);

typedef _c_SfxrNode_decayTime = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_decayTime = int Function(
  int nodeId,
);

typedef _c_SfxrNode_startFrequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_startFrequency = int Function(
  int nodeId,
);

typedef _c_SfxrNode_minFrequency = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_minFrequency = int Function(
  int nodeId,
);

typedef _c_SfxrNode_slide = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_slide = int Function(
  int nodeId,
);

typedef _c_SfxrNode_deltaSlide = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_deltaSlide = int Function(
  int nodeId,
);

typedef _c_SfxrNode_vibratoDepth = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_vibratoDepth = int Function(
  int nodeId,
);

typedef _c_SfxrNode_vibratoSpeed = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_vibratoSpeed = int Function(
  int nodeId,
);

typedef _c_SfxrNode_changeAmount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_changeAmount = int Function(
  int nodeId,
);

typedef _c_SfxrNode_changeSpeed = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_changeSpeed = int Function(
  int nodeId,
);

typedef _c_SfxrNode_squareDuty = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_squareDuty = int Function(
  int nodeId,
);

typedef _c_SfxrNode_dutySweep = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_dutySweep = int Function(
  int nodeId,
);

typedef _c_SfxrNode_repeatSpeed = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_repeatSpeed = int Function(
  int nodeId,
);

typedef _c_SfxrNode_phaserOffset = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_phaserOffset = int Function(
  int nodeId,
);

typedef _c_SfxrNode_phaserSweep = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_phaserSweep = int Function(
  int nodeId,
);

typedef _c_SfxrNode_lpFilterCutoff = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_lpFilterCutoff = int Function(
  int nodeId,
);

typedef _c_SfxrNode_lpFilterCutoffSweep = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_lpFilterCutoffSweep = int Function(
  int nodeId,
);

typedef _c_SfxrNode_lpFiterResonance = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_lpFiterResonance = int Function(
  int nodeId,
);

typedef _c_SfxrNode_hpFilterCutoff = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_hpFilterCutoff = int Function(
  int nodeId,
);

typedef _c_SfxrNode_hpFilterCutoffSweep = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_hpFilterCutoffSweep = int Function(
  int nodeId,
);

typedef _c_SfxrNode_setStartFrequencyInHz = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float value,
);

typedef _dart_SfxrNode_setStartFrequencyInHz = void Function(
  int nodeId,
  double value,
);

typedef _c_SfxrNode_setVibratoSpeedInHz = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float value,
);

typedef _dart_SfxrNode_setVibratoSpeedInHz = void Function(
  int nodeId,
  double value,
);

typedef _c_SfxrNode_envelopeTimeInSeconds = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float sfxrEnvTime,
);

typedef _dart_SfxrNode_envelopeTimeInSeconds = double Function(
  int nodeId,
  double sfxrEnvTime,
);

typedef _c_SfxrNode_envelopeTimeInSfxrUnits = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float t,
);

typedef _dart_SfxrNode_envelopeTimeInSfxrUnits = double Function(
  int nodeId,
  double t,
);

typedef _c_SfxrNode_frequencyInSfxrUnits = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float hz,
);

typedef _dart_SfxrNode_frequencyInSfxrUnits = double Function(
  int nodeId,
  double hz,
);

typedef _c_SfxrNode_frequencyInHz = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float sfxr,
);

typedef _dart_SfxrNode_frequencyInHz = double Function(
  int nodeId,
  double sfxr,
);

typedef _c_SfxrNode_vibratoInSfxrUnits = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float hz,
);

typedef _dart_SfxrNode_vibratoInSfxrUnits = double Function(
  int nodeId,
  double hz,
);

typedef _c_SfxrNode_vibratoInHz = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float sfxr,
);

typedef _dart_SfxrNode_vibratoInHz = double Function(
  int nodeId,
  double sfxr,
);

typedef _c_SfxrNode_filterFreqInHz = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float sfxr,
);

typedef _dart_SfxrNode_filterFreqInHz = double Function(
  int nodeId,
  double sfxr,
);

typedef _c_SfxrNode_filterFreqInSfxrUnits = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Float hz,
);

typedef _dart_SfxrNode_filterFreqInSfxrUnits = double Function(
  int nodeId,
  double hz,
);

typedef _c_SfxrNode_setDefaultBeep = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_setDefaultBeep = void Function(
  int nodeId,
);

typedef _c_SfxrNode_coin = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_coin = void Function(
  int nodeId,
);

typedef _c_SfxrNode_laser = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_laser = void Function(
  int nodeId,
);

typedef _c_SfxrNode_explosion = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_explosion = void Function(
  int nodeId,
);

typedef _c_SfxrNode_powerUp = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_powerUp = void Function(
  int nodeId,
);

typedef _c_SfxrNode_hit = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_hit = void Function(
  int nodeId,
);

typedef _c_SfxrNode_jump = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_jump = void Function(
  int nodeId,
);

typedef _c_SfxrNode_select = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_select = void Function(
  int nodeId,
);

typedef _c_SfxrNode_mutate = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_mutate = void Function(
  int nodeId,
);

typedef _c_SfxrNode_randomize = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SfxrNode_randomize = void Function(
  int nodeId,
);

typedef _c_AudioSetting_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_name = ffi.Pointer<ffi.Int8> Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_shortName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_shortName = ffi.Pointer<ffi.Int8> Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_type = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_type = int Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_valueBool = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_valueBool = int Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_valueFloat = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_valueFloat = double Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_valueUint32 = ffi.Uint32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_valueUint32 = int Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_valueBus = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
);

typedef _dart_AudioSetting_valueBus = int Function(
  int nodeId,
  int settingIndex,
);

typedef _c_AudioSetting_setBool = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
  ffi.Int32 v,
  ffi.Int32 notify,
);

typedef _dart_AudioSetting_setBool = void Function(
  int nodeId,
  int settingIndex,
  int v,
  int notify,
);

typedef _c_AudioSetting_setFloat = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
  ffi.Float v,
  ffi.Int32 notify,
);

typedef _dart_AudioSetting_setFloat = void Function(
  int nodeId,
  int settingIndex,
  double v,
  int notify,
);

typedef _c_AudioSetting_setUint32 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
  ffi.Uint32 v,
  ffi.Int32 notify,
);

typedef _dart_AudioSetting_setUint32 = void Function(
  int nodeId,
  int settingIndex,
  int v,
  int notify,
);

typedef _c_AudioSetting_setEnumeration = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
  ffi.Int32 v,
  ffi.Int32 notify,
);

typedef _dart_AudioSetting_setEnumeration = void Function(
  int nodeId,
  int settingIndex,
  int v,
  int notify,
);

typedef _c_AudioSetting_setString = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 settingIndex,
  ffi.Pointer<ffi.Int8> v,
  ffi.Int32 notify,
);

typedef _dart_AudioSetting_setString = void Function(
  int nodeId,
  int settingIndex,
  ffi.Pointer<ffi.Int8> v,
  int notify,
);
