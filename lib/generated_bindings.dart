// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to LabSound
class LabSoundBind {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LabSoundBind(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LabSoundBind.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// PORT
  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDL_ptr =
      _lookup<ffi.NativeFunction<_c_InitDartApiDL>>('InitDartApiDL');
  late final _dart_InitDartApiDL _InitDartApiDL =
      _InitDartApiDL_ptr.asFunction<_dart_InitDartApiDL>();

  void registerDecodeAudioSendPort(
    int sendPort,
  ) {
    return _registerDecodeAudioSendPort(
      sendPort,
    );
  }

  late final _registerDecodeAudioSendPort_ptr =
      _lookup<ffi.NativeFunction<_c_registerDecodeAudioSendPort>>(
          'registerDecodeAudioSendPort');
  late final _dart_registerDecodeAudioSendPort _registerDecodeAudioSendPort =
      _registerDecodeAudioSendPort_ptr
          .asFunction<_dart_registerDecodeAudioSendPort>();

  /// AudioContext
  ffi.Pointer<ffi.Int32> createRealtimeAudioContext(
    int channels,
    double sampleRate,
  ) {
    return _createRealtimeAudioContext(
      channels,
      sampleRate,
    );
  }

  late final _createRealtimeAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createRealtimeAudioContext>>(
          'createRealtimeAudioContext');
  late final _dart_createRealtimeAudioContext _createRealtimeAudioContext =
      _createRealtimeAudioContext_ptr
          .asFunction<_dart_createRealtimeAudioContext>();

  ffi.Pointer<ffi.Int32> createOfflineAudioContext(
    int channels,
    double sampleRate,
    double timeMills,
  ) {
    return _createOfflineAudioContext(
      channels,
      sampleRate,
      timeMills,
    );
  }

  late final _createOfflineAudioContext_ptr =
      _lookup<ffi.NativeFunction<_c_createOfflineAudioContext>>(
          'createOfflineAudioContext');
  late final _dart_createOfflineAudioContext _createOfflineAudioContext =
      _createOfflineAudioContext_ptr
          .asFunction<_dart_createOfflineAudioContext>();

  void AudioContext_startOfflineRendering(
    ffi.Pointer<ffi.Int32> context,
    int recorderIndex,
    ffi.Pointer<ffi.Int8> file_path,
  ) {
    return _AudioContext_startOfflineRendering(
      context,
      recorderIndex,
      file_path,
    );
  }

  late final _AudioContext_startOfflineRendering_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_startOfflineRendering>>(
          'AudioContext_startOfflineRendering');
  late final _dart_AudioContext_startOfflineRendering
      _AudioContext_startOfflineRendering =
      _AudioContext_startOfflineRendering_ptr.asFunction<
          _dart_AudioContext_startOfflineRendering>();

  double AudioContext_currentTime(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_currentTime(
      context,
    );
  }

  late final _AudioContext_currentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentTime>>(
          'AudioContext_currentTime');
  late final _dart_AudioContext_currentTime _AudioContext_currentTime =
      _AudioContext_currentTime_ptr.asFunction<
          _dart_AudioContext_currentTime>();

  double AudioContext_predictedCurrentTime(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_predictedCurrentTime(
      context,
    );
  }

  late final _AudioContext_predictedCurrentTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_predictedCurrentTime>>(
          'AudioContext_predictedCurrentTime');
  late final _dart_AudioContext_predictedCurrentTime
      _AudioContext_predictedCurrentTime =
      _AudioContext_predictedCurrentTime_ptr.asFunction<
          _dart_AudioContext_predictedCurrentTime>();

  double AudioContext_sampleRate(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_sampleRate(
      context,
    );
  }

  late final _AudioContext_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_sampleRate>>(
          'AudioContext_sampleRate');
  late final _dart_AudioContext_sampleRate _AudioContext_sampleRate =
      _AudioContext_sampleRate_ptr.asFunction<_dart_AudioContext_sampleRate>();

  int AudioContext_isInitialized(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_isInitialized(
      context,
    );
  }

  late final _AudioContext_isInitialized_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isInitialized>>(
          'AudioContext_isInitialized');
  late final _dart_AudioContext_isInitialized _AudioContext_isInitialized =
      _AudioContext_isInitialized_ptr.asFunction<
          _dart_AudioContext_isInitialized>();

  int AudioContext_isConnected(
    ffi.Pointer<ffi.Int32> context,
    int destinationIndex,
    int sourceIndex,
  ) {
    return _AudioContext_isConnected(
      context,
      destinationIndex,
      sourceIndex,
    );
  }

  late final _AudioContext_isConnected_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isConnected>>(
          'AudioContext_isConnected');
  late final _dart_AudioContext_isConnected _AudioContext_isConnected =
      _AudioContext_isConnected_ptr.asFunction<
          _dart_AudioContext_isConnected>();

  void AudioContext_setDeviceNode(
    ffi.Pointer<ffi.Int32> context,
    int nodeId,
  ) {
    return _AudioContext_setDeviceNode(
      context,
      nodeId,
    );
  }

  late final _AudioContext_setDeviceNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_setDeviceNode>>(
          'AudioContext_setDeviceNode');
  late final _dart_AudioContext_setDeviceNode _AudioContext_setDeviceNode =
      _AudioContext_setDeviceNode_ptr.asFunction<
          _dart_AudioContext_setDeviceNode>();

  int AudioContext_isOfflineContext(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_isOfflineContext(
      context,
    );
  }

  late final _AudioContext_isOfflineContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_isOfflineContext>>(
          'AudioContext_isOfflineContext');
  late final _dart_AudioContext_isOfflineContext
      _AudioContext_isOfflineContext = _AudioContext_isOfflineContext_ptr
          .asFunction<_dart_AudioContext_isOfflineContext>();

  int AudioContext_currentSampleFrame(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_currentSampleFrame(
      context,
    );
  }

  late final _AudioContext_currentSampleFrame_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_currentSampleFrame>>(
          'AudioContext_currentSampleFrame');
  late final _dart_AudioContext_currentSampleFrame
      _AudioContext_currentSampleFrame = _AudioContext_currentSampleFrame_ptr
          .asFunction<_dart_AudioContext_currentSampleFrame>();

  void AudioContext_connect(
    ffi.Pointer<ffi.Int32> context,
    int destination,
    int source,
  ) {
    return _AudioContext_connect(
      context,
      destination,
      source,
    );
  }

  late final _AudioContext_connect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_connect>>(
          'AudioContext_connect');
  late final _dart_AudioContext_connect _AudioContext_connect =
      _AudioContext_connect_ptr.asFunction<_dart_AudioContext_connect>();

  void AudioContext_disconnect(
    ffi.Pointer<ffi.Int32> context,
    int destination,
    int source,
  ) {
    return _AudioContext_disconnect(
      context,
      destination,
      source,
    );
  }

  late final _AudioContext_disconnect_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_disconnect>>(
          'AudioContext_disconnect');
  late final _dart_AudioContext_disconnect _AudioContext_disconnect =
      _AudioContext_disconnect_ptr.asFunction<_dart_AudioContext_disconnect>();

  void AudioContext_resetDevice(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioContext_resetDevice(
      context,
    );
  }

  late final _AudioContext_resetDevice_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_resetDevice>>(
          'AudioContext_resetDevice');
  late final _dart_AudioContext_resetDevice _AudioContext_resetDevice =
      _AudioContext_resetDevice_ptr.asFunction<
          _dart_AudioContext_resetDevice>();

  void AudioContext_releaseContext(
    ffi.Pointer<ffi.Int32> ctx,
  ) {
    return _AudioContext_releaseContext(
      ctx,
    );
  }

  late final _AudioContext_releaseContext_ptr =
      _lookup<ffi.NativeFunction<_c_AudioContext_releaseContext>>(
          'AudioContext_releaseContext');
  late final _dart_AudioContext_releaseContext _AudioContext_releaseContext =
      _AudioContext_releaseContext_ptr.asFunction<
          _dart_AudioContext_releaseContext>();

  /// AudioParam
  double AudioParam_value(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_value(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_value_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_value>>('AudioParam_value');
  late final _dart_AudioParam_value _AudioParam_value =
      _AudioParam_value_ptr.asFunction<_dart_AudioParam_value>();

  void AudioParam_setValue(
    int nodeId,
    int paramIndex,
    double value,
  ) {
    return _AudioParam_setValue(
      nodeId,
      paramIndex,
      value,
    );
  }

  late final _AudioParam_setValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValue>>(
          'AudioParam_setValue');
  late final _dart_AudioParam_setValue _AudioParam_setValue =
      _AudioParam_setValue_ptr.asFunction<_dart_AudioParam_setValue>();

  void AudioParam_setValueCurveAtTime(
    int nodeId,
    int paramIndex,
    ffi.Pointer<ffi.Float> curve,
    double time,
    double duration,
  ) {
    return _AudioParam_setValueCurveAtTime(
      nodeId,
      paramIndex,
      curve,
      time,
      duration,
    );
  }

  late final _AudioParam_setValueCurveAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueCurveAtTime>>(
          'AudioParam_setValueCurveAtTime');
  late final _dart_AudioParam_setValueCurveAtTime
      _AudioParam_setValueCurveAtTime = _AudioParam_setValueCurveAtTime_ptr
          .asFunction<_dart_AudioParam_setValueCurveAtTime>();

  void AudioParam_cancelScheduledValues(
    int nodeId,
    int paramIndex,
    double startTime,
  ) {
    return _AudioParam_cancelScheduledValues(
      nodeId,
      paramIndex,
      startTime,
    );
  }

  late final _AudioParam_cancelScheduledValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_cancelScheduledValues>>(
          'AudioParam_cancelScheduledValues');
  late final _dart_AudioParam_cancelScheduledValues
      _AudioParam_cancelScheduledValues = _AudioParam_cancelScheduledValues_ptr
          .asFunction<_dart_AudioParam_cancelScheduledValues>();

  void AudioParam_setValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_setValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_setValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setValueAtTime>>(
          'AudioParam_setValueAtTime');
  late final _dart_AudioParam_setValueAtTime _AudioParam_setValueAtTime =
      _AudioParam_setValueAtTime_ptr.asFunction<
          _dart_AudioParam_setValueAtTime>();

  void AudioParam_exponentialRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_exponentialRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_exponentialRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_exponentialRampToValueAtTime>>(
          'AudioParam_exponentialRampToValueAtTime');
  late final _dart_AudioParam_exponentialRampToValueAtTime
      _AudioParam_exponentialRampToValueAtTime =
      _AudioParam_exponentialRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_exponentialRampToValueAtTime>();

  void AudioParam_linearRampToValueAtTime(
    int nodeId,
    int paramIndex,
    double value,
    double time,
  ) {
    return _AudioParam_linearRampToValueAtTime(
      nodeId,
      paramIndex,
      value,
      time,
    );
  }

  late final _AudioParam_linearRampToValueAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_linearRampToValueAtTime>>(
          'AudioParam_linearRampToValueAtTime');
  late final _dart_AudioParam_linearRampToValueAtTime
      _AudioParam_linearRampToValueAtTime =
      _AudioParam_linearRampToValueAtTime_ptr.asFunction<
          _dart_AudioParam_linearRampToValueAtTime>();

  void AudioParam_setTargetAtTime(
    int nodeId,
    int paramIndex,
    double target,
    double time,
    double timeConstant,
  ) {
    return _AudioParam_setTargetAtTime(
      nodeId,
      paramIndex,
      target,
      time,
      timeConstant,
    );
  }

  late final _AudioParam_setTargetAtTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setTargetAtTime>>(
          'AudioParam_setTargetAtTime');
  late final _dart_AudioParam_setTargetAtTime _AudioParam_setTargetAtTime =
      _AudioParam_setTargetAtTime_ptr.asFunction<
          _dart_AudioParam_setTargetAtTime>();

  double AudioParam_minValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_minValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_minValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_minValue>>(
          'AudioParam_minValue');
  late final _dart_AudioParam_minValue _AudioParam_minValue =
      _AudioParam_minValue_ptr.asFunction<_dart_AudioParam_minValue>();

  void AudioParam_resetSmoothedValue(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_resetSmoothedValue(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_resetSmoothedValue_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_resetSmoothedValue>>(
          'AudioParam_resetSmoothedValue');
  late final _dart_AudioParam_resetSmoothedValue
      _AudioParam_resetSmoothedValue = _AudioParam_resetSmoothedValue_ptr
          .asFunction<_dart_AudioParam_resetSmoothedValue>();

  void AudioParam_setSmoothingConstant(
    int nodeId,
    int paramIndex,
    double k,
  ) {
    return _AudioParam_setSmoothingConstant(
      nodeId,
      paramIndex,
      k,
    );
  }

  late final _AudioParam_setSmoothingConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_setSmoothingConstant>>(
          'AudioParam_setSmoothingConstant');
  late final _dart_AudioParam_setSmoothingConstant
      _AudioParam_setSmoothingConstant = _AudioParam_setSmoothingConstant_ptr
          .asFunction<_dart_AudioParam_setSmoothingConstant>();

  int AudioParam_hasSampleAccurateValues(
    int nodeId,
    int paramIndex,
  ) {
    return _AudioParam_hasSampleAccurateValues(
      nodeId,
      paramIndex,
    );
  }

  late final _AudioParam_hasSampleAccurateValues_ptr =
      _lookup<ffi.NativeFunction<_c_AudioParam_hasSampleAccurateValues>>(
          'AudioParam_hasSampleAccurateValues');
  late final _dart_AudioParam_hasSampleAccurateValues
      _AudioParam_hasSampleAccurateValues =
      _AudioParam_hasSampleAccurateValues_ptr.asFunction<
          _dart_AudioParam_hasSampleAccurateValues>();

  /// AudioNode
  int AudioNode_isScheduledNode(
    int nodeId,
  ) {
    return _AudioNode_isScheduledNode(
      nodeId,
    );
  }

  late final _AudioNode_isScheduledNode_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_isScheduledNode>>(
          'AudioNode_isScheduledNode');
  late final _dart_AudioNode_isScheduledNode _AudioNode_isScheduledNode =
      _AudioNode_isScheduledNode_ptr.asFunction<
          _dart_AudioNode_isScheduledNode>();

  int AudioNode_numberOfInputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfInputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfInputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfInputs>>(
          'AudioNode_numberOfInputs');
  late final _dart_AudioNode_numberOfInputs _AudioNode_numberOfInputs =
      _AudioNode_numberOfInputs_ptr.asFunction<
          _dart_AudioNode_numberOfInputs>();

  int AudioNode_numberOfOutputs(
    int nodeId,
  ) {
    return _AudioNode_numberOfOutputs(
      nodeId,
    );
  }

  late final _AudioNode_numberOfOutputs_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_numberOfOutputs>>(
          'AudioNode_numberOfOutputs');
  late final _dart_AudioNode_numberOfOutputs _AudioNode_numberOfOutputs =
      _AudioNode_numberOfOutputs_ptr.asFunction<
          _dart_AudioNode_numberOfOutputs>();

  int AudioNode_channelCount(
    int nodeId,
  ) {
    return _AudioNode_channelCount(
      nodeId,
    );
  }

  late final _AudioNode_channelCount_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_channelCount>>(
          'AudioNode_channelCount');
  late final _dart_AudioNode_channelCount _AudioNode_channelCount =
      _AudioNode_channelCount_ptr.asFunction<_dart_AudioNode_channelCount>();

  void AudioNode_reset(
    int nodeId,
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _AudioNode_reset(
      nodeId,
      context,
    );
  }

  late final _AudioNode_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioNode_reset>>('AudioNode_reset');
  late final _dart_AudioNode_reset _AudioNode_reset =
      _AudioNode_reset_ptr.asFunction<_dart_AudioNode_reset>();

  void releaseNode(
    int nodeId,
  ) {
    return _releaseNode(
      nodeId,
    );
  }

  late final _releaseNode_ptr =
      _lookup<ffi.NativeFunction<_c_releaseNode>>('releaseNode');
  late final _dart_releaseNode _releaseNode =
      _releaseNode_ptr.asFunction<_dart_releaseNode>();

  /// AudioScheduledSourceNode
  int AudioScheduledSourceNode_isPlayingOrScheduled(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_isPlayingOrScheduled(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_isPlayingOrScheduled_ptr = _lookup<
          ffi.NativeFunction<_c_AudioScheduledSourceNode_isPlayingOrScheduled>>(
      'AudioScheduledSourceNode_isPlayingOrScheduled');
  late final _dart_AudioScheduledSourceNode_isPlayingOrScheduled
      _AudioScheduledSourceNode_isPlayingOrScheduled =
      _AudioScheduledSourceNode_isPlayingOrScheduled_ptr.asFunction<
          _dart_AudioScheduledSourceNode_isPlayingOrScheduled>();

  void AudioScheduledSourceNode_stop(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_stop(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_stop_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_stop>>(
          'AudioScheduledSourceNode_stop');
  late final _dart_AudioScheduledSourceNode_stop
      _AudioScheduledSourceNode_stop = _AudioScheduledSourceNode_stop_ptr
          .asFunction<_dart_AudioScheduledSourceNode_stop>();

  int AudioScheduledSourceNode_hasFinished(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_hasFinished(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_hasFinished_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_hasFinished>>(
          'AudioScheduledSourceNode_hasFinished');
  late final _dart_AudioScheduledSourceNode_hasFinished
      _AudioScheduledSourceNode_hasFinished =
      _AudioScheduledSourceNode_hasFinished_ptr.asFunction<
          _dart_AudioScheduledSourceNode_hasFinished>();

  int AudioScheduledSourceNode_startWhen(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_startWhen(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_startWhen_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_startWhen>>(
          'AudioScheduledSourceNode_startWhen');
  late final _dart_AudioScheduledSourceNode_startWhen
      _AudioScheduledSourceNode_startWhen =
      _AudioScheduledSourceNode_startWhen_ptr.asFunction<
          _dart_AudioScheduledSourceNode_startWhen>();

  void AudioScheduledSourceNode_start(
    int nodeId,
    double when,
  ) {
    return _AudioScheduledSourceNode_start(
      nodeId,
      when,
    );
  }

  late final _AudioScheduledSourceNode_start_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_start>>(
          'AudioScheduledSourceNode_start');
  late final _dart_AudioScheduledSourceNode_start
      _AudioScheduledSourceNode_start = _AudioScheduledSourceNode_start_ptr
          .asFunction<_dart_AudioScheduledSourceNode_start>();

  int AudioScheduledSourceNode_playbackState(
    int nodeId,
  ) {
    return _AudioScheduledSourceNode_playbackState(
      nodeId,
    );
  }

  late final _AudioScheduledSourceNode_playbackState_ptr =
      _lookup<ffi.NativeFunction<_c_AudioScheduledSourceNode_playbackState>>(
          'AudioScheduledSourceNode_playbackState');
  late final _dart_AudioScheduledSourceNode_playbackState
      _AudioScheduledSourceNode_playbackState =
      _AudioScheduledSourceNode_playbackState_ptr.asFunction<
          _dart_AudioScheduledSourceNode_playbackState>();

  /// SampledAudioNode
  int createAudioSampleNode(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _createAudioSampleNode(
      context,
    );
  }

  late final _createAudioSampleNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAudioSampleNode>>(
          'createAudioSampleNode');
  late final _dart_createAudioSampleNode _createAudioSampleNode =
      _createAudioSampleNode_ptr.asFunction<_dart_createAudioSampleNode>();

  void SampledAudioNode_setBus(
    int nodeIndex,
    ffi.Pointer<ffi.Int32> context,
    int busIndex,
  ) {
    return _SampledAudioNode_setBus(
      nodeIndex,
      context,
      busIndex,
    );
  }

  late final _SampledAudioNode_setBus_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_setBus>>(
          'SampledAudioNode_setBus');
  late final _dart_SampledAudioNode_setBus _SampledAudioNode_setBus =
      _SampledAudioNode_setBus_ptr.asFunction<_dart_SampledAudioNode_setBus>();

  void SampledAudioNode_schedule(
    int nodeId,
    double when,
  ) {
    return _SampledAudioNode_schedule(
      nodeId,
      when,
    );
  }

  late final _SampledAudioNode_schedule_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule>>(
          'SampledAudioNode_schedule');
  late final _dart_SampledAudioNode_schedule _SampledAudioNode_schedule =
      _SampledAudioNode_schedule_ptr.asFunction<
          _dart_SampledAudioNode_schedule>();

  void SampledAudioNode_schedule2(
    int nodeId,
    double when,
    double grainOffset,
  ) {
    return _SampledAudioNode_schedule2(
      nodeId,
      when,
      grainOffset,
    );
  }

  late final _SampledAudioNode_schedule2_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule2>>(
          'SampledAudioNode_schedule2');
  late final _dart_SampledAudioNode_schedule2 _SampledAudioNode_schedule2 =
      _SampledAudioNode_schedule2_ptr.asFunction<
          _dart_SampledAudioNode_schedule2>();

  void SampledAudioNode_schedule3(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
  ) {
    return _SampledAudioNode_schedule3(
      nodeId,
      when,
      grainOffset,
      grainDuration,
    );
  }

  late final _SampledAudioNode_schedule3_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule3>>(
          'SampledAudioNode_schedule3');
  late final _dart_SampledAudioNode_schedule3 _SampledAudioNode_schedule3 =
      _SampledAudioNode_schedule3_ptr.asFunction<
          _dart_SampledAudioNode_schedule3>();

  void SampledAudioNode_schedule4(
    int nodeId,
    double when,
    double grainOffset,
    double grainDuration,
    int loopCount,
  ) {
    return _SampledAudioNode_schedule4(
      nodeId,
      when,
      grainOffset,
      grainDuration,
      loopCount,
    );
  }

  late final _SampledAudioNode_schedule4_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_schedule4>>(
          'SampledAudioNode_schedule4');
  late final _dart_SampledAudioNode_schedule4 _SampledAudioNode_schedule4 =
      _SampledAudioNode_schedule4_ptr.asFunction<
          _dart_SampledAudioNode_schedule4>();

  void SampledAudioNode_clearSchedules(
    int nodeId,
  ) {
    return _SampledAudioNode_clearSchedules(
      nodeId,
    );
  }

  late final _SampledAudioNode_clearSchedules_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_clearSchedules>>(
          'SampledAudioNode_clearSchedules');
  late final _dart_SampledAudioNode_clearSchedules
      _SampledAudioNode_clearSchedules = _SampledAudioNode_clearSchedules_ptr
          .asFunction<_dart_SampledAudioNode_clearSchedules>();

  int SampledAudioNode_getCursor(
    int index,
  ) {
    return _SampledAudioNode_getCursor(
      index,
    );
  }

  late final _SampledAudioNode_getCursor_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_getCursor>>(
          'SampledAudioNode_getCursor');
  late final _dart_SampledAudioNode_getCursor _SampledAudioNode_getCursor =
      _SampledAudioNode_getCursor_ptr.asFunction<
          _dart_SampledAudioNode_getCursor>();

  int SampledAudioNode_playbackRate(
    int index,
  ) {
    return _SampledAudioNode_playbackRate(
      index,
    );
  }

  late final _SampledAudioNode_playbackRate_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_playbackRate>>(
          'SampledAudioNode_playbackRate');
  late final _dart_SampledAudioNode_playbackRate
      _SampledAudioNode_playbackRate = _SampledAudioNode_playbackRate_ptr
          .asFunction<_dart_SampledAudioNode_playbackRate>();

  int SampledAudioNode_detune(
    int index,
  ) {
    return _SampledAudioNode_detune(
      index,
    );
  }

  late final _SampledAudioNode_detune_ptr =
      _lookup<ffi.NativeFunction<_c_SampledAudioNode_detune>>(
          'SampledAudioNode_detune');
  late final _dart_SampledAudioNode_detune _SampledAudioNode_detune =
      _SampledAudioNode_detune_ptr.asFunction<_dart_SampledAudioNode_detune>();

  /// AudioBus
  int decodeAudioData(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _decodeAudioData(
      file,
    );
  }

  late final _decodeAudioData_ptr =
      _lookup<ffi.NativeFunction<_c_decodeAudioData>>('decodeAudioData');
  late final _dart_decodeAudioData _decodeAudioData =
      _decodeAudioData_ptr.asFunction<_dart_decodeAudioData>();

  int decodeAudioDataAsync(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _decodeAudioDataAsync(
      file,
    );
  }

  late final _decodeAudioDataAsync_ptr =
      _lookup<ffi.NativeFunction<_c_decodeAudioDataAsync>>(
          'decodeAudioDataAsync');
  late final _dart_decodeAudioDataAsync _decodeAudioDataAsync =
      _decodeAudioDataAsync_ptr.asFunction<_dart_decodeAudioDataAsync>();

  int decodeAudioDataHasCheck(
    int busIndex,
  ) {
    return _decodeAudioDataHasCheck(
      busIndex,
    );
  }

  late final _decodeAudioDataHasCheck_ptr =
      _lookup<ffi.NativeFunction<_c_decodeAudioDataHasCheck>>(
          'decodeAudioDataHasCheck');
  late final _dart_decodeAudioDataHasCheck _decodeAudioDataHasCheck =
      _decodeAudioDataHasCheck_ptr.asFunction<_dart_decodeAudioDataHasCheck>();

  int AudioBus_numberOfChannels(
    int busIndex,
  ) {
    return _AudioBus_numberOfChannels(
      busIndex,
    );
  }

  late final _AudioBus_numberOfChannels_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_numberOfChannels>>(
          'AudioBus_numberOfChannels');
  late final _dart_AudioBus_numberOfChannels _AudioBus_numberOfChannels =
      _AudioBus_numberOfChannels_ptr.asFunction<
          _dart_AudioBus_numberOfChannels>();

  int AudioBus_length(
    int busIndex,
  ) {
    return _AudioBus_length(
      busIndex,
    );
  }

  late final _AudioBus_length_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_length>>('AudioBus_length');
  late final _dart_AudioBus_length _AudioBus_length =
      _AudioBus_length_ptr.asFunction<_dart_AudioBus_length>();

  double AudioBus_sampleRate(
    int busIndex,
  ) {
    return _AudioBus_sampleRate(
      busIndex,
    );
  }

  late final _AudioBus_sampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_sampleRate>>(
          'AudioBus_sampleRate');
  late final _dart_AudioBus_sampleRate _AudioBus_sampleRate =
      _AudioBus_sampleRate_ptr.asFunction<_dart_AudioBus_sampleRate>();

  void AudioBus_zero(
    int busIndex,
  ) {
    return _AudioBus_zero(
      busIndex,
    );
  }

  late final _AudioBus_zero_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_zero>>('AudioBus_zero');
  late final _dart_AudioBus_zero _AudioBus_zero =
      _AudioBus_zero_ptr.asFunction<_dart_AudioBus_zero>();

  void AudioBus_clearSilentFlag(
    int busIndex,
  ) {
    return _AudioBus_clearSilentFlag(
      busIndex,
    );
  }

  late final _AudioBus_clearSilentFlag_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_clearSilentFlag>>(
          'AudioBus_clearSilentFlag');
  late final _dart_AudioBus_clearSilentFlag _AudioBus_clearSilentFlag =
      _AudioBus_clearSilentFlag_ptr.asFunction<
          _dart_AudioBus_clearSilentFlag>();

  void AudioBus_scale(
    int busIndex,
    double scale,
  ) {
    return _AudioBus_scale(
      busIndex,
      scale,
    );
  }

  late final _AudioBus_scale_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_scale>>('AudioBus_scale');
  late final _dart_AudioBus_scale _AudioBus_scale =
      _AudioBus_scale_ptr.asFunction<_dart_AudioBus_scale>();

  void AudioBus_reset(
    int busIndex,
  ) {
    return _AudioBus_reset(
      busIndex,
    );
  }

  late final _AudioBus_reset_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_reset>>('AudioBus_reset');
  late final _dart_AudioBus_reset _AudioBus_reset =
      _AudioBus_reset_ptr.asFunction<_dart_AudioBus_reset>();

  int AudioBus_isSilent(
    int busIndex,
  ) {
    return _AudioBus_isSilent(
      busIndex,
    );
  }

  late final _AudioBus_isSilent_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isSilent>>('AudioBus_isSilent');
  late final _dart_AudioBus_isSilent _AudioBus_isSilent =
      _AudioBus_isSilent_ptr.asFunction<_dart_AudioBus_isSilent>();

  int AudioBus_isFirstTime(
    int busIndex,
  ) {
    return _AudioBus_isFirstTime(
      busIndex,
    );
  }

  late final _AudioBus_isFirstTime_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_isFirstTime>>(
          'AudioBus_isFirstTime');
  late final _dart_AudioBus_isFirstTime _AudioBus_isFirstTime =
      _AudioBus_isFirstTime_ptr.asFunction<_dart_AudioBus_isFirstTime>();

  void AudioBus_setSampleRate(
    int busIndex,
    double sampleRate,
  ) {
    return _AudioBus_setSampleRate(
      busIndex,
      sampleRate,
    );
  }

  late final _AudioBus_setSampleRate_ptr =
      _lookup<ffi.NativeFunction<_c_AudioBus_setSampleRate>>(
          'AudioBus_setSampleRate');
  late final _dart_AudioBus_setSampleRate _AudioBus_setSampleRate =
      _AudioBus_setSampleRate_ptr.asFunction<_dart_AudioBus_setSampleRate>();

  void releaseAudioBus(
    int index,
  ) {
    return _releaseAudioBus(
      index,
    );
  }

  late final _releaseAudioBus_ptr =
      _lookup<ffi.NativeFunction<_c_releaseAudioBus>>('releaseAudioBus');
  late final _dart_releaseAudioBus _releaseAudioBus =
      _releaseAudioBus_ptr.asFunction<_dart_releaseAudioBus>();

  /// GainNode
  int createGain(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _createGain(
      context,
    );
  }

  late final _createGain_ptr =
      _lookup<ffi.NativeFunction<_c_createGain>>('createGain');
  late final _dart_createGain _createGain =
      _createGain_ptr.asFunction<_dart_createGain>();

  int GainNode_gain(
    int nodeId,
  ) {
    return _GainNode_gain(
      nodeId,
    );
  }

  late final _GainNode_gain_ptr =
      _lookup<ffi.NativeFunction<_c_GainNode_gain>>('GainNode_gain');
  late final _dart_GainNode_gain _GainNode_gain =
      _GainNode_gain_ptr.asFunction<_dart_GainNode_gain>();

  /// RecorderNode
  int createRecorderNode(
    ffi.Pointer<ffi.Int32> context,
    int channels,
    double sampleRate,
  ) {
    return _createRecorderNode(
      context,
      channels,
      sampleRate,
    );
  }

  late final _createRecorderNode_ptr =
      _lookup<ffi.NativeFunction<_c_createRecorderNode>>('createRecorderNode');
  late final _dart_createRecorderNode _createRecorderNode =
      _createRecorderNode_ptr.asFunction<_dart_createRecorderNode>();

  /// AnalyserNode
  int createAnalyserNode(
    ffi.Pointer<ffi.Int32> context,
  ) {
    return _createAnalyserNode(
      context,
    );
  }

  late final _createAnalyserNode_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNode>>('createAnalyserNode');
  late final _dart_createAnalyserNode _createAnalyserNode =
      _createAnalyserNode_ptr.asFunction<_dart_createAnalyserNode>();

  int createAnalyserNodeFftSize(
    ffi.Pointer<ffi.Int32> context,
    int fftSize,
  ) {
    return _createAnalyserNodeFftSize(
      context,
      fftSize,
    );
  }

  late final _createAnalyserNodeFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_createAnalyserNodeFftSize>>(
          'createAnalyserNodeFftSize');
  late final _dart_createAnalyserNodeFftSize _createAnalyserNodeFftSize =
      _createAnalyserNodeFftSize_ptr
          .asFunction<_dart_createAnalyserNodeFftSize>();

  void AnalyserNode_setFftSize(
    int nodeIndex,
    ffi.Pointer<ffi.Int32> context,
    int fftSize,
  ) {
    return _AnalyserNode_setFftSize(
      nodeIndex,
      context,
      fftSize,
    );
  }

  late final _AnalyserNode_setFftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setFftSize>>(
          'AnalyserNode_setFftSize');
  late final _dart_AnalyserNode_setFftSize _AnalyserNode_setFftSize =
      _AnalyserNode_setFftSize_ptr.asFunction<_dart_AnalyserNode_setFftSize>();

  int AnalyserNode_fftSize(
    int nodeIndex,
  ) {
    return _AnalyserNode_fftSize(
      nodeIndex,
    );
  }

  late final _AnalyserNode_fftSize_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_fftSize>>(
          'AnalyserNode_fftSize');
  late final _dart_AnalyserNode_fftSize _AnalyserNode_fftSize =
      _AnalyserNode_fftSize_ptr.asFunction<_dart_AnalyserNode_fftSize>();

  int AnalyserNode_frequencyBinCount(
    int nodeIndex,
  ) {
    return _AnalyserNode_frequencyBinCount(
      nodeIndex,
    );
  }

  late final _AnalyserNode_frequencyBinCount_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_frequencyBinCount>>(
          'AnalyserNode_frequencyBinCount');
  late final _dart_AnalyserNode_frequencyBinCount
      _AnalyserNode_frequencyBinCount = _AnalyserNode_frequencyBinCount_ptr
          .asFunction<_dart_AnalyserNode_frequencyBinCount>();

  void AnalyserNode_setMinDecibels(
    int nodeIndex,
    double k,
  ) {
    return _AnalyserNode_setMinDecibels(
      nodeIndex,
      k,
    );
  }

  late final _AnalyserNode_setMinDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMinDecibels>>(
          'AnalyserNode_setMinDecibels');
  late final _dart_AnalyserNode_setMinDecibels _AnalyserNode_setMinDecibels =
      _AnalyserNode_setMinDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMinDecibels>();

  int AnalyserNode_minDecibels(
    int nodeIndex,
  ) {
    return _AnalyserNode_minDecibels(
      nodeIndex,
    );
  }

  late final _AnalyserNode_minDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_minDecibels>>(
          'AnalyserNode_minDecibels');
  late final _dart_AnalyserNode_minDecibels _AnalyserNode_minDecibels =
      _AnalyserNode_minDecibels_ptr.asFunction<
          _dart_AnalyserNode_minDecibels>();

  void AnalyserNode_setMaxDecibels(
    int nodeIndex,
    double k,
  ) {
    return _AnalyserNode_setMaxDecibels(
      nodeIndex,
      k,
    );
  }

  late final _AnalyserNode_setMaxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setMaxDecibels>>(
          'AnalyserNode_setMaxDecibels');
  late final _dart_AnalyserNode_setMaxDecibels _AnalyserNode_setMaxDecibels =
      _AnalyserNode_setMaxDecibels_ptr.asFunction<
          _dart_AnalyserNode_setMaxDecibels>();

  int AnalyserNode_maxDecibels(
    int nodeIndex,
  ) {
    return _AnalyserNode_maxDecibels(
      nodeIndex,
    );
  }

  late final _AnalyserNode_maxDecibels_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_maxDecibels>>(
          'AnalyserNode_maxDecibels');
  late final _dart_AnalyserNode_maxDecibels _AnalyserNode_maxDecibels =
      _AnalyserNode_maxDecibels_ptr.asFunction<
          _dart_AnalyserNode_maxDecibels>();

  void AnalyserNode_setSmoothingTimeConstant(
    int nodeIndex,
    double k,
  ) {
    return _AnalyserNode_setSmoothingTimeConstant(
      nodeIndex,
      k,
    );
  }

  late final _AnalyserNode_setSmoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_setSmoothingTimeConstant>>(
          'AnalyserNode_setSmoothingTimeConstant');
  late final _dart_AnalyserNode_setSmoothingTimeConstant
      _AnalyserNode_setSmoothingTimeConstant =
      _AnalyserNode_setSmoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_setSmoothingTimeConstant>();

  int AnalyserNode_smoothingTimeConstant(
    int nodeIndex,
  ) {
    return _AnalyserNode_smoothingTimeConstant(
      nodeIndex,
    );
  }

  late final _AnalyserNode_smoothingTimeConstant_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_smoothingTimeConstant>>(
          'AnalyserNode_smoothingTimeConstant');
  late final _dart_AnalyserNode_smoothingTimeConstant
      _AnalyserNode_smoothingTimeConstant =
      _AnalyserNode_smoothingTimeConstant_ptr.asFunction<
          _dart_AnalyserNode_smoothingTimeConstant>();

  int AnalyserNode_getFloatFrequencyData(
    int nodeIndex,
    ffi.Pointer<ffi.Float> array,
  ) {
    return _AnalyserNode_getFloatFrequencyData(
      nodeIndex,
      array,
    );
  }

  late final _AnalyserNode_getFloatFrequencyData_ptr =
      _lookup<ffi.NativeFunction<_c_AnalyserNode_getFloatFrequencyData>>(
          'AnalyserNode_getFloatFrequencyData');
  late final _dart_AnalyserNode_getFloatFrequencyData
      _AnalyserNode_getFloatFrequencyData =
      _AnalyserNode_getFloatFrequencyData_ptr.asFunction<
          _dart_AnalyserNode_getFloatFrequencyData>();
}

class FloatArray extends ffi.Struct {
  external ffi.Pointer<ffi.Float> array;

  @ffi.Int32()
  external int len;
}

class IntArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> array;

  @ffi.Int32()
  external int len;
}

typedef _c_InitDartApiDL = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_InitDartApiDL = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_registerDecodeAudioSendPort = ffi.Void Function(
  ffi.Int32 sendPort,
);

typedef _dart_registerDecodeAudioSendPort = void Function(
  int sendPort,
);

typedef _c_createRealtimeAudioContext = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 channels,
  ffi.Float sampleRate,
);

typedef _dart_createRealtimeAudioContext = ffi.Pointer<ffi.Int32> Function(
  int channels,
  double sampleRate,
);

typedef _c_createOfflineAudioContext = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 channels,
  ffi.Float sampleRate,
  ffi.Float timeMills,
);

typedef _dart_createOfflineAudioContext = ffi.Pointer<ffi.Int32> Function(
  int channels,
  double sampleRate,
  double timeMills,
);

typedef _c_AudioContext_startOfflineRendering = ffi.Void Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 recorderIndex,
  ffi.Pointer<ffi.Int8> file_path,
);

typedef _dart_AudioContext_startOfflineRendering = void Function(
  ffi.Pointer<ffi.Int32> context,
  int recorderIndex,
  ffi.Pointer<ffi.Int8> file_path,
);

typedef _c_AudioContext_currentTime = ffi.Double Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_currentTime = double Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_predictedCurrentTime = ffi.Double Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_predictedCurrentTime = double Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_sampleRate = ffi.Float Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_sampleRate = double Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_isInitialized = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_isInitialized = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_isConnected = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 destinationIndex,
  ffi.Int32 sourceIndex,
);

typedef _dart_AudioContext_isConnected = int Function(
  ffi.Pointer<ffi.Int32> context,
  int destinationIndex,
  int sourceIndex,
);

typedef _c_AudioContext_setDeviceNode = ffi.Void Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 nodeId,
);

typedef _dart_AudioContext_setDeviceNode = void Function(
  ffi.Pointer<ffi.Int32> context,
  int nodeId,
);

typedef _c_AudioContext_isOfflineContext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_isOfflineContext = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_currentSampleFrame = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_currentSampleFrame = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_connect = ffi.Void Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 destination,
  ffi.Int32 source,
);

typedef _dart_AudioContext_connect = void Function(
  ffi.Pointer<ffi.Int32> context,
  int destination,
  int source,
);

typedef _c_AudioContext_disconnect = ffi.Void Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 destination,
  ffi.Int32 source,
);

typedef _dart_AudioContext_disconnect = void Function(
  ffi.Pointer<ffi.Int32> context,
  int destination,
  int source,
);

typedef _c_AudioContext_resetDevice = ffi.Void Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioContext_resetDevice = void Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_AudioContext_releaseContext = ffi.Void Function(
  ffi.Pointer<ffi.Int32> ctx,
);

typedef _dart_AudioContext_releaseContext = void Function(
  ffi.Pointer<ffi.Int32> ctx,
);

typedef _c_AudioParam_value = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_value = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
);

typedef _dart_AudioParam_setValue = void Function(
  int nodeId,
  int paramIndex,
  double value,
);

typedef _c_AudioParam_setValueCurveAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Pointer<ffi.Float> curve,
  ffi.Float time,
  ffi.Float duration,
);

typedef _dart_AudioParam_setValueCurveAtTime = void Function(
  int nodeId,
  int paramIndex,
  ffi.Pointer<ffi.Float> curve,
  double time,
  double duration,
);

typedef _c_AudioParam_cancelScheduledValues = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float startTime,
);

typedef _dart_AudioParam_cancelScheduledValues = void Function(
  int nodeId,
  int paramIndex,
  double startTime,
);

typedef _c_AudioParam_setValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_setValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_exponentialRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_exponentialRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_linearRampToValueAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float value,
  ffi.Float time,
);

typedef _dart_AudioParam_linearRampToValueAtTime = void Function(
  int nodeId,
  int paramIndex,
  double value,
  double time,
);

typedef _c_AudioParam_setTargetAtTime = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Float target,
  ffi.Float time,
  ffi.Float timeConstant,
);

typedef _dart_AudioParam_setTargetAtTime = void Function(
  int nodeId,
  int paramIndex,
  double target,
  double time,
  double timeConstant,
);

typedef _c_AudioParam_minValue = ffi.Float Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_minValue = double Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_resetSmoothedValue = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_resetSmoothedValue = void Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioParam_setSmoothingConstant = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
  ffi.Double k,
);

typedef _dart_AudioParam_setSmoothingConstant = void Function(
  int nodeId,
  int paramIndex,
  double k,
);

typedef _c_AudioParam_hasSampleAccurateValues = ffi.Int32 Function(
  ffi.Int32 nodeId,
  ffi.Int32 paramIndex,
);

typedef _dart_AudioParam_hasSampleAccurateValues = int Function(
  int nodeId,
  int paramIndex,
);

typedef _c_AudioNode_isScheduledNode = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_isScheduledNode = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfInputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfInputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_numberOfOutputs = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_numberOfOutputs = int Function(
  int nodeId,
);

typedef _c_AudioNode_channelCount = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioNode_channelCount = int Function(
  int nodeId,
);

typedef _c_AudioNode_reset = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_AudioNode_reset = void Function(
  int nodeId,
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_releaseNode = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_releaseNode = void Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_isPlayingOrScheduled = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_isPlayingOrScheduled = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_stop = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_stop = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_hasFinished = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_hasFinished = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_startWhen = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_startWhen = int Function(
  int nodeId,
);

typedef _c_AudioScheduledSourceNode_start = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Float when,
);

typedef _dart_AudioScheduledSourceNode_start = void Function(
  int nodeId,
  double when,
);

typedef _c_AudioScheduledSourceNode_playbackState = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_AudioScheduledSourceNode_playbackState = int Function(
  int nodeId,
);

typedef _c_createAudioSampleNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_createAudioSampleNode = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_SampledAudioNode_setBus = ffi.Void Function(
  ffi.Int32 nodeIndex,
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 busIndex,
);

typedef _dart_SampledAudioNode_setBus = void Function(
  int nodeIndex,
  ffi.Pointer<ffi.Int32> context,
  int busIndex,
);

typedef _c_SampledAudioNode_schedule = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
);

typedef _dart_SampledAudioNode_schedule = void Function(
  int nodeId,
  double when,
);

typedef _c_SampledAudioNode_schedule2 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
);

typedef _dart_SampledAudioNode_schedule2 = void Function(
  int nodeId,
  double when,
  double grainOffset,
);

typedef _c_SampledAudioNode_schedule3 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
);

typedef _dart_SampledAudioNode_schedule3 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
);

typedef _c_SampledAudioNode_schedule4 = ffi.Void Function(
  ffi.Int32 nodeId,
  ffi.Double when,
  ffi.Double grainOffset,
  ffi.Double grainDuration,
  ffi.Int32 loopCount,
);

typedef _dart_SampledAudioNode_schedule4 = void Function(
  int nodeId,
  double when,
  double grainOffset,
  double grainDuration,
  int loopCount,
);

typedef _c_SampledAudioNode_clearSchedules = ffi.Void Function(
  ffi.Int32 nodeId,
);

typedef _dart_SampledAudioNode_clearSchedules = void Function(
  int nodeId,
);

typedef _c_SampledAudioNode_getCursor = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_getCursor = int Function(
  int index,
);

typedef _c_SampledAudioNode_playbackRate = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_playbackRate = int Function(
  int index,
);

typedef _c_SampledAudioNode_detune = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_SampledAudioNode_detune = int Function(
  int index,
);

typedef _c_decodeAudioData = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_decodeAudioData = int Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_decodeAudioDataAsync = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _dart_decodeAudioDataAsync = int Function(
  ffi.Pointer<ffi.Int8> file,
);

typedef _c_decodeAudioDataHasCheck = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_decodeAudioDataHasCheck = int Function(
  int busIndex,
);

typedef _c_AudioBus_numberOfChannels = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_numberOfChannels = int Function(
  int busIndex,
);

typedef _c_AudioBus_length = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_length = int Function(
  int busIndex,
);

typedef _c_AudioBus_sampleRate = ffi.Float Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_sampleRate = double Function(
  int busIndex,
);

typedef _c_AudioBus_zero = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_zero = void Function(
  int busIndex,
);

typedef _c_AudioBus_clearSilentFlag = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_clearSilentFlag = void Function(
  int busIndex,
);

typedef _c_AudioBus_scale = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float scale,
);

typedef _dart_AudioBus_scale = void Function(
  int busIndex,
  double scale,
);

typedef _c_AudioBus_reset = ffi.Void Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_reset = void Function(
  int busIndex,
);

typedef _c_AudioBus_isSilent = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isSilent = int Function(
  int busIndex,
);

typedef _c_AudioBus_isFirstTime = ffi.Int32 Function(
  ffi.Int32 busIndex,
);

typedef _dart_AudioBus_isFirstTime = int Function(
  int busIndex,
);

typedef _c_AudioBus_setSampleRate = ffi.Void Function(
  ffi.Int32 busIndex,
  ffi.Float sampleRate,
);

typedef _dart_AudioBus_setSampleRate = void Function(
  int busIndex,
  double sampleRate,
);

typedef _c_releaseAudioBus = ffi.Void Function(
  ffi.Int32 index,
);

typedef _dart_releaseAudioBus = void Function(
  int index,
);

typedef _c_createGain = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_createGain = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_GainNode_gain = ffi.Int32 Function(
  ffi.Int32 nodeId,
);

typedef _dart_GainNode_gain = int Function(
  int nodeId,
);

typedef _c_createRecorderNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 channels,
  ffi.Float sampleRate,
);

typedef _dart_createRecorderNode = int Function(
  ffi.Pointer<ffi.Int32> context,
  int channels,
  double sampleRate,
);

typedef _c_createAnalyserNode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _dart_createAnalyserNode = int Function(
  ffi.Pointer<ffi.Int32> context,
);

typedef _c_createAnalyserNodeFftSize = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 fftSize,
);

typedef _dart_createAnalyserNodeFftSize = int Function(
  ffi.Pointer<ffi.Int32> context,
  int fftSize,
);

typedef _c_AnalyserNode_setFftSize = ffi.Void Function(
  ffi.Int32 nodeIndex,
  ffi.Pointer<ffi.Int32> context,
  ffi.Int32 fftSize,
);

typedef _dart_AnalyserNode_setFftSize = void Function(
  int nodeIndex,
  ffi.Pointer<ffi.Int32> context,
  int fftSize,
);

typedef _c_AnalyserNode_fftSize = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
);

typedef _dart_AnalyserNode_fftSize = int Function(
  int nodeIndex,
);

typedef _c_AnalyserNode_frequencyBinCount = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
);

typedef _dart_AnalyserNode_frequencyBinCount = int Function(
  int nodeIndex,
);

typedef _c_AnalyserNode_setMinDecibels = ffi.Void Function(
  ffi.Int32 nodeIndex,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMinDecibels = void Function(
  int nodeIndex,
  double k,
);

typedef _c_AnalyserNode_minDecibels = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
);

typedef _dart_AnalyserNode_minDecibels = int Function(
  int nodeIndex,
);

typedef _c_AnalyserNode_setMaxDecibels = ffi.Void Function(
  ffi.Int32 nodeIndex,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setMaxDecibels = void Function(
  int nodeIndex,
  double k,
);

typedef _c_AnalyserNode_maxDecibels = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
);

typedef _dart_AnalyserNode_maxDecibels = int Function(
  int nodeIndex,
);

typedef _c_AnalyserNode_setSmoothingTimeConstant = ffi.Void Function(
  ffi.Int32 nodeIndex,
  ffi.Double k,
);

typedef _dart_AnalyserNode_setSmoothingTimeConstant = void Function(
  int nodeIndex,
  double k,
);

typedef _c_AnalyserNode_smoothingTimeConstant = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
);

typedef _dart_AnalyserNode_smoothingTimeConstant = int Function(
  int nodeIndex,
);

typedef _c_AnalyserNode_getFloatFrequencyData = ffi.Int32 Function(
  ffi.Int32 nodeIndex,
  ffi.Pointer<ffi.Float> array,
);

typedef _dart_AnalyserNode_getFloatFrequencyData = int Function(
  int nodeIndex,
  ffi.Pointer<ffi.Float> array,
);
